{
  
    
        "post0": {
            "title": "Title",
            "content": ". &#47532;&#49828;&#53944; . 리스트 안에는 어떠한 자료형도 포함시킬 수 있다. 숫자, 문자열 뿐 아니라 변수, 다른 리스트도 저장할 수 있다. 하나의 리스트 안에 다양한 자료형을 혼합하여 포함시킬 수 있다. . n1 = 100 fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] mylist = [n1, fruits, 20, 30, &#39;슈퍼맨&#39;, True, [1,2,3]] #n1 은 변수값 mylist for x in mylist: print(type(x)) . &lt;class &#39;int&#39;&gt; &lt;class &#39;list&#39;&gt; &lt;class &#39;int&#39;&gt; &lt;class &#39;int&#39;&gt; &lt;class &#39;str&#39;&gt; &lt;class &#39;bool&#39;&gt; &lt;class &#39;list&#39;&gt; . list_1 = [1,2,3,4,5] list_1 . [1, 2, 3, 4, 5] . list_2 = list(range(0,5)) list_2 . [0, 1, 2, 3, 4] . &#47532;&#49828;&#53944; &#52636;&#47141;&#54616;&#44592; . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] for fruit in fruits: print(fruit) #리스트 출력 시 디폴트값이 Enter이기 때문에 줄을 바꿔서 출력된다. . 사과 오렌지 포도 수박 바나나 . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] for i in fruits: print(type(i), end=&#39; : &#39;) print(i) . &lt;class &#39;str&#39;&gt; : 사과 &lt;class &#39;str&#39;&gt; : 오렌지 &lt;class &#39;str&#39;&gt; : 포도 &lt;class &#39;str&#39;&gt; : 수박 &lt;class &#39;str&#39;&gt; : 바나나 . &#51064;&#45937;&#49905;: &#47532;&#49828;&#53944; &#50836;&#49548; &#52628;&#52636; . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,[&#39;수박&#39;,&#39;바나나&#39;]] fruits[3] . [&#39;수박&#39;, &#39;바나나&#39;] . a = [1,2,3,4,5] a[2]+a[4] . 8 . fruits = [[&#39;사과&#39;,&#39;오렌지&#39;],&#39;포도&#39;,[&#39;수박&#39;,&#39;바나나&#39;]] fruits[-2] . &#39;포도&#39; . a = [1,2,3,4,5] a[-2]+a[-3] . 7 . &#51064;&#45937;&#49828; &#50504;&#51032; &#51064;&#45937;&#49828; &#52628;&#52636; . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,[&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;]] fruits[2][0] . &#39;포도&#39; . a = [1,2,[&#39;a&#39;,&#39;b&#39;,[&#39;life&#39;,&#39;is&#39;]]] print(a[2][2]) a[2][2][0] . [&#39;life&#39;, &#39;is&#39;] . &#39;life&#39; . &#49836;&#46972;&#51060;&#49905;: &#47532;&#49828;&#53944; &#50836;&#49548; &#52628;&#52636; . 슬라이싱 기법으로 한 번에 여러 개의 요소들을 추출할 수 있다 리스트명[시작인덱스 :끝인덱스(이전값까지만 계산) : 간격] . nums = [0,1,2,3,4,5,6,7,8,9] print(nums[3:8]) print(nums[-7:-2]) . [3, 4, 5, 6, 7] [3, 4, 5, 6, 7] . nums = list(range(1,11)) print(nums) print(&#39;-&#39; *50) #시작 인덱스 생략 print(nums[:3]) print(nums[0:3]) print(&#39;-&#39; *50) #끝 인덱스 생략 print(nums[3:]) print(nums[3:10]) print(nums[3:len(nums)]) print(&#39;-&#39; *50) . [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] -- [1, 2, 3] [1, 2, 3] -- [4, 5, 6, 7, 8, 9, 10] [4, 5, 6, 7, 8, 9, 10] [4, 5, 6, 7, 8, 9, 10] -- . &#44036;&#44201; &#49836;&#46972;&#51060;&#49905; _ &#51677;&#49688;&#47564;, &#54848;&#49688;&#47564; ... . nums = [1,2,3,4,5,6,7,8,9,10] nums[3:8:2] . [4, 6, 8] . #리스트명 [끝인덱스 : 시작인덱스 : 간격(음수)] nums = list(range(1,11)) print(nums[8:3:-2]) print(nums[-2:-7:-2]) . [9, 7, 5] [9, 7, 5] . nums = list(range(1,11)) print(nums[-3:-8:-2]) print(nums[7:2:-2]) . [8, 6, 4] [8, 6, 4] . a = [1,2,3,[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,],4,5] print(a[2:5]) print(a[-5:-3]) . [3, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], 4] [2, 3] . &#47532;&#49828;&#53944; &#50672;&#49328;&#54616;&#44592; . a = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] b = [&#39;d&#39;,&#39;e&#39;,&#39;f&#39;] a + b . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;] . a = [&#39;A&#39;,&#39;a&#39;] b = a*3 b . [&#39;A&#39;, &#39;a&#39;, &#39;A&#39;, &#39;a&#39;, &#39;A&#39;, &#39;a&#39;] . len(&#47532;&#49828;&#53944;&#47749;)_&#47532;&#49828;&#53944;&#51032; &#54637;&#47785;&#49688; &#44396;&#54616;&#44592; . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] len(fruits) . 5 . &#47532;&#49828;&#53944; &#50836;&#49548;&#44050; &#48320;&#44221;&#54616;&#44592; . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] fruits[1] =&#39;망고&#39; print(fruits) . [&#39;사과&#39;, &#39;망고&#39;, &#39;포도&#39;, &#39;수박&#39;, &#39;바나나&#39;] . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] k = 1 fruits[k+2] =&#39;망고&#39; print(fruits) . [&#39;사과&#39;, &#39;오렌지&#39;, &#39;포도&#39;, &#39;망고&#39;, &#39;바나나&#39;] . # 슬라이싱[추가 시작할 인덱스, 보여질 인덱스] 해서 넣어야된다~ fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] fruits[1:4] = [&#39;망고&#39;,&#39;복숭아&#39;] print(fruits) . [&#39;사과&#39;, &#39;망고&#39;, &#39;복숭아&#39;, &#39;바나나&#39;] . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] fruits[1] = [&#39;망고&#39;,&#39;복숭아&#39;] print(fruits) . [&#39;사과&#39;, [&#39;망고&#39;, &#39;복숭아&#39;], &#39;포도&#39;, &#39;수박&#39;, &#39;바나나&#39;] . &#47532;&#49828;&#53944; &#50836;&#49548; &#49325;&#51228;&#54616;&#45716; 3&#44032;&#51648; &#48169;&#48277; . 인덱스를 알고 있을 때 사용 . del 리스트명[index] : 바로 제거 | 리스트명.pop() 인덱스를 알고 있을 때 사용 : 값 반환 후 제거 (변수 = 제거할인덱스 지정해보면 제거된 값을 알려준다) | . 값을 알고 있을 때 사용 . 리스트명.remove(요소) | . 예제) &#39;바나나&#39;를 없애는 3가지 방법 . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] del fruits[4] print(fruits) . [&#39;사과&#39;, &#39;오렌지&#39;, &#39;포도&#39;, &#39;수박&#39;] . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,[&#39;수박&#39;,&#39;바나나&#39;]] pop_fruit = fruits.pop(2) print(fruits, f&#39;pop_fruit는 {pop_fruit} 입니다&#39;) . [&#39;사과&#39;, &#39;오렌지&#39;, [&#39;수박&#39;, &#39;바나나&#39;]] pop_fruit는 포도 입니다 . #리스트명.clear() fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,[&#39;수박&#39;,&#39;바나나&#39;]] fruits.clear() print(fruits) . [] . # 요소가 여러개여도 가장 첫번째 항목만 삭제한다 fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;,&#39;파인애플&#39;,&#39;바나나&#39;] fruits.remove(&#39;바나나&#39;) print(fruits) . [&#39;사과&#39;, &#39;오렌지&#39;, &#39;포도&#39;, &#39;수박&#39;, &#39;파인애플&#39;, &#39;바나나&#39;] . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;,&#39;망고&#39;] if &#39;망고&#39; in fruits: fruits.remove(&#39;망고&#39;) print(fruits) . [&#39;사과&#39;, &#39;오렌지&#39;, &#39;포도&#39;, &#39;수박&#39;, &#39;바나나&#39;] . &#47532;&#49828;&#53944;&#50640; &#50836;&#49548; &#52628;&#44032; . .append() _ 리스트에 맨 마지막에 하나의 요소를 추가한다 | .extend() _ 리스트에 맨 마지막에 여러개의 요소를 추가한다 | .insert(인덱스, 요소) _ 지정된 인덱스에 요소를 추가한다 | . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] fruits.append(&#39;복숭아&#39;) fruits.append([&#39;복숭아&#39;,&#39;망고&#39;]) #fruits.append(&#39;복숭아&#39;,&#39;망고&#39;) print(fruits) . [&#39;사과&#39;, &#39;오렌지&#39;, &#39;포도&#39;, &#39;수박&#39;, &#39;바나나&#39;, &#39;복숭아&#39;, [&#39;복숭아&#39;, &#39;망고&#39;]] . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] fruits.extend([&#39;복숭아&#39;,&#39;망고&#39;]) print(fruits) print(&#39;-&#39;*100) # 리스트에 리스트 추가 ( 이중괄호로 묶기 ) fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] fruits.extend([[&#39;복숭아&#39;,&#39;망고&#39;],[&#39;키위&#39;, &#39;파인애플&#39;]]) # fruits.extend([&#39;복숭아&#39;,&#39;망고&#39;],[&#39;키위&#39;, &#39;파인애플&#39;]) print(fruits) . [&#39;사과&#39;, &#39;오렌지&#39;, &#39;포도&#39;, &#39;수박&#39;, &#39;바나나&#39;, &#39;복숭아&#39;, &#39;망고&#39;] - [&#39;사과&#39;, &#39;오렌지&#39;, &#39;포도&#39;, &#39;수박&#39;, &#39;바나나&#39;, [&#39;복숭아&#39;, &#39;망고&#39;], [&#39;키위&#39;, &#39;파인애플&#39;]] . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] fruits.insert(0,&#39;복숭아&#39;) print(fruits) . [&#39;복숭아&#39;, &#39;사과&#39;, &#39;오렌지&#39;, &#39;포도&#39;, &#39;수박&#39;, &#39;바나나&#39;] . &#50836;&#49548;&#51032; &#50948;&#52824; &#52286;&#44592; . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] fruits.index(&#39;포도&#39;) . 2 . # 요소가 없다는 메세지를 출력하려면 다음과 같이 코드를 짠다. fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] if &#39;자두&#39; in fruits: print(fruits.index(&#39;자두&#39;)) else: print(&#39;해당 과일은 준비되지 않았습니다.&#39;) . 해당 과일은 준비되지 않았습니다. . &#47716;&#48260; &#50672;&#49328;&#51088; in, not in . 여러 데이터 중 원하는 데이터가 존재하는지 여부를 검사하는 연산자 . print(&#39;p&#39; in &#39;python&#39;) print(0 in (1,2,3,4)) . True False . &#39;f&#39; not in &#39;python&#39; . True . &#50696;&#51228;) &#46020;&#49436; &#50676;&#46988;&#54616;&#44592; . books = [&#39;해리포터&#39;,&#39;나니아연대기&#39;,&#39;빠삐용&#39;,&#39;사피엔스&#39;] book_name = input(&#39;도서 제목: &#39;) if book_name in books: print(f&#39;{book_name}는 {books.index(book_name)}번째 인덱스에서 찾을 수 있습니다.&#39;) else: print(f&#39;{book_name} 도서는 준비되지 않았습니다.&#39;) . 도서 제목: 해리포터 해리포터는 0번째 인덱스에서 찾을 수 있습니다. . &#53945;&#51221; &#50836;&#49548;&#51032; &#44060;&#49688; &#52628;&#52636; . .count(요소) _ 리스트에서 지정한 요소의 개수를 반환한다. . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;,&#39;수박&#39;] fruits.count(&#39;수박&#39;) . 2 . &#47532;&#49828;&#53944; &#51221;&#47148; . 리스트 원본 정렬하기 . 리스트명.sort() _ 오름차순 | 리스트명.sort(reverse=True) _ 내림차순 | . 리스트 원본은 유지한 채로 사본 정렬하기 . sorted(리스트명)_ 오름차순 | sorted(리스트명, reverse=True) _ 내림차순 | . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] fruits.sort(reverse=True) print(fruits) . [&#39;포도&#39;, &#39;오렌지&#39;, &#39;수박&#39;, &#39;사과&#39;, &#39;바나나&#39;] . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] sorted_fruits = sorted(fruits) print(f&#39;원본: {fruits}&#39;) print(f&#39;오름차순: {sorted_fruits}&#39;) . 원본: [&#39;사과&#39;, &#39;오렌지&#39;, &#39;포도&#39;, &#39;수박&#39;, &#39;바나나&#39;] 오름차순: [&#39;바나나&#39;, &#39;사과&#39;, &#39;수박&#39;, &#39;오렌지&#39;, &#39;포도&#39;] . .reverse( ) _ &#47532;&#49828;&#53944; &#50669;&#49692;&#51004;&#47196; &#46244;&#51665;&#44592; . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] fruits.reverse() print(fruits) . [&#39;바나나&#39;, &#39;수박&#39;, &#39;포도&#39;, &#39;오렌지&#39;, &#39;사과&#39;] . &#47532;&#49828;&#53944;&#50640;&#49436; &#47004;&#45924; &#54637;&#47785; &#52636;&#47141;&#54616;&#44592; . 랜덤을 사용하기 위해서는 반드시 import random 해줘야한다 . import random wise_saying = [] wise_saying.append(&#39;미래는 현재 우리가 무엇을 하고 있는가에 달려있다. - 마히트마 간디&#39;) wise_saying.append(&#39;교육은 세상을 바꿀 수 있는 가장 강력힌 무기다 - 넬슨 만델리&#39;) wise_saying.append(&#39;성공하기 위한 가장 확실한 방법은 한번 더 시도해 보는 것이다 - 토마스에디슨&#39;) wise_saying.append(&#39;가장 불만에 가득찬 고객은 가장 위대한 배움의 원천이다 _ 빌 게이츠&#39;) wise_saying.append(&#39;영원히 살 것처럼 꿈꾸고 오믈 죽을 것처럼 살아라 - 제임스딘&#39;) wise_saying.append(&#39;경쟁우위가 없다면 경쟁하지 마라 - 잭윌치&#39;) wise_saying.append(&#39;삶에 실수는 없고, 배움만이 있을 뿐이다. - 지아드 압델 누어&#39;) wise_saying.append(&#39;어제와 똑같은 삶을 살면서 다른 미래를 기대하는 것은 정신병의 초기증세이다 -아인슈타인&#39;) wise_saying.append(&#39;문제점을 찾지 말고 해결책을 찾으라 - 헨리포드&#39;) wise_saying.append(&#39;실수를 해보지 않은 사람은 한번도 새로운 일을 시도해보지 않았던 사람이다 -아인슈타인&#39;) print(random.choice(wise_saying)) print(random.sample(wise_saying,2)) . 미래는 현재 우리가 무엇을 하고 있는가에 달려있다. - 마히트마 간디 [&#39;미래는 현재 우리가 무엇을 하고 있는가에 달려있다. - 마히트마 간디&#39;, &#39;문제점을 찾지 말고 해결책을 찾으라 - 헨리포드&#39;] . &#47532;&#49828;&#53944; &#54637;&#47785; &#44228;&#49328;&#54616;&#44592; . 합계: sum(리스트명) | . 최대값: max(리스트명) | . 최소값: min(리스트명) | . a = [1,2,3,4,5] b = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;] c = [&#39;월&#39;,&#39;화&#39;,&#39;수&#39;,&#39;목&#39;,&#39;금&#39;,&#39;토&#39;] print(sum(a),max(b),min(c)) . 15 e 금 . Random &#47784;&#46280; . 숫자 사용하는 경우 random.randint(시작값,끝값) : 시작값, 끝값 사이의 랜덤한 정수 반환(*끝값 포함) random.randrange(시작값,끝값) : 시작값, 끝값 사이의 랜덤한 정수 반환(끝값 불포함/range 랑 동일한 방식으로 사용) random.randrange(끝값) : 인자가 1개인 경우 0~끝값 사이의 랜덤한 정수 반환(끝값 불포함) . | 로또번호 random.sample(range(처음값, 끝값), 갯수) : 임의의 값(난수)을 필요한 개수만큼 리스트(list)로 반환 / 중복 안시킴 . | 체온 체크 게이트 random.uniform(최소, 최대) : 입력 파라미터인 최소부터 최대까지 중 임의의 부동소수점(float) 숫자를 리턴한다 . | 점심메뉴 고르기 random.choice(리스트명) : 리스트의 항목들 중 랜덤으로 하나 출력 . | 노래 랜덤재생 random.shuffle(리스트명) : 순서형 자료를 뒤죽박죽으로 섞음 . | . &#50696;&#51228;1 &#49707;&#51088;&#46308;&#51032; &#54633;&#44228;&#50752; &#54217;&#44512; &#44396;&#54616;&#44592; . numbers = [] for i in range(5): x = float(input(&#39;숫자를 입력하세요: &#39;)) numbers.append(x) if len(numbers) != 0: average = sum(numbers) / len(numbers) else: average = 0 print(f&#39;합계는 {sum(numbers)}이고, 평균은 {average}입니다.&#39;) . 숫자를 입력하세요: 0 숫자를 입력하세요: 0 숫자를 입력하세요: 0 숫자를 입력하세요: 0 숫자를 입력하세요: 1 합계는 1.0이고, 평균은 0.2입니다. . num = [] for i in range(5): x = int(input(&quot;숫자를 입력하시오 : &quot;)) num.append(x) print(num) print(&quot;숫자들의 합계 : &quot;, sum(num), &quot;숫자들의 평균&quot;, sum(num)/5) . 숫자를 입력하시오 : 1 [1] 숫자를 입력하시오 : 2 [1, 2] 숫자를 입력하시오 : 3 [1, 2, 3] 숫자를 입력하시오 : 4 [1, 2, 3, 4] 숫자를 입력하시오 : 5 [1, 2, 3, 4, 5] 숫자들의 합계 : 15 숫자들의 평균 3.0 .",
            "url": "https://fastpages.fast.ai/2021/06/06/_%EB%B0%98%EB%B3%B5%EB%AC%B8,-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%99%80-%EB%9E%9C%EB%8D%A4.html",
            "relUrl": "/2021/06/06/_%EB%B0%98%EB%B3%B5%EB%AC%B8,-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%99%80-%EB%9E%9C%EB%8D%A4.html",
            "date": " • Jun 6, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": ". 팀과제] 우리 팀의 평균 나이는? . 네이버 오픈 API - https://developers.naver.com/docs/common/openapiguide/ . 이미지캡쳐 예시 코드 - https://developers.naver.com/docs/utils/captcha/examples/#python . from google.colab import drive drive.mount(&#39;/content/drive&#39;) . Mounted at /content/drive . import os import sys import requests # 등록된 client_id, client_secret 정보를 입력합니다. client_id = &quot;yBwPM0bgoQTE7MzqhxmM&quot; client_secret = &quot;2HiUBFvSq_&quot; # 얼굴 사진을 통한 나이 추정을 위해서는 아래 url을 사용합니다. (face: 얼굴 분석, celebrity: 닮은 유명인 찾기) url = &quot;https://openapi.naver.com/v1/vision/face&quot; #url = &quot;https://openapi.naver.com/v1/vision/celebrity&quot; # 분석할 이미지의 파일명을 입력합니다./ files = {&#39;image&#39;: open(&#39;/content/drive/MyDrive/개인 서류/프로필.JPG&#39;, &#39;rb&#39;)} # API 입력 설정 headers = {&#39;X-Naver-Client-Id&#39;: client_id, &#39;X-Naver-Client-Secret&#39;: client_secret } # API 사용 response = requests.post(url, files=files, headers=headers) rescode = response.status_code if (rescode==200): # 결과물 출력 print (response.text) else: print(&quot;Error Code:&quot; + str(rescode)) . {&#34;info&#34;:{&#34;size&#34;:{&#34;width&#34;:1500,&#34;height&#34;:1997},&#34;faceCount&#34;:1},&#34;faces&#34;:[{&#34;roi&#34;:{&#34;x&#34;:502,&#34;y&#34;:698,&#34;width&#34;:352,&#34;height&#34;:352},&#34;landmark&#34;:{&#34;leftEye&#34;:{&#34;x&#34;:573,&#34;y&#34;:811},&#34;rightEye&#34;:{&#34;x&#34;:736,&#34;y&#34;:767},&#34;nose&#34;:{&#34;x&#34;:670,&#34;y&#34;:870},&#34;leftMouth&#34;:{&#34;x&#34;:614,&#34;y&#34;:953},&#34;rightMouth&#34;:{&#34;x&#34;:786,&#34;y&#34;:904}},&#34;gender&#34;:{&#34;value&#34;:&#34;female&#34;,&#34;confidence&#34;:0.999995},&#34;age&#34;:{&#34;value&#34;:&#34;16~20&#34;,&#34;confidence&#34;:0.534938},&#34;emotion&#34;:{&#34;value&#34;:&#34;laugh&#34;,&#34;confidence&#34;:0.885847},&#34;pose&#34;:{&#34;value&#34;:&#34;frontal_face&#34;,&#34;confidence&#34;:0.984797}}]} . import json # loads 함수를 사용하여 json으로 변환합니다. result = json.loads(response.text) result . {&#39;faces&#39;: [{&#39;age&#39;: {&#39;confidence&#39;: 0.534938, &#39;value&#39;: &#39;16~20&#39;}, &#39;emotion&#39;: {&#39;confidence&#39;: 0.885847, &#39;value&#39;: &#39;laugh&#39;}, &#39;gender&#39;: {&#39;confidence&#39;: 0.999995, &#39;value&#39;: &#39;female&#39;}, &#39;landmark&#39;: {&#39;leftEye&#39;: {&#39;x&#39;: 573, &#39;y&#39;: 811}, &#39;leftMouth&#39;: {&#39;x&#39;: 614, &#39;y&#39;: 953}, &#39;nose&#39;: {&#39;x&#39;: 670, &#39;y&#39;: 870}, &#39;rightEye&#39;: {&#39;x&#39;: 736, &#39;y&#39;: 767}, &#39;rightMouth&#39;: {&#39;x&#39;: 786, &#39;y&#39;: 904}}, &#39;pose&#39;: {&#39;confidence&#39;: 0.984797, &#39;value&#39;: &#39;frontal_face&#39;}, &#39;roi&#39;: {&#39;height&#39;: 352, &#39;width&#39;: 352, &#39;x&#39;: 502, &#39;y&#39;: 698}}], &#39;info&#39;: {&#39;faceCount&#39;: 1, &#39;size&#39;: {&#39;height&#39;: 1997, &#39;width&#39;: 1500}}} . face_list = result.get(&#39;faces&#39;) face = face_list[0] age_info = face.get(&#39;age&#39;) age = age_info.get(&#39;value&#39;) print(f&#39;얼굴 인식 나이는 {age}세 입니다.&#39;) . 얼굴 인식 나이는 16~20세 입니다. . age = result.get[&#39;face&#39;][0][&#39;age&#39;][&#39;value&#39;] print(f&#39;얼굴 인식 나이는 {age}세 입니다.&#39;) . while True: add_pic = input(&#39;이미지 파일링크를 첨부하세요: &#39;) if add_pic == &#39;&#39;: break files[&#39;images&#39;] = add_pic . 이미지 파일링크를 첨부하세요: /content/drive/MyDrive/개인 서류/프로필.JPG 이미지 파일링크를 첨부하세요: . team_results = [ {&#39;age&#39;: {&#39;confidence&#39;: 0.534938, &#39;value&#39;: &#39;16~20&#39;}}, {&#39;age&#39;: {&#39;confidence&#39;: 0.950639, &#39;value&#39;: &#39;18~22&#39;}}, {&#39;age&#39;: {&#39;confidence&#39;: 0.319881, &#39;value&#39;: &#39;21~25&#39;}}, {&#39;age&#39;: {&#39;confidence&#39;: 0.0696897, &#39;value&#39;: &#39;25~29&#39;}}, {&#39;age&#39;: {&#39;confidence&#39;: 0.449355, &#39;value&#39;: &#39;28~32&#39;}} ] ages = [0,0,0,0,0] avg = [0,0,0,0,0] for i in range(len(team_results)): ages[i] = team_results[i][&#39;age&#39;][&#39;value&#39;] avg[i] = sum(list(map(int,ages[i].split(&#39;~&#39;))))/2 team_avg = sum(avg)/len(avg) print(f&#39;평균나이 : {team_avg}&#39;) . 평균나이 : 23.6 . team_results = [{&#39;age&#39;: {&#39;confidence&#39;: 0.534938, &#39;value&#39;: &#39;16~20&#39;}}, {&#39;age&#39;: {&#39;confidence&#39;: 0.950639, &#39;value&#39;: &#39;18~22&#39;}}, {&#39;age&#39;: {&#39;confidence&#39;: 0.319881, &#39;value&#39;: &#39;21~25&#39;}}, {&#39;age&#39;: {&#39;confidence&#39;: 0.0696897, &#39;value&#39;: &#39;25~29&#39;}}, {&#39;age&#39;: {&#39;confidence&#39;: 0.449355, &#39;value&#39;: &#39;28~32&#39;}}] # 각 age 다 dict로 만들기 ages = 0 #dict에서 추출해올 나이값 avg = [] #각자 나이의 평균 for i in team_results: #i = {&#39;age&#39;: {&#39;confidence&#39;: 0.534938, &#39;value&#39;: &#39;16~20&#39;}} ages = i[&#39;age&#39;][&#39;value&#39;] # 각 팀원의 추정 나이 가져오기 avg.append((int(ages.split(&#39;~&#39;)[0])+int(ages.split(&#39;~&#39;)[1]))/2) team_avg = sum(avg) /len(avg) print(f&#39;평균나이 : {team_avg}&#39;) . 평균나이 : 23.6 .",
            "url": "https://fastpages.fast.ai/2021/06/03/%EC%96%BC%EA%B5%B4%EC%9D%B8%EC%8B%9DAPI.html",
            "relUrl": "/2021/06/03/%EC%96%BC%EA%B5%B4%EC%9D%B8%EC%8B%9DAPI.html",
            "date": " • Jun 3, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "함수",
            "content": ". dir(__builtins__) . import &#47784;&#46280; &#44032;&#51256; &#50724;&#44592; . 파이썬에서는 다양한 분야의 처리를 위한 기능을 제공합니다. . 모듈 import 방법 . import 모듈명 # 모듈 불러오기 import 모듈명 as 별칭 # 별칭으로 모듈 불러오기 from 패키지명 import 모듈명 # 원하는 모듈만 특정해서 불러오기 from 모듈명 import 함수명 # 원하는 함수만 특정해서 불러오기 . &#52888;&#47536;&#45908; &#44592;&#45733; . month(): 함수에 인수로 년,월을 입력하여 호출하면 캘린더 데이터(문자열)반환 isleap(): 함수에 인수로 년도를 입력하면 bol을 반환 . import random list_data = [1,2,3,4,5] random.choice(list_data) . from random import choice list_data = [1,2,3,4,5] choice(list_data) . import calendar # calendar 모듈 import print(calendar.month(2021,5)) # 달력 년월을 지정 출력 . from calendar import month # calendar 모듈 import print(month(2021,5)) # 달력 년월을 지정 출력 . 경과한 날짜 수 확인 : 임의의 날짜에서 다른 임의의 날짜까지의 경과일 계산 | . import datetime date1 = datetime.date.today() date2 = datetime.date(1995,3,6) print(date1-date2) . &#47004;&#45924; &#44592;&#45733; . import random a = random.random() # Random float x, 0.0 &lt;= x &lt; 1.0 #2개의 숫자 사이의 랜덤 실수를 리턴합니다. b = random.uniform(1, 10) # Random float x, 1.0 &lt;= x &lt; 10.0 #2개의 숫자 사이의 랜덤 정수를 리턴합니다. (2번째 인자로 넘어온 정수도 범위에 포함시킴) c =random.randint(1, 10) # Integer from 1 to 10, endpoints included #range(start, stop, step) 함수로 만들어지는 정수 중에 하나를 랜덤하게 리턴합니다. d=random.randrange(0, 101, 2) # Even integer from 0 to 100 #choice() 함수 랜덤하게 하나의 원소를 선택합니다. e = random.choice(&#39;abcdefghij&#39;) # Choose a random element f = random.choice([&#39;가위&#39;,&#39;바위&#39;,&#39;보&#39;]) print(a,b,c,d,e,f,g) #shuffle() 무작위 섞기 (노래 랜덤 재생) # g = random.shuffle([&#39;아이유&#39;, &#39;적재&#39;, &#39;볼빨간 사춘기&#39;]) #오류 musician = [&#39;아이유&#39;, &#39;적재&#39;, &#39;볼빨간 사춘기&#39;,&#39;이적&#39;] random.shuffle(musician) print(musician) . &#54632;&#49688;&#51221;&#51032; . &#54028;&#51060;&#50028;&#50640;&#49436; &#54632;&#49688; &#44396;&#54788; . 함수 정의 키워드 def() def 함수명(매개변수); 함수가 수행할 일 return 함수가 반환할 객체 . | . def say_hello(): print(&#39;안녕하세요!!&#39;) print(&#39;파이썬의 세계에 오신 것을 환영합니다.&#39;) print(&#39;즐거운 시간 되세요!!&#39;) say_hello() for i in range(3): say_hello() . def say_hello(name): print(f&#39;안녕하세요, {name}님!!&#39;) print(&#39;파이썬의 세계에 오신 것을 환영합니다.&#39;) print(&#39;즐거운 시간 되세요!!&#39;) say_hello(&#39;윤희&#39;) . def circle_area(radius): area = 3.14 * radius ** 2 return area # 3개의 반지름 값을 입력받아 원 넓이의 합계를 구해보자 a =[] for i in range(3): radius = int(input(&#39;반지름: &#39;)) a.append(circle_area(radius)) print(sum(a)) . def get_plus(num1,num2): result = num1 + num2 return result get_plus(1,2) . def get_plus_minus_multiply_divide(num1,num2): plus = num1 + num2 minus = num1 - num2 multiply = num1 * num2 if num2 == 0: #두번째 수가 0인 경우 체크하자 divide = &#39;0으로는 나눌 수 없습니다. 다른 수를 입력하세요.&#39; else: divide = num1 / num2 return plus,minus,multiply,divide #divide는 가능할 때만 리턴한다 get_plus_minus_multiply_divide(1,0) . &#51648;&#50669;&#48320;&#49688;, &#51204;&#50669;&#48320;&#49688; . # 함수내 변수를 밖에서 사용 못함 def get_plus_minus(num1,num2): plus = num1 + num2 minus = num1 - num2 return plus,minus # get_plus_minus(1,2) print(plus,minus) #함수내 변수를 밖에서 쓰려고 해서 오류남 . def circle_area(): area = 3.14 * radius ** 2 return area radius = float(input(&#39;반지름:&#39;)) circle_area() . &#54632;&#49688;&#45236; &#51204;&#50669;&#48320;&#49688; &#48320;&#44221; . def circle_area(): area = 3.14 * radius ** 2 return area area = 0 radius = float(input(&#39;반지름:&#39;)) print(&#39;원의 넓이:&#39;,circle_area()) print(area) #변경안됨 . def circle_area(): global area #global을 붙혀주면 전역변수로 탈바꿈 area = 3.14 * radius ** 2 return area area = 0 radius = float(input(&#39;반지름:&#39;)) print(&#39;원의 넓이:&#39;,circle_area()) print(area) #변경 . &#46356;&#54260;&#53944; &#51064;&#49688; . def greet(name,msg): print(f&#39;안녕 {name},오늘 날씨는 {msg}이래요!&#39;) greet(&#39;윤희&#39;,&#39;맑음&#39;) . def greet(name,msg): print(f&#39;안녕 {name},{msg}&#39;) greet(&#39;철수&#39;) . def greet(name=&#39;친구&#39;,msg=&#39;-&#39;): print(f&#39;안녕 {name},오늘 날씨는 {msg}이래요!&#39;) greet(&#39;윤희&#39;,&#39;맑음&#39;) # 인수 부족 시 기본값 사용 greet() . def greet(name=&#39;친구&#39;,msg=&#39;-&#39;): print(f&#39;안녕 {name},오늘 날씨는 {msg}이래요!&#39;) greet(&#39;맑음&#39;) . &#53412;&#50892;&#46300; &#51064;&#49688; . def greet(name,msg,greeting): print(f&#39;안녕 {name},오늘 날씨는 {msg}이래요!,{greeting}&#39;) greet(&#39;윤희&#39;,msg=&#39;맑음&#39;,greeting=&#39;잘다녀오세요!&#39;) . def greet(name,msg,greeting): print(f&#39;안녕 {name},오늘 날씨는 {msg}이래요!,{greeting}&#39;) greet(name=&#39;윤희&#39;,&#39;맑음&#39;,&#39;잘다녀오세요!&#39;) . def greet(name,msg,greeting): print(f&#39;안녕 {name},오늘 날씨는 {msg}이래요!,{greeting}&#39;) greet(msg=&#39;맑음&#39;,greeting=&#39;잘다녀오세요!&#39;, name=&#39;윤희&#39;) . def greet(name,msg,greeting): print(f&#39;안녕 {name},오늘 날씨는 {msg}이래요!,{greeting}&#39;) greet(name=&#39;윤희&#39;,msg=&#39;맑음&#39;,greeting=&#39;잘다녀오세요!&#39;) . &#44032;&#48320; &#47588;&#44060;&#48320;&#49688; *args . arg는 관용적으로 쓰이는 표현일 뿐 굳이 args가 아니어도 된다 | args는 튜플 데이터형으로 받는다 | . def average(*args): avrg1 = sum(args) /len(args) return avrg1 print(average(1,2,3)) print(average(1,2,3,4,5)) . def average(*a): avrg1 = sum(a) /len(a) return avrg1 print(average(1,2,3)) print(average(1,2,3,4,5)) . def algo_1(*args): algo_1 = sum(args) * 2 /len(args) return algo_1 print(algo_1(1,2,3)) print(algo_1(1,2,3,4,5)) . &#50696;&#51228;&gt; &#49548;&#49688; &#50668;&#48512; &#54032;&#45800;&#54616;&#44592; . def prime(number): if number &lt; 2: return False for i in range (2,number): if number % i == 0: return False return True input_num = int(input(&#39;숫자를 입력하세요: &#39;)) if prime(input_num): print(&#39;소수입니다&#39;) else: print(&#39;소수가 아닙니다&#39;) . def prime(number): if number % i == 0: return True elif number % i == 1: return False else: return &#39;0은 0입니다&#39; input_num = int(input(&#39;숫자를 입력하세요: &#39;)) if prime(input_num): print(&#39;소수입니다&#39;) else: print(&#39;소수가 아닙니다&#39;) . def user_name(name): if name == &#39;admin&#39;: return True else: return False input_name = input(&#39;이름를 입력하세요: &#39;) if user_name(input_name): print(&#39;관리자페이지 입니다&#39;) else: print(&#39;접근권한이 없습니다&#39;) . def is_even(num): if num % 2 == 0: return 0 elif num == 0: return 1 else: return 2 input_num = int(input(&#39;숫자를 입력하세요: &#39;)) if is_even(input_num) == 0: print(&#39;짝수&#39;) elif is_even(input_num) == 1: print(&#39;0&#39;) elif is_even(input_num) == 2: print(&#39;홀수&#39;) . &#50696;&#51228;&gt; &#50724;&#45720;&#51032; &#47700;&#45684; . 몇 개의 메뉴가 선택될 지 모른다 . def today_menu(*args): for i in args: print(i) print(&quot;==오늘의 메뉴==&quot;) today_menu(&#39;김밥&#39;,&#39;떡볶이&#39;,&#39;오뎅&#39;) print(&quot;==내일의 메뉴==&quot;) #매개변수의 개수가 자유로워진다 today_menu(&#39;짬뽕&#39;,&#39;짜장면&#39;,&#39;마라탕&#39;,&#39;탕수육&#39;) . def today_menu(*args): for i in range(len(args)): print(args[i]) print(&quot;==오늘의 메뉴==&quot;) today_menu(&#39;김밥&#39;,&#39;떡볶이&#39;,&#39;오뎅&#39;) . lambda() &gt; &#54632;&#49688;&#47749; &#50630;&#51060; &#54632;&#49688;&#47564;&#46308;&#44592; . 한줄로 간단하게 만드는 함수 . def plus(num1,num2): result = num1 + num2 return result print(plus(10,20)) . plus = lambda num1,num2: num1+num2 print(plus(10,20)) . map() &gt; &#51088;&#47308;&#54805;&#50640; &#52264;&#47168;&#47196; &#54632;&#49688; &#49324;&#50857; . 두개의 인자를 가짐 | 순서가있는 자료형에 사용 | . mylist = [1,2,3,4,5] plus10 = lambda num: num+10 mylist = list(map(plus10,mylist)) print(mylist) . #변수를 하나만 써서 해보기 mylist = [1,2,3,4,5] #mylist = list(map(lambda num: num+10,mylist)) #list로 출력 mylist = set(map(lambda num: num+10,mylist)) #set으로 출력해볼까? print(mylist) . &#51116;&#44480;&#54632;&#49688;&gt;&#54632;&#49688;&#50504;&#50640;&#49436; &#51088;&#44592;&#51088;&#49888; &#54840;&#52636; . def hello(count): if count == 0: #종료조건을 만듦. count가 0이면 다시 hello 함수를 호출하지 않고 끝냄 return print(&#39;Hello, world&#39;, count) count -=1 # count를 1 감소시킨 뒤 hello(count) #다시 hello에 넣음 hello(5) #hello 함수 호출 . &#50696;&#51228;&gt; &#54057;&#53664;&#47532;&#50620; . def factorial(i): if i == 1: # 1이 되면 1값까지만 넘겨주고 함수를 끝내자 return 1 return i * factorial(i-1) print(factorial(5)) . &#50696;&#51228; &gt; &#54200;&#51032;&#51216; &#51116;&#44256;&#44288;&#47532; &#49884;&#49828;&#53596; . 3개의 기능이 있다. | 초기 재고는 삼각김밥 10개, 커피우유 10개다. | 기능1: 재고등록 | 기능2: 물건판매 | 기능3: 재고조회 | . stock = { &#39;삼각김밥&#39; : 10, &#39;커피우유&#39; : 10 } #재고등록 함수 def register(): while True: goods = input(&#39;상품명을 입력하세요: &#39;) if goods == &#39;&#39;: current_stock() break qty = int(input(&#39;해당 상품은 몇개입니까?: &#39;)) if goods in stock: stock[goods] += qty else: stock[goods] = qty #제품판매 함수 def sell(): while True: goods = input(&#39;무슨 상품이 팔립니까?: &#39;) if goods == &#39;&#39;: current_stock() break qty = int(input(&#39;몇개가 팔립니까?: &#39;)) if stock[goods] &gt;= qty: stock[goods] -= qty else: print(&#39;재고가 부족합니다&#39;) break def check(): while True: goods = input(&#39;상품명을 입력하세요: &#39;) if goods == &#39;&#39;: current_stock() break print(stock.get(goods,&#39;등록되지 않은 상품입니다.&#39;)) def current_stock(): print(&#39;-&#39;*50) for key,value in stock.items(): print(key,&#39;:&#39;,value) while True: print(&#39;&#39;&#39; ===== 재고관리 시스템 ===== 1: 재고등록, 2: 제품판매, 3: 재고확인, 0: 프로그램 종료 &#39;&#39;&#39;) order = int(input(&#39;메뉴를 선택하세요: &#39;)) if order == 0: break elif order == 1: register() elif order == 2: sell() elif order == 3: check() .",
            "url": "https://fastpages.fast.ai/2021/06/02/%ED%95%A8%EC%88%98.html",
            "relUrl": "/2021/06/02/%ED%95%A8%EC%88%98.html",
            "date": " • Jun 2, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Title",
            "content": ". &#45208;&#51060; &#54217;&#44512;&#44396;&#54616;&#44592; . alist = { &#39;1팀&#39;:[25,39,29,27,27], &#39;2팀&#39;:[27,24,25,29,25], &#39;3팀&#39;:[25,26,25,23,23,28,27], &#39;4팀&#39;:[21,23,30], &#39;5팀&#39;:[30,30,20,20,10], &#39;6팀&#39;:[20,20,25,30]} age_li = [] for i,v in alist.items(): print(f&#39;{i}의 최저연령은{min(v)} 최고연령은 {max(v)}&#39;) age_li.extend(v) print(age_li) print(f&#39;DT스쿨 최저연령은{min(age_li)} 최고연령은 {max(age_li)}&#39;) . 1팀의 최저연령은25 최고연령은 39 2팀의 최저연령은24 최고연령은 29 3팀의 최저연령은23 최고연령은 28 4팀의 최저연령은21 최고연령은 30 5팀의 최저연령은10 최고연령은 30 6팀의 최저연령은20 최고연령은 30 [20, 20, 25, 30] DT스쿨 최저연령은20 최고연령은 30 . &#50864;&#47532;&#54016; &#52880;&#47533;&#53552; &#49324;&#51204; &#47564;&#46308;&#44592; . team_dic = {&#39;삼&#39;:[&#39;삼전&#39;,&#39;교대근무&#39;,&#39;연봉 많이 성과금 듬뿍&#39;], &#39;쿠&#39;:[&#39;쿠팡&#39;,&#39;적절한 외근&#39;,&#39;연봉 full&#39;], &#39;카&#39;:[&#39;카카오&#39;,&#39;인턴말고 정규직&#39;,&#39;사내규정&#39;], &#39;구&#39;:[&#39;구글&#39;,&#39;정규직이지만 자유로운&#39;,&#39;사장보다 연봉 높은 막내&#39;], &#39;네&#39;:[&#39;네이버&#39;,&#39;워라벨&#39;,&#39;많이&#39;]} name = input() import random list0 = team_dic[name] random.choice(list0) print((f&#39;우리 {name}님은 {list0[0]}를 목표로 하고 있습니다.&#39;)) print((f&#39;{list0[1]}근무 형태를 희망합니다.&#39;)) print((f&#39;{name}님은 {list0[2]} 받을 만한 분이십니다.&#39;)) . 카 우리 카님은 카카오를 목표로 하고 있습니다. 인턴말고 정규직근무 형태를 희망합니다. 카님은 사내규정 받을 만한 분이십니다. . &#47928;&#51088;&#50676; &#45208;&#45572;&#44592; .split() .join() . text = &#39;우리 이제 헤어져&#39; break_up = text.split(sep=&#39;이제&#39;) break_up . [&#39;우리 &#39;, &#39; 헤어져&#39;] . regather = &#39; &#39;.join(break_up) regather . &#39;우리 이제 헤어져&#39; .",
            "url": "https://fastpages.fast.ai/2021/06/02/%EC%8B%A4%EC%8A%B5.html",
            "relUrl": "/2021/06/02/%EC%8B%A4%EC%8A%B5.html",
            "date": " • Jun 2, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "모듈과 패키지",
            "content": ". &#47784;&#46280;&#47564;&#46308;&#44592; . from google.colab import drive drive.mount(&#39;/content/drive&#39;) . % cd /content/drive/MyDrive/1.sba파이썬교육/colab1 . import mycalc p = mycalc.get_plus(2,2) m = mycalc.get_plus(3,2) print(p,m) . import mycalc as cal p = cal.get_plus(2,2) m = cal.get_minus(3,2) print(p,m) . from mycalc import get_plus p = get_plus(2,2) m = cal.get_minus(3,2) print(p,m) . from mycalc import get_plus,get_minus p = get_plus(2,2) m = get_minus(3,2) print(p,m) . from mycalc import * p = get_plus(2,2) m = get_minus(3,2) print(p,m) . &#54056;&#53412;&#51648; . 패키지(Packages)는 도트(.)를 사용하여 파이썬 모듈을 계층적(디렉터리 구조)으로 관리할 수 있게 해줍니다. . &#53364;&#47000;&#49828; . &#53364;&#47000;&#49828;&#51032; &#49324;&#50857; . result1 = 0 result2 = 0 def add1(num): global result1 result1 += num return result1 def add2(num): global result2 result2 += num return result2 print(add1(3)) print(add1(4)) print(add2(3)) print(add2(7)) . class Calculator: def __init__(self): self.result = 0 def add(self, num): self.result += num return self.result cal1 = Calculator() cal2 = Calculator() print(cal1.add(3)) print(cal1.add(4)) print(cal2.add(3)) print(cal2.add(7)) . class Calculator: def __init__(self): self.result = 0 def add(self, num): self.result += num return self.result def sub(self, num): self.result -= num return self.result cal1 = Calculator() cal2 = Calculator() cal3 = Calculator() print(cal1.add(3)) print(cal2.add(4)) print(cal3.sub(3)) . &#51088;&#46041;&#52264; &#53364;&#47000;&#49828; &#47564;&#46308;&#44592; . class Car: brand = &#39;&#39; model = &#39;&#39; color = &#39;&#39; def turn_on(self): print(&#39;시동을 겁니다&#39;) def turn_off(self): print(&#39;시동을 끕니다&#39;) def drive(self): print(&#39;주행중입니다&#39;) . car1 = Car() car2 = Car() #car1 - 흰색 BMT 3 car1.brand = &#39;BMW&#39; car1.model = &#39;3&#39; car1.color = &#39;white&#39; #car2 - 블랙 audi A5 car2.brand = &#39;audi&#39; car2.model = &#39;A5&#39; car2.color = &#39;black&#39; . car1.turn_on() car2.turn_on() . &#44061;&#52404;&#47484; &#49373;&#49457;&#49884; &#49549;&#49457; &#52488;&#44592;&#54868; . class Car: def __init__(self,brand,model,color): self.brand = brand self.model = model self.color = color print(brand,model,color,&#39;생성&#39;) def turn_on(self): print(&#39;시동을 겁니다&#39;) def turn_off(self): print(&#39;시동을 끕니다&#39;) def drive(self): print(&#39;주행중입니다&#39;) . car1 = Car(&#39;BMT&#39;,&#39;3&#39;,&#39;white&#39;) car2 = Car(&#39;audi&#39;,&#39;A5&#39;,&#39;black&#39;) . &#47588;&#49548;&#46300;&#50640;&#49436; &#49549;&#49457; &#49324;&#50857;&#54616;&#44592; . class Car: def __init__(self,brand,model,color): self.brand = brand self.model = model self.color = color print(brand,model,color,&#39;생성&#39;) def turn_on(self): print(f&#39;{self.brand} {self.model} 시동을 겁니다&#39;) def turn_off(self): print(f&#39;{self.brand} {self.model} 시동을 끕니다&#39;) def drive(self): print(f&#39;{self.brand} {self.model} 주행중입니다&#39;) . car1 = Car(&#39;BMT&#39;,&#39;3&#39;,&#39;white&#39;) car2 = Car(&#39;audi&#39;,&#39;A5&#39;,&#39;black&#39;) # car1,car2 기능 수행 car1.turn_on() car1.drive() car1.turn_off() car2.turn_on() car2.drive() car2.turn_off() .",
            "url": "https://fastpages.fast.ai/2021/06/02/module.html",
            "relUrl": "/2021/06/02/module.html",
            "date": " • Jun 2, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "중첩반복구조",
            "content": ". &#48152;&#48373;&#47928; . for문 : 횟수 제어 | while문 : 조건에 따라 변경!!! 무한루프에 빠질 수 있다. | . for . 주어진 자료를 순회할때 주로 사용되는 반복구조 | . for i in [1,2,3,4,5,6,7]: print(i) . for i in &#39;python data&#39;: print(i) . &#48276;&#50948; &gt; range() &#54632;&#49688; . 시작값/증가값 생략 가능 | 끝값 생략 불가 | . for i in range(1,6): print(i) . for i in range(5): print(i,end= &quot; &quot;) # end=&#39;&#39; 줄이 바뀌지 않고 출력된다 . for i in range(1,6): print(i,end= &quot; &quot;) # 공백을 지정하면 공백만큼의 간격을 두고 출력한다 . for i in range(1,10,2): print(i,end= &quot; t&quot;) # t 탭 간격으로 출력된다. . for i in range(1,10,-1): print(i,end= &quot; &quot;) . for i in range(10,0,-1): print(i,end= &quot; &quot;) . for i in range(100): print(&#39;Hello World!!&#39;) . while . 조건식의 결과가 True 동안 반복 / False가 되면 반복문을 빠져나옴 | while 조건식: 명령블럭 | . i = 0 #조건식에 사용되는 변수는 while문에 들어가기 전에 초기화 되어야 한다. while i &lt;= 30: print(i,end= &#39; &#39;) i = i + 3 . for i in range(0,31,3): print(i,end=&#39; &#39;) . 무한루프일때 ctrl+ m i . i = 1 while i &lt;= 5: # i값이 계속 1이므로 무한루프 print(i) print(&#39;end&#39;) . while &#50696;&#51228; . name = &#39; &#39; while name != &#39;q&#39;: name = input(&#39;이름을 입력하세요:&#39;) print(name) . print(&#39;사람들이 가장 싫어하는 색은?&#39;) quiz = &#39; &#39; while quiz != &#39;질색&#39;: quiz = input(&#39;나는 누구일까요?: &#39;) if i in : quiz = &#39;질색&#39; print(&#39;딩동댕~ 정답!&#39;) else: print(&#39;땡~ 다시 맞춰보세요!&#39;) . &#48152;&#48373;&#47928; &#50696;&#51228; . &#50696;&#51228; 1 &gt; 5&#44060;&#51032; &#51221;&#49688;&#47484; &#51077;&#47141; &#48155;&#50500; &#54633;&#44228; &#52636;&#47141; . sum_1 = 0 while sum_1 &lt; 5: num = int(input(&#39;숫자를 입력하세요: &#39;)) num += num i += 1 print(&#39;합계출력: &#39;, num) . &#50696;&#51228; 2 &gt; n&#44060;&#51032; &#51221;&#49688;&#47484; &#51077;&#47141; &#48155;&#50500; &#54633;&#44228; &#45908;&#54616;&#44592; . n = int(input(&#39;몇 개의 숫자를 더할까요? : &#39;)) sum_1 = 0 for i in range(n): sum_1 += int(input(&#39;정수입력:&#39;)) print(&#39;합계출력:&#39;, sum_1) . n = int(input(&#39;몇 개의 숫자를 더할까요? : &#39;)) sum_1 = 0 i = 0 while i &lt; n: num = int(input(&#39;숫자를 입력하세요: &#39;)) sum_1 += num i += 1 print(&#39;합계출력:&#39;, sum_1) . &#50696;&#51228; 3 &gt; n&#44060;&#51032; &#51221;&#49688;&#47484; &#51077;&#47141; &#48155;&#50500; &#51677;&#49688;&#51032; &#54633;&#44228; &#44396;&#54616;&#44592; . sum1 = 0 n = int(input(&#39;몇개의 숫자를 더할까요? :&#39;)) for i in range(n): num = int(input(&#39;정수입력:&#39;)) if num % 2 == 0: # 짝수 조건 sum1 += num print(&#39;합계출력:&#39;,sum1) . sum1 = 0 n = int(input(&#39;몇개의 숫자를 더할까요? :&#39;)) for i in range(n): num = int(input(&#39;정수입력:&#39;)) if num % 3 == 0: # 3의 배수 조건 sum1 += num print(&#39;합계출력:&#39;,sum1) . &#50696;&#51228; 4 &gt; 0&#51060; &#51077;&#47141;&#46112; &#46412;&#44620;&#51648; &#49707;&#51088;&#47484; &#51077;&#47141; &#48155;&#50500; &#54633;&#44228; . sum1 = 0 num = int(input(&#39;숫자:&#39;)) while num != 0: sum1 += num num = int(input(&#39;숫자:&#39;)) print(&#39;합계출력:&#39;,sum1) . &#50696;&#51228; &gt; 1 ~ n &#44620;&#51648; &#45908;&#54616;&#45716; &#54532;&#47196;&#44536;&#47016; . sum_1 = 0 n = int(input(&#39;1부터 몇까지 더할까요? :&#39;)) for i in range(1,n+1): sum_1 += i print(f&#39;총 합계는 {sum_1}입니다&#39;) . sum_1 = 0 i = 1 n = int(input(&#39;1부터 몇까지 더할까요? :&#39;)) while i &lt; n+1: sum_1 += i i += 1 print(f&#39;총 합계는 {sum_1}입니다&#39;) . &#50696;&#51228; &gt; n1 ~ n2 &#44620;&#51648; &#45908;&#54616;&#45716; &#54532;&#47196;&#44536;&#47016;&#51012; &#51089;&#49457;&#54616;&#49464;&#50836; . sum_1 = 0 n1 = int(input(&#39;몇부터 더할까요? :&#39;)) n2 = int(input(&#39;몇까지 더할까요? :&#39;)) for i in range(n1, n2+1): sum_1 += i print(f&#39;{n1}부터 {n2}까지 합계는:&#39;, sum_1) . &#50696;&#51228; &gt; n&#44060; &#49707;&#51088;&#51032; &#54217;&#44512; &#44396;&#54616;&#44592; . n = int(input(&#39;입력받을 정수의 개수 :&#39;)) sum_1 = 0 for i in range(n): num = int(input(&#39;숫자를 입력하세요 :&#39;)) sum_1 += num if n == 0: print(&#39;0개의 정수를 입력하셨습니다.&#39;) else: print(&#39;평균&#39;, sum_1/n) . n = int(input(&#39;입력받을 정수의 개수: &#39;)) num_list = [] for i in range(n): num_list.append(int(input(&#39;정수: &#39;))) sum0 = sum(num_list) print(f&#39;평균: {sum0/n}&#39;) . &#50696;&#51228; &gt; &#54057;&#53664;&#47532;&#50620; &#44228;&#49328;&#54616;&#44592; . n = int(input(&#39;몇 팩토리얼? :&#39;)) factorial = 1 for i in range (n,0,-1): factorial *= i print(f&#39;{n}!={factorial}&#39;) . &#44396;&#44396;&#45800; . n = int(input(&#39;몇단?:&#39;)) for i in range(1,10): print(f&#39;{n}x{i}={n*i}&#39;) . for i in range (5): for j in range(3): print(i,j) . &#44396;&#44396;&#45800; &#52636;&#47141;&#54616;&#44592; . for i in range (2,10): for j in range(1,10): print(f&#39;{i}x{j}={i*j}&#39;,end =&#39; t&#39;) print() . for i in range (1,10): for j in range(2,10): print(f&#39;{j}x{i}={i*j}&#39;,end =&#39; t&#39;) print() . break &#48152;&#48373;&#50640;&#49436; &#48279;&#50612;&#45208;&#44592; . text = &#39;I have a dream&#39; letter = input(&#39;찾을 문자:&#39;) for i in text: print(i, end=&#39; &#39;) if i == letter and count == 1: count += 1 break . &#50696;&#51228; &gt; up &amp; down &#44172;&#51076; . 1~100 사이의 정답 숫자를 랜덤으로 하나 정하고 | 정답 숫자를 맞출 때까지 숫자를 입력하는 게임. | 입력된 숫자가 정답보다 작으면 &#39;Down&#39;, 크면 &#39;Up&#39;을 출력하고 | 숫자를 다시 입력받는다. | 정답을 맞추면 정답!이라고 출력하고 게임을 끝낸다 | import random answer = random.randint(1,100) num = 0 while num != answer: num = int(input(&#39;숫자를 입력하세요: &#39;)) if num &gt; answer: print(&#39;Down&#39;) elif num &lt; answer: print(&#39;Up&#39;) print(f&#39;정답! 답은 {answer}입니다!&#39;) .",
            "url": "https://fastpages.fast.ai/2021/06/01/%EB%B0%98%EB%B3%B5_while%EB%AC%B8%EA%B3%BC_for%EB%AC%B8.html",
            "relUrl": "/2021/06/01/%EB%B0%98%EB%B3%B5_while%EB%AC%B8%EA%B3%BC_for%EB%AC%B8.html",
            "date": " • Jun 1, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "논리 연산자(Logical operator)",
            "content": ". &#50696;&#51228;) &#54200;&#51032;&#51216; &#51116;&#44256;&#44288;&#47532; . 사용자로부터 물건 이름과 갯수 입력 받기 (엔터를 입력할 때까지 반복) | 물건이 존재하지 않으면 추가하고, 존재하면 물건 개수를 더한다 | 입력이 끝나면 재고 현황을 물건이름의 오름차순으로 정렬하여 출력 | stock = { &#39;수박&#39; : 3, &#39;딸기&#39; : 3, &#39;바나나&#39; : 1 } #물건: goods / 수량: number while True: goods = input(&#39;물건 이름:&#39;) if goods == &#39;&#39;: break number = int(input(&#39;수량:&#39;)) if goods in stock.keys(): stock[goods] += number #물건 개수 더하기 else: stock[goods] = number #없으면 요소 추가하기 print(&#39;-&#39;*50) #오름차순 정렬 for key,value in sorted(stock.items()): print(key, value, end =&#39; &#39;) . 물건 이름:바나나 수량:3 물건 이름: -- 딸기 3 바나나 4 수박 3 . &#51665;&#54633;(set) . 자료들이 순서와 중복 없이 저장된 것 | 중괄호{} 안에 요소를 쉼표로 구분하여 나열한다. | . set_wish = {&#39;베를린&#39;,&#39;암스테르담&#39;,&#39;다합&#39;,&#39;모로코&#39;,&#39;포르투&#39;,&#39;다합&#39;} set_wish = set([&#39;베를린&#39;,&#39;암스테르담&#39;,&#39;다합&#39;,&#39;모로코&#39;,&#39;포르투&#39;,&#39;다합&#39;]) #set() 명령어는 집합을 만든다 print(set_wish) . {&#39;베를린&#39;, &#39;포르투&#39;, &#39;모로코&#39;, &#39;다합&#39;, &#39;암스테르담&#39;} . &#51665;&#54633; &gt; &#50836;&#49548;&#52628;&#52636; . 인덱싱으로 값을 얻을 수 없다 (집합 자료형은 순서가 없기 때문!) | 인덱싱 값 사용하려면 리스트나 튜플로 변환 | . set_wish = {&#39;베를린&#39;,&#39;암스테르담&#39;,&#39;다합&#39;,&#39;모로코&#39;,&#39;포르투&#39;,&#39;다합&#39;} wish_list = list(set_wish) #리스트로 변환하기 print(wish_list) print(wish_list[2]) . [&#39;베를린&#39;, &#39;포르투&#39;, &#39;모로코&#39;, &#39;다합&#39;, &#39;암스테르담&#39;] 모로코 . set_wish = {&#39;베를린&#39;,&#39;암스테르담&#39;,&#39;다합&#39;,&#39;모로코&#39;,&#39;포르투&#39;,&#39;다합&#39;} wish_list = tuple(set_wish) #튜플로 변환하기 print(wish_list) print(wish_list[2]) . (&#39;베를린&#39;, &#39;포르투&#39;, &#39;모로코&#39;, &#39;다합&#39;, &#39;암스테르담&#39;) 모로코 . &#51665;&#54633;(set) &gt; &#50672;&#49328; . sweety = {&#39;빼빼로&#39;,&#39;칸초&#39;,&#39;허니버터&#39;} salty = {&#39;허니버터&#39;,&#39;포카칩&#39;,&#39;새우깡&#39;} #합집합 print(sweety.union(salty)) print(sweety|salty) #교집합 print(sweety.intersection(salty)) print(sweety&amp;salty) # 차집합 print(sweety.difference(salty)) print(sweety-salty) print(salty.difference(sweety)) print(salty-sweety) . &#51665;&#54633;(set) &gt; &#50836;&#49548;&#52628;&#44032; . set_wish = {&#39;베를린&#39;,&#39;암스테르담&#39;,&#39;다합&#39;,&#39;모로코&#39;,&#39;포르투&#39;,&#39;다합&#39;} set_wish.add(&#39;베를린&#39;) print(set_wish) . {&#39;베를린&#39;, &#39;포르투&#39;, &#39;모로코&#39;, &#39;다합&#39;, &#39;암스테르담&#39;} . set_wish = {&#39;베를린&#39;,&#39;암스테르담&#39;,&#39;다합&#39;,&#39;모로코&#39;,&#39;포르투&#39;,&#39;다합&#39;} set_wish.update([&#39;베를린&#39;,&#39;다합&#39;]) print(set_wish) . {&#39;베를린&#39;, &#39;포르투&#39;, &#39;모로코&#39;, &#39;다합&#39;, &#39;암스테르담&#39;} . &#51665;&#54633;(set) &gt; &#50836;&#49548; &#49325;&#51228; . set_wish = {&#39;베를린&#39;,&#39;암스테르담&#39;,&#39;다합&#39;,&#39;모로코&#39;,&#39;포르투&#39;,&#39;다합&#39;} set_wish.remove(&#39;암스테르담&#39;) #암스테르담 삭제하기 print(set_wish) . {&#39;베를린&#39;, &#39;포르투&#39;, &#39;모로코&#39;, &#39;다합&#39;} . set_wish = {&#39;베를린&#39;,&#39;암스테르담&#39;,&#39;다합&#39;,&#39;모로코&#39;,&#39;포르투&#39;,&#39;다합&#39;} # set_wish.remove(&#39;바르셀로나&#39;) if &#39;바르셀로나&#39; in list(set_wish): set_wish.remove(&#39;바르셀로나&#39;) print(set_wish) . {&#39;베를린&#39;, &#39;포르투&#39;, &#39;모로코&#39;, &#39;다합&#39;, &#39;암스테르담&#39;} . &#50724;&#47448;&#47700;&#49464;&#51648; &#54644;&#49437; . NameError : 참조변수 없음 (변수가 정의되어있지 않음) . | SyntaxError : 문법이 잘못되었음 (오타, 괄호를 제대로 닫지 않았을 때, 콜론(:)을 잘못 사용했을 때 등...) . | TypeError : 문자열 타입이 맞지 않음 . | ZeroDivisionError : 0으로 나눌 수 없음 . | IndentationError : 0으로 나눌 수 없음 . | KeyError : 리스트, 튜플, 딕셔너리, 집합 등에서 해당 요소 없음 . | . &#54532;&#47196;&#44536;&#47016;&#51032; 3&#44032;&#51648; &#44592;&#48376; &#51228;&#50612; &#44396;&#51312; . 순차구조 | 선택구조 : 조건에 따라 명령을 선택하여 실행하는 구조 Ex) if문 | 반복구조 : 동일한 명령이 반복되면서 실행되는 구조 Ex) for문(범위) / while문(해당조건 충족) | . &#51312;&#44148;&#47928;(if&#47928;)&#51032; &#44396;&#51312;&#46308; . if | if ~ else | if ~ elif | if elif ~ else | 중첩 if | . &#53076;&#46300;&#48660;&#47085; . a = 1 if a &lt; 0: print(&#39;a는 0보다 작다.&#39;) print(&#39;a는 음수이다.&#39;) print(&#39;끝&#39;) . 끝 . a = 1 if a &lt; 0: print(&#39;a는 0보다 작다.&#39;) print(&#39;a는 음수이다.&#39;) print(&#39;끝&#39;) . a는 음수이다. 끝 . . &#53076;&#47196;&#45208; &#51088;&#44032;&#51652;&#45800; &#54532;&#47196;&#44536;&#47016; 1&#45800;&#44228; . 체온을 입력받아 | 체온이 37.5도 초과면 | &#39;등교 불가&#39;를 출력하는 프로그램을 작성하세요 | temp = float(input(&#39;체온:&#39;)) if temp &gt; 37.5: print(&#39;등교 불가&#39;) . 체온:36.5 . &#53076;&#47196;&#45208; &#51088;&#44032;&#51652;&#45800; &#54532;&#47196;&#44536;&#47016; 2&#45800;&#44228; . 체온, 검사결과대기여부, 자가격리여부를 입력받아 | 체온이 37.5도 초과면 &#39;발열기준 초과: 등교불가&#39;를 출력합니다. | 아니고, 만약 검사대기여부가 &#39;Y&#39;면 &#39;검사대기 중 등교 불가&#39;를 출력 | 아니고, 만약 자가격리여부가 &#39;Y&#39;면 &#39;자가격리 중 등교 불가&#39;를 출력 | 모든 조건이 만족하지 않는다면 &#39;등교가능&#39;을 출력합니다. | temp = float(input(&#39;체온:&#39;)) waiting = input(&#39;검사결과대기여부(Y/N):&#39;) isolation = input(&#39;자가격리여부(Y/N):&#39;) if temp &gt; 37.5: print(&#39;발열기준 초과: 등교불가&#39;) elif waiting == &#39;Y&#39;: print(&#39;검사대기 중 등교 불가&#39;) elif isolation == &#39;Y&#39;: print(&#39;자가격리 중 등교 불가&#39;) else: print(&#39;등교 가능&#39;) . 체온:37 검사결과대기여부(Y/N):Y 자가격리여부(Y/N):N 검사대기 중 등교 불가 . &#50696;&#51228;) &#54617;&#51216; &#52636;&#47141;&#44592; . grade = &#39; &#39; score = int(input(&#39;점수를 입력하세요:&#39;)) if score &gt;= 90: print(&#39;A&#39;) elif score &gt;= 80: print(&#39;B&#39;) elif score &gt;= 70: print(&#39;C&#39;) elif score &gt;= 60: print(&#39;D&#39;) else: print(&#39;F&#39;) print(f&#39;등급: {grade}&#39;) . 점수를 입력하세요:88 B 등급: . &#50696;&#51228;) &#44552;&#50529;&#50640; &#46384;&#47480; &#54624;&#51064;&#50984; &#44228;&#49328;&#44592; . 물건 구매가를 입력받고, | 금액에 따른 할인율을 계산하여 | 구매가, 할인율, 할인금액, 지불금액을 출력 | buy = int(input(&#39;구매가:&#39;)) if buy &gt;= 100000: #가장 범위가 작은 조건부터 써준다 dc_percent = 10 elif buy &gt;= 50000: dc_percent = 7.5 elif buy &gt;= 10000: dc_percent = 5 else: dc_percent = 0 dc_price = buy*(dc_percent/100) print(&#39;-&#39;*50) print(f&#39;구매가: {buy}원&#39;) print(f&#39;할인율: {dc_percent}%&#39;) print(f&#39;할인금액: {int(dc_price)}원&#39;) print(f&#39;지불금액: {int(buy-dc_price)}원&#39;) . 구매가:360000 -- 구매가: 360000원 할인율: 10% 할인금액: 18000원 지불금액: 342000원 . &#50696;&#51228;) &#52572;&#49548;&#44050; &#44396;&#54616;&#44592;(1/3) . 3개의 수를 입력받아 | 가장 작은 수를 출력하세요 | numbers = [] for numbers in range(0,3): numbers = input(&#39;숫자를 입력하세요: &#39;) print(&#39;-&#39;*50) min_1 = numbers[0] #첫번째 수를 임의로 저장 if min_1 &gt; numbers[1]: min_1 = numbers[1] if min_1 &gt; number[2]: min_1 = number[2] print(int(min_1)) . 숫자를 입력하세요: 25 숫자를 입력하세요: 26 숫자를 입력하세요: 27 -- 2 . numbers = [] for i in range(0,3): numbers.append(int(input(&#39;숫자를 입력하세요: &#39;))) print(&#39;-&#39;*50) min_n = min(numbers) print(&#39;가장 작은수:&#39;,min_n) . 숫자를 입력하세요: 2 숫자를 입력하세요: 3 숫자를 입력하세요: 1 -- 가장 작은수: 1 . &#45436;&#47532;&#50672;&#49328;&#51088; . 논리연산자를 사용하여 여러 개의 조건을 조합하여 복잡한 조건식을 만들 수 있다. | . a and b | a or b | not a, not b | &#45436;&#47532; &#50672;&#49328;&#51088; . 1 in [1,2.3] . True . &#39;a&#39; in (&#39;a&#39;,&#39;b&#39;,&#39;c&#39;) . True . &#39;j&#39; not in (&#39;python&#39;) . True . &#50696;&#51228;) &#44397;&#47549;&#44277;&#50896; &#51077;&#51109;&#47308; &#44228;&#49328;&#44592; . 나이를 입력받아 국립공원 입장권 발급하기 | 입장료는 3000 | 나이가 65세 이상이거나 7세 이하인 경우에는 무료 | 나이 8~ 18세는 청소년 요금이 1000원 | age = int(input(&#39;나이: &#39;)) price = 3000 if age &gt;= 65 or age &lt;= 7: # 3번 조건 price = &#39;무료&#39; elif 7 &lt; age &lt; 19: # 4번 조건 price = 1000 print(&#39;-&#39;*50) print(f&#39;입장료는 {price}입니다.&#39;) . 나이: 16 -- 입장료는 1000입니다. . &#50696;&#51228;) &#47196;&#44536;&#51064; &#54532;&#47196;&#44536;&#47016;(1/2) . 사용자로부터 아이디/패스워드를 받아서 | 프로그램에 저장된 아이디/패스워드와 일치하는지 여부 검사하여 | 로그인/로그인 실패를 출력하는 프로그램 | 아이디:ID1234 | 패스워드:PWD1234 | . id = &#39;ID1234&#39; pw = &#39;PWD1234&#39; given_id = input(&#39;아이디: &#39;) given_pw = input(&#39;비밀번호: &#39;) if given_id == id and given_pw == pw: print(&#39;로그인 성공&#39;) else: print(&#39;로그인 실패&#39;) . 아이디: ID1234 비밀번호: PWD1234 로그인 성공 . id = &#39;ID1234&#39; pw = &#39;PWD1234&#39; given_id = input(&#39;아이디: &#39;) given_pw = input(&#39;비밀번호: &#39;) if not given_id == id: print(&#39;아이디를 확인해주세요&#39;) elif not given_pw == pw: print(&#39;패스워드를 확인해주세요&#39;) elif given_id == id and given_pw == pw: print(&#39;로그인 성공&#39;) . 아이디: ID1234 비밀번호: PWD123 패스워드를 확인해주세요 . &#49324;&#52825;&#50672;&#49328; &#54532;&#47196;&#44536;&#47016; . 두 수와 사칙연산기호를 입력받아 연산 기호에 따라 연산 결과를 출력 . cal = [] for i in range(2): cal.append(int(input(&#39;숫자를 입력하세요: &#39;))) sign = input(&#39;연산을 입력하세요: &#39;) answer = float() if sign == &#39;+&#39;: answer = cal[0]+cal[1] elif sign == &#39;-&#39;: answer = cal[0]-cal[1] elif sign == &#39;*&#39;: answer = cal[0]*cal[1] elif sign == &#39;/&#39;: if cal[2] != 0: answer = cal[0]/cal[1] else: print(&#39;0으로 나눌 수 없습니다.&#39;) print(&#39;-&#39;*50) print(f&#39;{cal[0]}{sign}{cal[1]} = {answer}&#39;) . 숫자를 입력하세요: 2 숫자를 입력하세요: 2 연산을 입력하세요: - -- 2-2 = 0 . &#50696;&#51228;) &#51452;&#49324;&#50948; &#45912;&#51648;&#44592; &#44172;&#51076; . 두개의 주사위를 던져 더 큰 수가 나오는 사람이 이기는 게임 . import random dice_1 = random.randint(0,5) dice_2 = random.randint(0,5) if dice_1 &gt; dice_2: print(f&#39;{dice_1+1}:{dice_2+1}의 결과로 첫번째 주사위가 이겼습니다&#39;) elif dice_1 == dice_2: print(f&#39;{dice_1+1}:{dice_2+1}의 결과로 비겼습니다&#39;) elif dice_1 &lt; dice_2: print(f&#39;{dice_1+1}:{dice_2+1}의 결과로 두번째 주사위가 이겼습니다&#39;) . 2:5의 결과로 두번째 주사위가 이겼습니다 .",
            "url": "https://fastpages.fast.ai/2021/06/01/if-else%EB%AC%B8%EA%B3%BC-%EC%A7%91%ED%95%A9set.html",
            "relUrl": "/2021/06/01/if-else%EB%AC%B8%EA%B3%BC-%EC%A7%91%ED%95%A9set.html",
            "date": " • Jun 1, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "Title",
            "content": ". &#50696;&#51228; 1) &#49707;&#51088; &#54633;&#44228;&#50752; &#54217;&#44512; &#44228;&#49328;&#54616;&#44592; . num_list = [] for i in range(5): number = float(input(&#39;숫자를 입력하세요: &#39;)) num_list.append(number) if len(num_list) != 0: average = sum(num_list) / len(num_list) else: average = 0 print(f&#39;합계는 {sum(num_list)}, 평균은 {average}입니다.&#39;) . 숫자를 입력하세요: 3 숫자를 입력하세요: 4 숫자를 입력하세요: 1 숫자를 입력하세요: 2 숫자를 입력하세요: 5 합계는 15.0, 평균은 3.0입니다. . &#50696;&#51228; 2) &#51452;&#49324;&#50948; &#48712;&#46020; &#44228;&#49328;&#54616;&#44592; . import random count = [0,0,0,0,0,0] for i in range(10000): dice = random.randint(1,6) if dice == 1: count[0] += 1 elif dice == 2: count[1] += 1 elif dice == 3: count[2] += 1 elif dice == 4: count[3] += 1 elif dice == 5: count[4] += 1 elif dice == 6: count[5] += 1 print(count) . [1685, 1687, 1634, 1631, 1727, 1636] . import random dice = list(range(1, 7)) conse = [] for i in range(10000) : conse.append(random.choice(dice)) for i in range(1, len(dice)+1) : print(f&#39;{i}은(는) {conse.count(i)} 개&#39;) . 1은(는) 1645 개 2은(는) 1614 개 3은(는) 1666 개 4은(는) 1765 개 5은(는) 1660 개 6은(는) 1650 개 . &#50696;&#51228; 3) &#44284;&#47785;&#48324; &#51216;&#49688;&#51032; &#54217;&#44512; &#44396;&#54616;&#44592; . [국,영,수] 점수가 저장된 리스트입니다. . 과목별 리스트를 분리하고 | 과목별 평균을 산출하세요. (평균은 소수점 1자리까지 산출) | scores = [[96,84,80], [96,86,76], [76,95,83], [89,96,69], [90,76,91], [82,66,88], [83,86,79], [85,90,83]] #리스트를 분리할 공간을 만들어준다 ko = [] en = [] math = [] for personal_score in scores: #scores 리스트 안의 리스트를 student로 정의하고 ko.append(personal_score[0]) #개인 score의 첫번째 항목은 국어점수 en.append(personal_score[1]) #개인 score의 두번째 항목은 영어점수 math.append(personal_score[2]) #개인 score의 세번째 항목은 수학점수 print(f&#39;국어 점수: {ko}, 영어 점수: {en}, 수학 점수: {math}&#39;) #과목별 점수로 분류되었는지 확인 # 평균을 구한다 round(과목합계/항목수, 소수점1자리) avr_ko = round(sum(ko)/len(ko),1) avr_en = round(sum(en)/len(en),1) avr_math = round(sum(math)/len(math),1) print(f&#39;국어 평균: {avr_ko}, 영어 평균: {avr_en}, 수학 평균: {avr_math}&#39;) . 국어 점수: [96, 96, 76, 89, 90, 82, 83, 85], 영어 점수: [84, 86, 95, 96, 76, 66, 86, 90], 수학 점수: [80, 76, 83, 69, 91, 88, 79, 83] 국어 평균: 87.1, 영어 평균: 84.9, 수학 평균: 81.1 . **&#50696;&#51228;) &#47532;&#49828;&#53944; &#54633;&#44228; &#44396;&#54616;&#44592; . values = [56,12,33,8,3,2,98] total = 0 for i in range(7): total += values[i] total . 212 . values = [56,12,33,8,3,2,98] total = 0 for i in values: total += i total . 212 . values = [56,12,33,8,3,2,98] print(sum(values)) . 212 . &#53916;&#54540;(Tuple) _ &#44050;&#51012; &#48148;&#44992; &#49688; &#50630;&#45716; &#54637;&#47785; . 리스트는 [ ], 튜플은 ( ) ex) 주민번호, 여권번호, 생년월일... 튜플은 뒤에 ,를 반드시 입력 *안하면 . t1 = (1,5,3,4,2) t2 = (6,7,8,9,8) print(t1[1]) #인덱싱 print(t1[2:4]) #슬라이싱 print(t1+t2) #더하기 print(t1*3) #곱하기 print(len(t1)) #길이 구하기 print(t2.index(9)) #요소의 위치 찾기 print(t2.count(8)) #요소의 갯수 sort_t1 = sorted(t1) #정렬된 [새로운 리스트]로 반환! 튜플은 변경이 안되므로. print(sort_t1) . 5 (3, 4) (1, 5, 3, 4, 2, 6, 7, 8, 9, 8) (1, 5, 3, 4, 2, 1, 5, 3, 4, 2, 1, 5, 3, 4, 2) 5 3 2 [1, 2, 3, 4, 5] . &#46357;&#49496;&#45320;&#47532; . key: value 의 집합 dict_name = {key0:value0, key1:value1 ... keyN,valueN} 순서가 없음 = 인덱스가 없음 키 값으로 제어 . dict_person = { &#39;name&#39;:&#39;아이언맨&#39;, &#39;소속&#39;:&#39;마블&#39;, &#39;age&#39;:35, &#39;특징&#39;:[&#39;기술덕후&#39;,&#39;부자&#39;] } print(dict_person) . {&#39;name&#39;: &#39;아이언맨&#39;, &#39;소속&#39;: &#39;마블&#39;, &#39;age&#39;: 35, &#39;특징&#39;: [&#39;기술덕후&#39;, &#39;부자&#39;]} . dict_phone = { &#39;강동원&#39;:&#39;01011112222&#39;, &#39;공유&#39;:&#39;01022223333&#39;, &#39;현빈&#39;:&#39;01033334444&#39; } print(dict_phone) . {&#39;강동원&#39;: &#39;01011112222&#39;, &#39;공유&#39;: &#39;01022223333&#39;, &#39;현빈&#39;: &#39;01033334444&#39;} . &#46357;&#49492;&#45320;&#47532;:&#50836;&#49548; &#52628;&#44032;, &#49325;&#51228;, &#52628;&#52636;&#54616;&#44592; . #딕셔너리명[key]=value dict_scores = {} dict_scores[&#39;홍길동&#39;] = 80 dict_scores[&#39;공유&#39;] = 90 dict_scores[&#39;현빈&#39;] = 100 print(dict_scores) . {&#39;홍길동&#39;: 80, &#39;공유&#39;: 90, &#39;현빈&#39;: 100} . #del 딕셔너리명[key] dict_scores = { &#39;홍길동&#39;: 80, &#39;공유&#39;: 90, &#39;현빈&#39;: 100 } del dict_scores[&#39;홍길동&#39;] print(dict_scores) . {&#39;공유&#39;: 90, &#39;현빈&#39;: 100} . #딕셔너리명.pop(key) dict_scores = { &#39;홍길동&#39;: 80, &#39;공유&#39;: 90, &#39;현빈&#39;: 100 } score = dict_scores.pop(&#39;홍길동&#39;) print(score) print(dict_scores) . 80 {&#39;공유&#39;: 90, &#39;현빈&#39;: 100} . #딕셔너리명.clear() dict_scores = { &#39;홍길동&#39;: 80, &#39;공유&#39;: 90, &#39;현빈&#39;: 100 } dict_scores.clear() print(dict_scores) . {} . &#46357;&#49492;&#45320;&#47532; : &#50836;&#49548; &#52628;&#52636; . #값 추출하기 dict_scores = { &#39;홍길동&#39;: 80, &#39;공유&#39;: 90, &#39;현빈&#39;: 100 } print(dict_scores.get(&#39;현빈&#39;)) print(dict_scores.get(&#39;송중기&#39;)) print(dict_scores.get(&#39;송중기&#39;,&#39;없음&#39;)) #&#39;송중기&#39;라는 값이 없으면 &#39;없음&#39;이라는 문구를 출력해줘! . 100 None 없음 . dict_scores = { &#39;홍길동&#39;: 80, &#39;공유&#39;: 90, &#39;현빈&#39;: 100 } print(&#39;현빈&#39; in dict_scores) #&#39;현빈&#39;이라는 key가 dict_scores 안에 있니? print(&#39;송중기&#39; in dict_scores) #&#39;송중기&#39;라는 key가 dict_scores 안에 있니? . True False . &#46357;&#49492;&#45320;&#47532;: &#47784;&#46304; keys / values &#50619;&#44592; . #딕셔너리명.keys() dict_scores = { &#39;홍길동&#39;: 80, &#39;공유&#39;: 90, &#39;현빈&#39;: 100 } print(dict_scores.keys()) #리스트의 키 보여줘! print(list(dict_scores.keys())) #key리스트만 출력 . dict_keys([&#39;홍길동&#39;, &#39;공유&#39;, &#39;현빈&#39;]) [&#39;홍길동&#39;, &#39;공유&#39;, &#39;현빈&#39;] . #딕셔너리명.values() dict_scores = { &#39;홍길동&#39;: 80, &#39;공유&#39;: 90, &#39;현빈&#39;: 100 } print(dict_scores.values()) #리스트의 벨류값 보여줘! print(list(dict_scores.values())) #value 리스트만 출력 . dict_values([80, 90, 100]) [80, 90, 100] . #딕셔너리명.items() dict_scores = { &#39;홍길동&#39;: 80, &#39;공유&#39;: 90, &#39;현빈&#39;: 100 } print(dict_scores.items()) #리스트의 벨류값 보여줘! print(list(dict_scores.items())) #value 리스트만 출력 . dict_items([(&#39;홍길동&#39;, 80), (&#39;공유&#39;, 90), (&#39;현빈&#39;, 100)]) [(&#39;홍길동&#39;, 80), (&#39;공유&#39;, 90), (&#39;현빈&#39;, 100)] . #방법1 dict_scores = { &#39;홍길동&#39;: 80, &#39;공유&#39;: 90, &#39;현빈&#39;: 100 } for key in dict_scores.keys(): print(key, dict_scores[key]) #value값을 불러올때 dict_scores[key]를 사용하는 이유는 key값을 이용하여 불러오기 때문에 (value값은 사용하지 못한다) . 홍길동 80 공유 90 현빈 100 . dict_scores = { &#39;홍길동&#39;: 80, &#39;공유&#39;: 90, &#39;현빈&#39;: 100 } for key,value in dict_scores.items(): print(key, value) . 홍길동 80 공유 90 현빈 100 . &#46357;&#49492;&#45320;&#47532;: &#51221;&#47148;&#54616;&#50668; &#52636;&#47141;&#54616;&#44592; . dict_scores = { &#39;홍길동&#39;: 80, &#39;공유&#39;: 90, &#39;현빈&#39;: 100 } #딕셔너리의 키를 정렬하여 리스트로 받음 new_list = sorted(dict_scores.keys()) print(new_list) #정렬된 키 리스트 순서로 반복 for key in new_list: print(key, dict_scores[key]) . [&#39;공유&#39;, &#39;현빈&#39;, &#39;홍길동&#39;] 공유 90 현빈 100 홍길동 80 . dict_scores = { &#39;홍길동&#39;: 80, &#39;공유&#39;: 90, &#39;현빈&#39;: 100 } #딕셔너리의 키를 정렬하여 #튜플(키,값)으로 받음 item_list = sorted(dict_scores.items()) print(item_list) #정렬된 키 리스트 순서로 반복 for key,value in item_list: print(key, value) . &#50696;&#51228;) &#47560;&#51068;&#47532;&#51648; &#44288;&#47532; . 회사 쇼핑몰 고객의 아이디에 부여된 마일리지 포인트를 딕셔너리에 저장하여 관리하고자 한다 아이디 = Kim, Lee, Han, Hong, Hwang 마일리지 = 12000, 11000, 3000, 5000, 18000 ​ . 아이디와 마일리지 포인트를 딕셔너리에 저장한 다음 출력하는 프로그램을 작성하시오 | 아이디 Han의 마일리지를 5000점으로 업데이트 하시오 | 아이디 Jang의 마일리지 7000점을 추가하시오 | 딕셔너리에서 가장 높은 마일리지를 찾아서 출력하는 프로그램을 작성하시오 | mile = { &#39;Kim&#39;: 12000, &#39;Lee&#39;: 11000, &#39;Han&#39;: 3000, &#39;Hong&#39;: 5000, &#39;Hwang&#39;: 18000 } print(mile) #value 업데이트 mile[&#39;Han&#39;] = 5000 print(mile) #key:value 추가하기 mile[&#39;Jang&#39;] = 7000 print(mile) #가장 높은 마일리지 찾기 print(f&#39;가장 높은 마일리지는 {max(mile.keys())}님의 {max(mile.values())}점 입니다.&#39;) . {&#39;Kim&#39;: 12000, &#39;Lee&#39;: 11000, &#39;Han&#39;: 3000, &#39;Hong&#39;: 5000, &#39;Hwang&#39;: 18000} {&#39;Kim&#39;: 12000, &#39;Lee&#39;: 11000, &#39;Han&#39;: 5000, &#39;Hong&#39;: 5000, &#39;Hwang&#39;: 18000} {&#39;Kim&#39;: 12000, &#39;Lee&#39;: 11000, &#39;Han&#39;: 5000, &#39;Hong&#39;: 5000, &#39;Hwang&#39;: 18000, &#39;Jang&#39;: 7000} 가장 높은 마일리지는 Lee님의 18000점 입니다. . &#50696;&#51228;) &#45800;&#50612;&#51109; &#47564;&#46308;&#44592; . dict_voca = {} while True: eng = input(&#39;영어단어를 입력하세요: &#39;) if eng == &#39;&#39;: break kor = input(&#39;뜻을 입력하세요: &#39;) dict_voca[eng] = kor score = 0 for eng_word in dict_voca.keys(): #eng_word에 dict_voca 딕셔너리의 키값을 가져온다 answer = input(eng_word + &#39;:&#39;) if answer == dict_voca[eng_word]: score+=1 print(&#39;-&#39;*50) print(f&#39;총 점수는 {score}/{len(dict_voca)}입니다.&#39;) . 영어단어를 입력하세요: tree 뜻을 입력하세요: 나무 영어단어를 입력하세요: tree:나무 -- 총 점수는 1/1입니다. .",
            "url": "https://fastpages.fast.ai/2021/05/27/%ED%8A%9C%ED%94%8C%EA%B3%BC-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC.html",
            "relUrl": "/2021/05/27/%ED%8A%9C%ED%94%8C%EA%B3%BC-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC.html",
            "date": " • May 27, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "Title",
            "content": ". &#51648;&#45212;&#51452; &#48373;&#49845;: &#45936;&#51060;&#53552; &#53440;&#51077; . test1 = 1 print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 # 따옴표 안의 숫자는 문자로 인식한다 a, b= 10, 20 print(a+b) a, b = &#39;10&#39;, &#39;20&#39; print(c+d) # 숫자와 문자는 계산되지 않는다 a, b = abcd, 20 print(a+b) . 1 &lt;class &#39;int&#39;&gt; 94905490205184 30 1020 . NameError Traceback (most recent call last) &lt;ipython-input-29-376c73c22bfa&gt; in &lt;module&gt;() 12 a, b = &#39;10&#39;, &#39;20&#39; 13 print(c+d) &gt; 14 a, b = abcd, 20 15 print(a+b) NameError: name &#39;abcd&#39; is not defined . print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 . 1.0 &lt;class &#39;float&#39;&gt; 139669584096688 . test1 = &quot;hi&quot; print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 # 문자열 여러줄 넣고 싶다면 따옴표 3개를 연달아 작성한다 a = &#39;&#39;&#39;자세히 보아야 예쁘다. 오래 보아야 사랑스럽다. 너도 그렇다.&#39;&#39;&#39; print(a) . hi &lt;class &#39;str&#39;&gt; 139670275605488 자세히 보아야 예쁘다. 오래 보아야 사랑스럽다. 너도 그렇다. . test1 = True print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 b = 1 &gt; 2 print(b) . True &lt;class &#39;bool&#39;&gt; 94905489531136 False . test1 = [1,2,3] print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 . [1, 2, 3] &lt;class &#39;list&#39;&gt; 139669583916880 . test1 = (1,2,3) print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 . (1, 2, 3) &lt;class &#39;tuple&#39;&gt; 139669584078560 . test1 = {&#39;name&#39; : &#39;john&#39;, &#39;age&#39; : 15} print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 . {&#39;name&#39;: &#39;john&#39;, &#39;age&#39;: 15} &lt;class &#39;dict&#39;&gt; 139669651052016 . test1 = {1,2,3,4} print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 . {1, 2, 3, 4} &lt;class &#39;set&#39;&gt; 139669712745728 . &#54805; &#48320;&#54872; &#54632;&#49688; . int(), float(), str() . a, b= 10, &quot;20&quot; print(a+int(b)) . 30 . a, b= 10, 20 print(str(a)+str(b)) . 1020 . a, b= 10, 20 print(float(a)+float(b)) . 30.0 . a, b= 10.3, 20.8 print(int(a)+int(b)) . 30 . &#48320;&#49688;&#50640; &#44050; &#51077;&#47141;&#48155;&#44592; &gt; input() . input으로 입력받은 값은 문자값으로 출력된다 . name = input(&#39;이름을 입력하세요&#39;) print( name, &#39;님 안녕하세요?&#39;) . 이름을 입력하세요허윤희 허윤희 님 안녕하세요? . &#52636;&#47141; &gt; print() . print(5) print(0.5) print(&#39;Hi&#39;) print(&#39;10&#39;) . 5 0.5 Hi 10 . print(1+2) print(2&gt;3) print(2&lt;3) . 3 False True . a = 1 print(a) print(a+1) . 1 2 . print(&#39;Hello&#39;,&#39;World&#39;) print(&#39;1 더하기 2는&#39;, 1+2) age = 10 print(&#39;나는&#39;, age, &#39;살 입니다&#39;) . Hello World 1 더하기 2는 3 나는 10 살 입니다 . &#52636;&#47141; &gt; f&#49828;&#53944;&#47553; . 문장 사이에 변수값을 출력할 때 편리하다. . name = input(&#39;이름을 입력하세요&#39;) print( f&#39;{name}님 안녕하세요?&#39;) . 이름을 입력하세요허윤희 허윤희님 안녕하세요? . &#49328;&#49696;&#50672;&#49328; . x = 100 y = 3 print(x // y) . 33 . x = 100 y = 3 print(x % y) . 1 . x = 100 y = 3 print(x ** y) . 1000000 . &#46160; &#49688;&#47484; &#51077;&#47141;&#48155;&#50500; &#45908;&#54616;&#45716; &#54532;&#47196;&#44536;&#47016; . print(&#39;두 수를 입력받아 더하는 프로그램입니다.&#39;) a = input(&#39;첫번째 숫자를 입력하세요: &#39;) b = input(&#39;두번째 숫자를 입력하세요: &#39;) print(f&#39;{a} + {b} = {int(a)+int(b)}&#39;) . 두 수를 입력받아 더하는 프로그램입니다. 첫번째 숫자를 입력하세요: 10 두번째 숫자를 입력하세요: 20 10 + 20 = 30 . &#49328;&#49696;&#50672;&#49328;&#51032; &#50864;&#49440;&#49692;&#50948; . () &gt; * &gt; , / &gt; +, - . &#54868;&#50472;&#50728;&#46020; &gt; &#49453;&#50472;&#50728;&#46020;&#47196; &#48320;&#54872;&#54616;&#44592; . a = input(&#39;화씨온도: &#39;) print(&#39;섭씨온도:&#39;,(int(a)-32)*5/9) . 화씨온도: 100 섭씨온도: 37.77777777777778 . &#49340;&#44033;&#54805; &#45331;&#51060; . a = float(input(&#39;밑변:&#39;)) h = float(input(&#39;높이:&#39;)) print(&#39;삼각형의 넓이:&#39;, a*h/2) . 밑변:3.2 높이:5.5 삼각형의 넓이: 8.8 . &#50896;&#51032; &#45331;&#51060; &#44396;&#54616;&#44592; . a = float(input(&#39;반지름: &#39;)) print(&#39;원의 둘레:&#39;, 2*a*3.14 , &#39;원의 넓이:&#39;, 3.14*a**2) . 반지름: 3 원의 둘레: 18.84 원의 넓이: 28.26 . &#54624;&#45817; &#50672;&#49328;&#51088; . 주소에 변수값 할당하기 | 기호 &#39;=&#39; 사용 | &#39;==&#39;는 [같다]라는 연산 표현 | a = 1 print(a) # 여러개의 변수에 하나의 값 할당 a = b = c = 1 print(a,b,c) # 여러개의 변수에 각각 다른 값 할당 a, b, c = 1, 2, 3 print(a,b,c) . 1 1 1 1 1 2 3 . &#48373;&#54633;&#54624;&#45817; &#50672;&#49328;&#51088; . x = 10 x += 20 # x = x(기존) + 20 print(x) . 30 . x = 3 y = 5 x *= x + y # x = x * (x + y) print(x) . 24 . &#47928;&#51088;&#50676; &#50672;&#44208;&#54616;&#44592; . name = input(&#39;이름을 입력하세요: &#39;) greet = name + &#39;님, 안녕하세요&#39; print(greet) . 이름을 입력하세요: 윤희 윤희님, 안녕하세요 . English = 80 result = &#39;영어점수: &#39; + str(English) + &#39;점&#39; print(result) . 영어점수: 80점 . &#47196;&#48391; &#44592;&#51088; &#47564;&#46308;&#44592; . stadium = input(&#39;경기장소: &#39;) winner = input(&#39;이긴 팀: &#39;) loser = input(&#39;진 팀: &#39;) vip = input(&#39;vip 선수: &#39;) score = input(&#39;점수: &#39;) print(&#39;-&#39; * 50) print(f&#39;&#39;&#39;오늘 {stadium}에서 경기가 열렸습니다. {winner}와(과) {loser}은(는) 치열한 공방전을 펼쳤습니다. {vip}이(가) 맹활약을 펼습니다. 결국 {winner}이(가) {loser}을(를) {score}로 이겼습니다.&#39;&#39;&#39;) . 경기장소: 올림픽 경기장 이긴 팀: 대한민국 진 팀: 일본 vip 선수: 손흥민 점수: 3:0 -- 오늘 올림픽 경기장에서 경기가 열렸습니다. 대한민국와(과) 일본은(는) 치열한 공방전을 펼쳤습니다. 손흥민이(가) 맹활약을 펼습니다. 결국 대한민국이(가) 일본을(를) 3:0로 이겼습니다. . &#44305;&#44256; &#47564;&#46308;&#44592; . location = input(&#39;어느 지역인가요?&#39;) loc_type = input(&#39;매물의 종류는 무엇인가요?&#39;) dimensions = input(&#39;면적은 어떻게 되나요?(평수)&#39;) room_nm = input(&#39;방의 개수는 몇개인가요?&#39;) price = input(&#39;가격은 얼마인가요?&#39;) print(&#39;-&#39; * 50) print(f&#39;&#39;&#39;{location}에 위치한 아주 좋은 {loc_type}이(가) 매물로 나왔습니다. 이 {loc_type}는 {dimensions}평으로 {room_nm}개의 방을 가지고 있습니다. 가격은 {price}만원 입니다.&#39;&#39;&#39;) . 어느 지역인가요?서울 매물의 종류는 무엇인가요?아파트 면적은 어떻게 되나요?(평수)20 방의 개수는 몇개인가요?2 가격은 얼마인가요?17억 -- 서울에 위치한 아주 좋은 아파트이(가) 매물로 나왔습니다. 이 아파트는 20평으로 2개의 방을 가지고 있습니다. 가격은 17억만원 입니다. . nmb_member = input(&#39;팀원은 총 몇명인가요?&#39;) team_nm = input(&#39;팀명은 무엇인가요?&#39;) print(&#39;-&#39; * 50) print(f&#39;&#39;&#39;저희 팀은 총 {nmb_member}명으로 이루어진 {team_nm}팀 입니다!&#39;&#39;&#39;) . 팀원은 총 몇명인가요?7 팀명은 무엇인가요?네카라쿠배삼파망 -- 저희 팀은 총 7명으로 이루어진 네카라쿠배삼파망팀 입니다! . &#49457;&#51201;&#44228;&#49328; &#54532;&#47196;&#44536;&#47016; . input(&#39;이름을 입력하세요: &#39;) a = int(input(&#39;국어성적을 입력하세요: &#39;)) b = int(input(&#39;영어성적을 입력하세요: &#39;)) c = int(input(&#39;수학성적을 입력하세요: &#39;)) print(&#39;-&#39;*50) print(f&#39;평균성적은 {(a + b + c)/3}점입니다.&#39;) . &#52964;&#54588;&#44032;&#44172; &#47588;&#52636; &#44228;&#49328;&#54616;&#44592; . americano = 2000 latte = 3000 cappuccino = 3500 a = int(input(&#39;아메리카노 판매 갯수: &#39;)) b = int(input(&#39;카페라떼 판매 갯수: &#39;)) c = int(input(&#39;카푸치노 판매 갯수: &#39;)) print(&#39;-&#39;*50) print(f&#39;총 매출은 {americano*a + latte*b + cappuccino*c}원입니다.&#39;) . 아메리카노 판매 갯수: 2 카페라떼 판매 갯수: 4 카푸치노 판매 갯수: 6 -- 총 매출은 37000원입니다. . ame = int(input(&#39;아메리카노 판매 갯수: &#39;)) latte = int(input(&#39;카페라떼 판매 갯수: &#39;)) chino = int(input(&#39;카푸치노 판매 갯수: &#39;)) price = (ame*2000) + (latte*3000) + (chino*3500) print(&#39;-&#39;*50) print(&#39;총 매출은&#39;, price, &#39;원입니다.&#39;) . 아메리카노 판매 갯수: 4 카페라떼 판매 갯수: 7 카푸치노 판매 갯수: 1 -- 총 매출은 32500 원입니다. . &#47928;&#51088;&#47196; &#51089;&#49457; . n =&gt; 줄넘김,enter t =&gt; 줄맞춤(intent),tap . print(&#39;셀 병합 n t &#39;shift key &#39;를 누른 후 n t t 병합을 원하는 셀들을 다중선택 후 shift+m&#39;) . 셀 병합 &#39;shift key&#39;를 누른 후 병합을 원하는 셀들을 다중선택 후 shift+m . &#47928;&#51088;&#50676;&#47196;&#49436;&#51032; &#49707;&#51088;&#52376;&#47532; . 주민번호, 우편번호등 값이 0으로 시작되는 정수 파이썬에서는 정수가 0으로 시작하면 정수값 입력오류로 문법 오류 처리 . print(210101-1111111) print(&#39;210101-1111111&#39;) . join&#44284; split . join: 문자열을 원하는 글자로 더한다. split: 문자열을 원하는 글자로 나눈다. . print(&#39;-&#39;.join(&#39;Hello World&#39;)) print(&#39;Welcome to Python&#39;.split(&#39; &#39;)) . H-e-l-l-o- -W-o-r-l-d [&#39;Welcome&#39;, &#39;to&#39;, &#39;Python&#39;] . a = 8 == 12 print(a, type(a)) b = &#39;apple&#39; == &#39;APPLE&#39; print(b,type(b)) c = 8 != 12 print(c, type(c)) . False &lt;class &#39;bool&#39;&gt; False &lt;class &#39;bool&#39;&gt; True &lt;class &#39;bool&#39;&gt; .",
            "url": "https://fastpages.fast.ai/2021/05/25/%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95%EA%B3%BC%EC%97%B0%EC%82%B0.html",
            "relUrl": "/2021/05/25/%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95%EA%B3%BC%EC%97%B0%EC%82%B0.html",
            "date": " • May 25, 2021"
        }
        
    
  
    
        ,"post9": {
            "title": "Title",
            "content": ". &#44061;&#52404;&#51032; &#51088;&#47308;&#54805; &#54869;&#51064; type() . a = 5 b = 3.13 c = &#39;3.14&#39; d = &quot;3,14&quot; e = -3.14 f = &#39;abc&#39; + &#39;가나다&#39; g = &#39;123&#39;*3 print(type(a),type(b),type(c),type(d),type(e),type(f),type(g)) print(f) print(g) . &lt;class &#39;int&#39;&gt; &lt;class &#39;float&#39;&gt; &lt;class &#39;str&#39;&gt; &lt;class &#39;str&#39;&gt; &lt;class &#39;float&#39;&gt; &lt;class &#39;str&#39;&gt; &lt;class &#39;str&#39;&gt; abc가나다 123123123 . &#48320;&#49688;&#47749; &#50640;&#47084; &#50976;&#54805; . # f**t = &#39;첫번째&#39; / 문자사용 x(언더바 제외) # f^st = &#39;첫번째&#39; / 문자사용 x(언더바 제외) Temp = 1000 # print(temp) / temp와 Temp는 구분된다. (대소문자 구분) # print = &#39;출력합니다.&#39; / 함수를 변수로 사용할 수 없습니다. # print(print) / 함수를 변수로 사용할 수 없습니다. . &#54028;&#51060;&#50028; &#50672;&#49328; . # 하지만 계산후 결과값은 일회성으로 보여지기만 합니다. # 결과나 과정, 변환된 값을 유지해야하는 경우 프로그램에서 변수가 필요합니다. print(100+200) print(&quot;Hello world&quot;) . 300 Hello world . temp = 100 # temp 라는 변수를 만들고 temp 공간에 100 을 넣는다는 의미 temp # temp 값을 확인하겠다는 의미입니다. 코랩 외의 환경에서는 print(temp) . 100 . temp2 = 200 print(temp2) # 코랩 외의 환경에서는 print(temp) . 200 . temp3 = temp + temp2 # temp3에 temp의 값과 temp2 을 더해서 넣는다 temp3 . 300 . &#47532;&#49828;&#53944; [] . list0 = [1,3,7,5,3,6,8,10,5,&#39;마지막&#39;] print(list0) . [1, 3, 7, 5, 3, 6, 8, 10, 5, &#39;마지막&#39;] . len(list0) #list0 배열 원소값을 요청 (몇개?) # len은 문자열의 길이도 구할 수 있습니다. . 10 . print(list0[0]) #list1배열의 첫번째 원소값을 출력 print(list0[-1]) #list1배열의 마지막 원소값을 출력 #list 배열의 마지막 원소값을 문자열과 함께 출력 print(&#39;list1 배열의 마지막 원소값은&#39; + &#39; &quot;&#39;+ str(list1[-1]) + &#39;&quot;&#39; + &#39;입니다&#39;) . 1 마지막 list1 배열의 마지막 원소값은 &#34;마지막&#34;입니다 . print(list0[2:6]) #index2(3번째 원소)부터 5까지 출력 print(list0[2:]) print(list0[:6]) print(list0[:-1]) . [7, 5, 3, 6] [7, 5, 3, 6, 8, 10, 5, &#39;마지막&#39;] [1, 3, 7, 5, 3, 6] [1, 3, 7, 5, 3, 6, 8, 10, 5] . range&#47484; &#49324;&#50857;&#54644;&#49436; &#47532;&#49828;&#53944; &#47564;&#46308;&#44592; . list_rg1 = list(range(11)) #0부터 10까지 list_rg2 = list(range(5,12)) #5부터 11까지 list_rg3 = list(range(-4,5,2)) #-4부터 4까지 2씩 증가 list_rg4 = list(range(20,-1,-1)) #20부터 0까지 -1씩 감소 list_rg5 = list(&#39;hello world&#39;) #문자 하나씩 리스트 원소로 들어간다 print(&quot;list_rg1은&quot; , list_rg1) print(&quot;list_rg2은&quot; , list_rg2) print(&quot;list_rg3은&quot; , list_rg3) print(&quot;list_rg4은&quot; , list_rg4) print(&quot;list_rg5은&quot; , list_rg5) . list_rg1은 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] list_rg2은 [5, 6, 7, 8, 9, 10, 11] list_rg3은 [-4, -2, 0, 2, 4] list_rg4은 [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] list_rg5은 [&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39; &#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;] . &#50836;&#49548;&#51032; &#44050; &#54624;&#45817; &#48143; &#49325;&#51228;&#54616;&#44592; . list_rg5[0] = &#39;H&#39; print(&quot;list_rg5의 0번째 요소 대문자로 수정&quot;, list_rg5) del list_rg5[5] #index 5(6번째)에 위치한 띄어쓰기 삭제 print(&quot;list_rg5의 5번째 요소 삭제&quot;, list_rg5) . list_rg5의 0번째 요소 대문자로 수정 [&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39; &#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;] list_rg5의 5번째 요소 삭제 [&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;] . &#53916;&#54540;() . 요소를 변경, 추가, 삭제 불가. 튜플은 읽기 전용 리스트다. . &#46357;&#49492;&#45320;&#47532;{} . For&#47928; (&#48152;&#48373;&#47928;) . for i in range(0,3,1): print(i, &#39;for문을 공부하고 있습니다&#39;) . 0 for문을 공부하고 있습니다 1 for문을 공부하고 있습니다 2 for문을 공부하고 있습니다 . for x in range(5): print(x) . 0 1 2 3 4 . sum = 0 start = 1 end = 11 for x in range(start,end): sum += x print(&#39;x:&#39;, x, &#39;sum:&#39;, sum) print(&#39;-&#39;*50) print(start, &#39;부터&#39;, end-1, &#39;까지 더한 총합은&#39;, sum,&#39;입니다&#39;) . x: 1 sum: 1 x: 2 sum: 3 x: 3 sum: 6 x: 4 sum: 10 x: 5 sum: 15 x: 6 sum: 21 x: 7 sum: 28 x: 8 sum: 36 x: 9 sum: 45 x: 10 sum: 55 -- 1 부터 10 까지 더한 총합은 55 입니다 . def grade(score): if score &gt;= 90: print(&#39;A&#39;) elif score &gt;=80: print(&#39;B&#39;) elif score &gt;=70: print(&#39;C&#39;) elif score &gt;=60: print(&#39;D&#39;) else : print(&#39;F&#39;) score = int(input(&#39;점수를 입력해주세요&#39;)) print(grade(score)) . &#47004;&#45924;&#51004;&#47196; &#52628;&#52636;&#54616;&#44592; random.randint() . random.randint(start, end) *randint는 뒤의 숫자도 포함! . import random list_DT = [&#39;람쥐&#39;, &#39;JYP&#39;, &#39;여름&#39;, &#39;유니콘&#39;, &#39;자룡&#39; , &#39;DB&#39;, &#39;전봇대&#39;] index = random.randint(0,len(list_DT)-1) print(rand_num, &quot;발표자는 &quot;+list_DT[index]+&quot;입니다&quot;) . 4 발표자는 유니콘입니다 .",
            "url": "https://fastpages.fast.ai/2021/05/24/%ED%8C%8C%EC%9D%B4%EC%8D%AC%EA%B8%B0%EC%B4%88.html",
            "relUrl": "/2021/05/24/%ED%8C%8C%EC%9D%B4%EC%8D%AC%EA%B8%B0%EC%B4%88.html",
            "date": " • May 24, 2021"
        }
        
    
  
    
        ,"post10": {
            "title": "nbdev + GitHub Codespaces: A New Literate Programming Environment",
            "content": "Today, we are going to show you how to set up a literate programming environment, allowing you to use an IDE (VS Code) and an interactive computing environment (Jupyter), without leaving your browser, for free, in under 5 minutes. You’ll even see how VSCode and Jupyter work together automatically! But first, what is literate programming? And how did I go from skeptic to a zealot of literate programming? . Introduction . Literate programming is a programming paradigm introduced by Donald Knuth in which a computer program is given an explanation of its logic in a natural language, such as English, interspersed with snippets of macros and traditional source code, from which compilable source code can be generated. According to Knuth, literate programming provides higher-quality programs by forcing programmers to explicitly state the thoughts behind the program. This process makes poorly thought-out design decisions more obvious. Knuth also claims that literate programming provides a first-rate documentation system, which is not an add-on, but is grown naturally in the process of exposition of one’s thoughts during a program’s creation. 1 . When I first learned about literate programming, I was quite skeptical. For the longest time, I had wrongly equated Jupyter notebooks with literate programming. Indeed, Jupyter is a brilliant interactive computing system, which was awarded the Association of Computing Machinery (ACM) Software System Award, and is loved by many developers. However, Jupyter falls short of the literate programming paradigm for the following reasons:2 . It can be difficult to compile source code from notebooks. | It can be difficult to diff and use version control with notebooks because they are not stored in plain text. | It is not clear how to automatically generate documentation from notebooks. | It is not clear how to properly run tests suites when writing code in notebooks. | . My skepticism quickly evaporated when I began using nbdev, a project that extends notebooks to complete the literate programming ideal. I spent a month, full time, using nbdev while contributing to the python library fastcore, and can report that Donald Knuth was definitely onto something. The process of writing prose and tests alongside code forced me to deeply understand why the code does what it does, and to think deeply about its design. Furthermore, the reduced cognitive load and speed of iteration of having documentation, code, and tests in one location boosted my productivity to levels I have never before experienced as a software developer. Furthermore, I found that developing this way bolstered collaboration such that code reviews not only happened faster but were more meaningful. In short, nbdev may be the most profound productivity tool I have ever used. . As a teaser, look how easy it is to instantiate this literate programming environment, which includes a notebook, a docs site and an IDE with all dependencies pre-installed! :point_down: . . Features of nbdev . As discussed in the docs, nbdev provides the following features: . Searchable, hyperlinked documentation, which can be automatically hosted on GitHub Pages for free. | Python modules, following best practices such as automatically defining __all__ with your exported functions, classes, and variables. | Pip and Conda installers. | Tests defined directly in notebooks which run in parallel. This testing system has been thoroughly tested with GitHub Actions. | Navigate and edit your code in a standard text editor or IDE, and export any changes automatically back into your notebooks. | . Since you are in a notebook, you can also add charts, text, links, images, videos, etc, that are included automatically in the documentation of your library, along with standardized documentation generated automatically from your code. This site is an example of docs generated automatically by nbdev. . GitHub Codespaces . Thanks to Conda and nbdev_template, setting up a development environment with nbdev is far easier than it used to be. However, we realized it could be even easier, thanks to a new GitHub product called Codespaces. Codespaces is a fully functional development environment in your browser, accessible directly from GitHub, that provides the following features: . A full VS Code IDE. | An environment that has files from the repository mounted into the environment, along with your GitHub credentials. | A development environment with dependencies pre-installed, backed by Docker. | The ability to serve additional applications on arbitrary ports. For nbdev, we serve a Jupyter notebook server as well as a Jekyll based documentation site. | A shared file system, which facilitates editing code in one browser tab and rendering the results in another. | … and more. | Codespaces enables developers to immediately participate in a project without wasting time on DevOps or complicated setup steps. Most importantly, CodeSpaces with nbdev allows developers to quickly get started with creating their own software with literate programming. . A demo of nbdev + Codespaces . This demo uses the project fastai/fastcore, which was built with nbdev, as an example. First, we can navigate to this repo and launch a Codespace: . . If you are launching a fresh Codespace, it may take several minutes to set up. Once the environment is ready, we can verify that all dependencies we want are installed (in this case fastcore and nbdev): . . Additionally, we can serve an arbitrary number of applications on user-specified ports, which we can open through VSCode as shown below: . . In this case, these applications are a notebook and docs site. Changes to a notebook are reflected immediately in the data docs. Furthermore, we can use the cli command nbdev_build_lib to sync our notebooks with python modules. This functionality is shown below: . . This is amazing! With a click of a button, I was able to: . Launch an IDE with all dependencies pre-installed. | Launch two additional applications: a Jupyter Notebook server on port 8080 and a docs site on port 4000. | Automatically update the docs and modules every time I make a change to a Jupyter notebook. | This is just the tip of the iceberg. There are additional utilities for writing and executing tests, diffing notebooks, special flags for hiding, showing, and collapsing cells in the generated docs, as well as git hooks for automation. This and more functionality is covered in the nbdev docs. . Give It A Try For Yourself . To try out nbdev yourself, take this tutorial, which will walk you through everything you need to know. The tutorial also shows you how to use a repository template with the configuration files necessary to enable Codespaces with nbdev. . You Can Write Blogs With Notebooks, Too! . This blog post was written in fastpages which is also built on nbdev! We recommend fastpages if you want an easy way to blog with Jupyter notebooks. . Additional Resources . The GitHub Codepaces site. | The official docs for Codespaces. | The nbdev docs. | The nbdev GitHub repo. | fastpages: The project used to write this blog. | The GitHub repo fastai/fastcore, which is what we used in this blog post as an example. | . Wikipedia article: Literate Programming &#8617; . | This is not a criticism of Jupyter. Jupyter doesn’t claim to be a full literate programming system. However, people can sometimes (unfairly) judge Jupyter according to this criteria. &#8617; . |",
            "url": "https://fastpages.fast.ai/codespaces",
            "relUrl": "/codespaces",
            "date": " • Dec 10, 2020"
        }
        
    
  
    
        ,"post11": {
            "title": "Introducing fastlinkcheck",
            "content": ". Motivation . Recently, fastai has been hard at work improving and overhauling nbdev, a literate programming environment for python. A key feature of nbdev is automated generation of documentation from Jupyter notebooks. This documentation system adds many niceties, such as the following types of hyperlinks automatically: . Links to source code on GitHub. | Links to both internal and external documentation by introspecting variable names in backticks. | . Because documentation is so easy to create and maintain in nbdev, we find ourselves and others creating much more of it! In addition to automatic hyperlinks, we often include our own links to relevant websites, blogs and videos when documenting code. For example, one of the largest nbdev generated sites, docs.fast.ai, has more than 300 external and internal links at the time of this writing. . The Solution . Due to the continued popularity of fastai and the growth of new nbdev projects, grooming these links manually became quite tedious. We investigated solutions that could verify links for us automatically, but were not satisfied with any existing solutions. These are the features we desired: . A platform independent solution that is not tied to a specific static site generator like Jekyll or Hugo. | Intelligent introspection of external links that are actually internal links. For example, if we are building the site docs.fast.ai, a link to https://docs.fast.ai/tutorial should not result in a web request, but rather introspection of the local file system for the presence of tutorial.html in the right location. | Verification of any links to assets like CSS, data, javascript or other files. | Logs that are well organized that allow us to see each broken link or reference to a non-existent path, and the pages these are found in. | Parallelism to verify links as fast as possible. | Lightweight, easy to install with minimal dependencies. | . We tried tools such as linkchecker and pylinkvalidator, but these required your site to be first be hosted. Since we wanted to check links on a static site, hosting is overhead we wanted to avoid. . This is what led us to create fastlinkcheck, which we discuss below. . Note: For Ruby users, htmlproofer apperas to provide overlapping functionality. We have not tried this library. . A tour of fastlinkcheck . For this tour we will be referring to the files in the fastlinkcheck repo. You should clone this repo in the current directory in order to follow along: . git clone https://github.com/fastai/fastlinkcheck.git cd fastlinkcheck . Cloning into &#39;fastlinkcheck&#39;... remote: Enumerating objects: 135, done. remote: Counting objects: 100% (135/135), done. remote: Compressing objects: 100% (98/98), done. remote: Total 608 (delta 69), reused 76 (delta 34), pack-reused 473 Receiving objects: 100% (608/608), 1.12 MiB | 10.47 MiB/s, done. Resolving deltas: 100% (302/302), done. . Installation . You can install fastlinkcheck with pip: . pip install fastlinkcheck . Usage . After installing fastlinkcheck, the cli command link_check is available from the command line. We can see various options with the --help flag. . link_check --help . usage: link_check [-h] [--host HOST] [--config_file CONFIG_FILE] [--pdb] [--xtra XTRA] path Check for broken links recursively in `path`. positional arguments: path Root directory searched recursively for HTML files optional arguments: -h, --help show this help message and exit --host HOST Host and path (without protocol) of web server --config_file CONFIG_FILE Location of file with urls to ignore --pdb Run in pdb debugger (default: False) --xtra XTRA Parse for additional args (default: &#39;&#39;) . From the root of fastlinkcheck repo, We can search the directory _example/broken_links recursively for broken links like this: . link_check _example/broken_links . ERROR: The Following Broken Links or Paths were found: - &#39;http://fastlinkcheck.com/test.html&#39; was found in the following pages: - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html` - &#39;http://somecdn.com/doesntexist.html&#39; was found in the following pages: - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html` - Path(&#39;/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.js&#39;) was found in the following pages: - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html` . . Specifying the --host parameter allows you detect links that are internal by identifying links with that host name. External links are verified by making a request to the appropriate website. On the other hand, internal links are verified by inspecting the presence and content of local files. . We must be careful when using the --host argument to only pass the host (and path, if necessary) without the protocol. For example, this is how we specify the hostname if your site&#39;s url is http://fastlinkcheck.com/test.html: . link_check _example/broken_links --host fastlinkcheck.com . ERROR: The Following Broken Links or Paths were found: - &#39;http://somecdn.com/doesntexist.html&#39; was found in the following pages: - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html` - Path(&#39;/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.js&#39;) was found in the following pages: - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html` . . We now have one less broken link as there is indeed a file named test.html in the root of the path we are searching. However, if we add a path to the end of --host , such as fastlinkcheck.com/mysite the link would again be listed as broken because _example/broken_links/mysite/test.html does not exist: . link_check _example/broken_links --host fastlinkcheck.com/mysite . ERROR: The Following Broken Links or Paths were found: - &#39;http://fastlinkcheck.com/test.html&#39; was found in the following pages: - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html` - &#39;http://somecdn.com/doesntexist.html&#39; was found in the following pages: - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html` - Path(&#39;/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.js&#39;) was found in the following pages: - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html` . . You can ignore links by creating a text file that contains a list of urls and paths to ignore. For example, the file _example/broken_links/linkcheck.rc contains: . cat _example/broken_links/linkcheck.rc . test.js https://www.google.com . We can use this file to ignore urls and paths with the --config_file argument. This will filter out references to the broken link /test.js from our earlier results: . link_check _example/broken_links --host fastlinkcheck.com --config_file _example/broken_links/linkcheck.rc . ERROR: The Following Broken Links or Paths were found: - &#39;http://somecdn.com/doesntexist.html&#39; was found in the following pages: - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html` . . Finally, if there are no broken links, link_check will not return anything. The directory _example/no_broken_links/ does not contain any HTML files with broken links: . link_check _example/no_broken_links . No broken links found! . Python . You can also use these utilities from python instead of the terminal. Please see these docs for more information. . Using link_check in GitHub Actions . The link_check CLI utility that is installed with fastlinkcheck can be very useful in continuous integration systems like GitHub Actions. Here is an example GitHub Actions workflow that uses link_check: . name: Check Links on: [workflow_dispatch, push] jobs: check-links: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - uses: actions/setup-python@v2 - name: check for broken links run: | pip install fastlinkcheck link_check _example . We can a few more lines of code to open an issue instead when a broken link is found, using the gh cli: . ... - name: check for broken links run: | pip install fastlinkcheck link_check _example 2&gt; err || true export GITHUB_TOKEN=&quot;YOUR_TOKEN&quot; [[ -s err ]] &amp;&amp; gh issue create -t &quot;Broken links found&quot; -b &quot;$(&lt; err)&quot; -R &quot;yourusername/yourrepo&quot; . We can extend this even further to only open an issue when another issue with a specific label isn&#39;t already open: . ... - name: check for broken links run: | pip install fastlinkcheck link_check &quot;docs/_site&quot; --host &quot;docs.fast.ai&quot; 2&gt; err || true export GITHUB_TOKEN=&quot;YOUR_TOKEN&quot; if [[ -z $(gh issue list -l &quot;broken-link&quot;)) &amp;&amp; (-s err) ]]; then gh issue create -t &quot;Broken links found&quot; -b &quot;$(&lt; err)&quot; -l &quot;broken-link&quot; -R &quot;yourusername/yourrepo&quot; fi . See the GitHub Actions docs for more information. . Resources . The following resources are relevant for those interested in learning more about fastlinkcheck: . The fastlinkcheck GitHub repo | The fastlinkcheck docs | .",
            "url": "https://fastpages.fast.ai/fastlinkcheck/",
            "relUrl": "/fastlinkcheck/",
            "date": " • Nov 17, 2020"
        }
        
    
  
    
        ,"post12": {
            "title": "fastcore: An Underrated Python Library",
            "content": ". Background . I recently embarked on a journey to sharpen my python skills: I wanted to learn advanced patterns, idioms, and techniques. I started with reading books on advanced Python, however, the information didn&#39;t seem to stick without having somewhere to apply it. I also wanted the ability to ask questions from an expert while I was learning -- which is an arrangement that is hard to find! That&#39;s when it occurred to me: What if I could find an open source project that has fairly advanced python code and write documentation and tests? I made a bet that if I did this it would force me to learn everything very deeply, and the maintainers would be appreciative of my work and be willing to answer my questions. . And that&#39;s exactly what I did over the past month! I&#39;m pleased to report that it has been the most efficient learning experience I&#39;ve ever experienced. I&#39;ve discovered that writing documentation forced me to deeply understand not just what the code does but also why the code works the way it does, and to explore edge cases while writing tests. Most importantly, I was able to ask questions when I was stuck, and maintainers were willing to devote extra time knowing that their mentorship was in service of making their code more accessible! It turns out the library I choose, fastcore is some of the most fascinating Python I have ever encountered as its purpose and goals are fairly unique. . For the uninitiated, fastcore is a library on top of which many fast.ai projects are built on. Most importantly, fastcore extends the python programming language and strives to eliminate boilerplate and add useful functionality for common tasks. In this blog post, I&#39;m going to highlight some of my favorite tools that fastcore provides, rather than sharing what I learned about python. My goal is to pique your interest in this library, and hopefully motivate you to check out the documentation after you are done to learn more! . Why fastcore is interesting . Get exposed to ideas from other languages without leaving python: I’ve always heard that it is beneficial to learn other languages in order to become a better programmer. From a pragmatic point of view, I’ve found it difficult to learn other languages because I could never use them at work. Fastcore extends python to include patterns found in languages as diverse as Julia, Ruby and Haskell. Now that I understand these tools I am motivated to learn other languages. | You get a new set of pragmatic tools: fastcore includes utilities that will allow you to write more concise expressive code, and perhaps solve new problems. | Learn more about the Python programming language: Because fastcore extends the python programming language, many advanced concepts are exposed during the process. For the motivated, this is a great way to see how many of the internals of python work. | A whirlwind tour through fastcore . Here are some things you can do with fastcore that immediately caught my attention. . . Making **kwargs transparent . Whenever I see a function that has the argument **kwargs, I cringe a little. This is because it means the API is obfuscated and I have to read the source code to figure out what valid parameters might be. Consider the below example: . def baz(a, b=2, c=3, d=4): return a + b + c def foo(c, a, **kwargs): return c + baz(a, **kwargs) inspect.signature(foo) . &lt;Signature (c, a, **kwargs)&gt; . Without reading the source code, it might be hard for me to know that foo also accepts and additional parameters b and d. We can fix this with delegates: . def baz(a, b=2, c=3, d=4): return a + b + c @delegates(baz) # this decorator will pass down keyword arguments from baz def foo(c, a, **kwargs): return c + baz(a, **kwargs) inspect.signature(foo) . &lt;Signature (c, a, b=2, d=4)&gt; . You can customize the behavior of this decorator. For example, you can have your cake and eat it too by passing down your arguments and also keeping **kwargs: . @delegates(baz, keep=True) def foo(c, a, **kwargs): return c + baz(a, **kwargs) inspect.signature(foo) . &lt;Signature (c, a, b=2, d=4, **kwargs)&gt; . You can also exclude arguments. For example, we exclude argument d from delegation: . def basefoo(a, b=2, c=3, d=4): pass @delegates(basefoo, but=[&#39;d&#39;]) # exclude `d` def foo(c, a, **kwargs): pass inspect.signature(foo) . &lt;Signature (c, a, b=2)&gt; . You can also delegate between classes: . class BaseFoo: def __init__(self, e, c=2): pass @delegates()# since no argument was passsed here we delegate to the superclass class Foo(BaseFoo): def __init__(self, a, b=1, **kwargs): super().__init__(**kwargs) inspect.signature(Foo) . &lt;Signature (a, b=1, c=2)&gt; . For more information, read the docs on delegates. . . Avoid boilerplate when setting instance attributes . Have you ever wondered if it was possible to avoid the boilerplate involved with setting attributes in __init__? . class Test: def __init__(self, a, b ,c): self.a, self.b, self.c = a, b, c . Ouch! That was painful. Look at all the repeated variable names. Do I really have to repeat myself like this when defining a class? Not Anymore! Checkout store_attr: . class Test: def __init__(self, a, b, c): store_attr() t = Test(5,4,3) assert t.b == 4 . You can also exclude certain attributes: . class Test: def __init__(self, a, b, c): store_attr(but=[&#39;c&#39;]) t = Test(5,4,3) assert t.b == 4 assert not hasattr(t, &#39;c&#39;) . There are many more ways of customizing and using store_attr than I highlighted here. Check out the docs for more detail. . P.S. you might be thinking that Python dataclasses also allow you to avoid this boilerplate. While true in some cases, store_attr is more flexible.1 . 1. For example, store_attr does not rely on inheritance, which means you won&#39;t get stuck using multiple inheritance when using this with your own classes. Also, unlike dataclasses, store_attr does not require python 3.7 or higher. Furthermore, you can use store_attr anytime in the object lifecycle, and in any location in your class to customize the behavior of how and when variables are stored.↩ . . Avoiding subclassing boilerplate . One thing I hate about python is the __super__().__init__() boilerplate associated with subclassing. For example: . class ParentClass: def __init__(self): self.some_attr = &#39;hello&#39; class ChildClass(ParentClass): def __init__(self): super().__init__() cc = ChildClass() assert cc.some_attr == &#39;hello&#39; # only accessible b/c you used super . We can avoid this boilerplate by using the metaclass PrePostInitMeta. We define a new class called NewParent that is a wrapper around the ParentClass: . class NewParent(ParentClass, metaclass=PrePostInitMeta): def __pre_init__(self, *args, **kwargs): super().__init__() class ChildClass(NewParent): def __init__(self):pass sc = ChildClass() assert sc.some_attr == &#39;hello&#39; . . Type Dispatch . Type dispatch, or Multiple dispatch, allows you to change the way a function behaves based upon the input types it receives. This is a prominent feature in some programming languages like Julia. For example, this is a conceptual example of how multiple dispatch works in Julia, returning different values depending on the input types of x and y: . collide_with(x::Asteroid, y::Asteroid) = ... # deal with asteroid hitting asteroid collide_with(x::Asteroid, y::Spaceship) = ... # deal with asteroid hitting spaceship collide_with(x::Spaceship, y::Asteroid) = ... # deal with spaceship hitting asteroid collide_with(x::Spaceship, y::Spaceship) = ... # deal with spaceship hitting spaceship . Type dispatch can be especially useful in data science, where you might allow different input types (i.e. Numpy arrays and Pandas dataframes) to a function that processes data. Type dispatch allows you to have a common API for functions that do similar tasks. . Unfortunately, Python does not support this out-of-the box. Fortunately, there is the @typedispatch decorator to the rescue. This decorator relies upon type hints in order to route inputs the correct version of the function: . @typedispatch def f(x:str, y:str): return f&#39;{x}{y}&#39; @typedispatch def f(x:np.ndarray): return x.sum() @typedispatch def f(x:int, y:int): return x+y . Below is a demonstration of type dispatch at work for the function f: . f(&#39;Hello &#39;, &#39;World!&#39;) . &#39;Hello World!&#39; . f(2,3) . 5 . f(np.array([5,5,5,5])) . 20 . There are limitations of this feature, as well as other ways of using this functionality that you can read about here. In the process of learning about typed dispatch, I also found a python library called multipledispatch made by Mathhew Rocklin (the creator of Dask). . After using this feature, I am now motivated to learn languages like Julia to discover what other paradigms I might be missing. . . A better version of functools.partial . functools.partial is a great utility that creates functions from other functions that lets you set default values. Lets take this function for example that filters a list to only contain values &gt;= val: . test_input = [1,2,3,4,5,6] def f(arr, val): &quot;Filter a list to remove any values that are less than val.&quot; return [x for x in arr if x &gt;= val] f(test_input, 3) . [3, 4, 5, 6] . You can create a new function out of this function using partial that sets the default value to 5: . filter5 = partial(f, val=5) filter5(test_input) . [5, 6] . One problem with partial is that it removes the original docstring and replaces it with a generic docstring: . filter5.__doc__ . &#39;partial(func, *args, **keywords) - new function with partial application n of the given arguments and keywords. n&#39; . fastcore.utils.partialler fixes this, and makes sure the docstring is retained such that the new API is transparent: . filter5 = partialler(f, val=5) filter5.__doc__ . &#39;Filter a list to remove any values that are less than val.&#39; . . Composition of functions . A technique that is pervasive in functional programming languages is function composition, whereby you chain a bunch of functions together to achieve some kind of result. This is especially useful when applying various data transformations. Consider a toy example where I have three functions: (1) Removes elements of a list less than 5 (from the prior section) (2) adds 2 to each number (3) sums all the numbers: . def add(arr, val): return [x + val for x in arr] def arrsum(arr): return sum(arr) # See the previous section on partialler add2 = partialler(add, val=2) transform = compose(filter5, add2, arrsum) transform([1,2,3,4,5,6]) . 15 . But why is this useful? You might me thinking, I can accomplish the same thing with: . arrsum(add2(filter5([1,2,3,4,5,6]))) . You are not wrong! However, composition gives you a convenient interface in case you want to do something like the following: . def fit(x, transforms:list): &quot;fit a model after performing transformations&quot; x = compose(*transforms)(x) y = [np.mean(x)] * len(x) # its a dumb model. Don&#39;t judge me return y # filters out elements &lt; 5, adds 2, then predicts the mean fit(x=[1,2,3,4,5,6], transforms=[filter5, add2]) . [7.5, 7.5] . For more information about compose, read the docs. . . A more useful __repr__ . In python, __repr__ helps you get information about an object for logging and debugging. Below is what you get by default when you define a new class. (Note: we are using store_attr, which was discussed earlier). . class Test: def __init__(self, a, b=2, c=3): store_attr() # `store_attr` was discussed previously Test(1) . &lt;__main__.Test at 0x7ffcd766cee0&gt; . We can use basic_repr to quickly give us a more sensible default: . class Test: def __init__(self, a, b=2, c=3): store_attr() __repr__ = basic_repr(&#39;a,b,c&#39;) Test(2) . Test(a=2, b=2, c=3) . . Monkey Patching With A Decorator . It can be convenient to monkey patch with a decorator, which is especially helpful when you want to patch an external library you are importing. We can use the decorator @patch from fastcore.foundation along with type hints like so: . class MyClass(int): pass @patch def func(self:MyClass, a): return self+a mc = MyClass(3) . Now, MyClass has an additional method named func: . mc.func(10) . 13 . Still not convinced? I&#39;ll show you another example of this kind of patching in the next section. . . A better pathlib.Path . When you see these extensions to pathlib.path you won&#39;t ever use vanilla pathlib again! A number of additional methods have been added to pathlib, such as: . Path.readlines: same as with open(&#39;somefile&#39;, &#39;r&#39;) as f: f.readlines() | Path.read: same as with open(&#39;somefile&#39;, &#39;r&#39;) as f: f.read() | Path.save: saves file as pickle | Path.load: loads pickle file | Path.ls: shows the contents of the path as a list. | etc. | . Read more about this here. Here is a demonstration of ls: . from fastcore.utils import * from pathlib import Path p = Path(&#39;.&#39;) p.ls() # you don&#39;t get this with vanilla Pathlib.Path!! . (#7) [Path(&#39;2020-09-01-fastcore.ipynb&#39;),Path(&#39;README.md&#39;),Path(&#39;fastcore_imgs&#39;),Path(&#39;2020-02-20-test.ipynb&#39;),Path(&#39;.ipynb_checkpoints&#39;),Path(&#39;2020-02-21-introducing-fastpages.ipynb&#39;),Path(&#39;my_icons&#39;)] . Wait! What&#39;s going on here? We just imported pathlib.Path - why are we getting this new functionality? Thats because we imported the fastcore.utils module, which patches this module via the @patch decorator discussed earlier. Just to drive the point home on why the @patch decorator is useful, I&#39;ll go ahead and add another method to Path right now: . @patch def fun(self:Path): return &quot;This is fun!&quot; p.fun() . &#39;This is fun!&#39; . That is magical, right? I know! That&#39;s why I&#39;m writing about it! . . An Even More Concise Way To Create Lambdas . Self, with an uppercase S, is an even more concise way to create lambdas that are calling methods on an object. For example, let&#39;s create a lambda for taking the sum of a Numpy array: . arr=np.array([5,4,3,2,1]) f = lambda a: a.sum() assert f(arr) == 15 . You can use Self in the same way: . f = Self.sum() assert f(arr) == 15 . Let&#39;s create a lambda that does a groupby and max of a Pandas dataframe: . import pandas as pd df=pd.DataFrame({&#39;Some Column&#39;: [&#39;a&#39;, &#39;a&#39;, &#39;b&#39;, &#39;b&#39;, ], &#39;Another Column&#39;: [5, 7, 50, 70]}) f = Self.groupby(&#39;Some Column&#39;).mean() f(df) . Another Column . Some Column . a 6 | . b 60 | . Read more about Self in the docs). . . Notebook Functions . These are simple but handy, and allow you to know whether or not code is executing in a Jupyter Notebook, Colab, or an Ipython Shell: . from fastcore.imports import in_notebook, in_colab, in_ipython in_notebook(), in_colab(), in_ipython() . (True, False, True) . This is useful if you are displaying certain types of visualizations, progress bars or animations in your code that you may want to modify or toggle depending on the environment. . . A Drop-In Replacement For List . You might be pretty happy with Python&#39;s list. This is one of those situations that you don&#39;t know you needed a better list until someone showed one to you. Enter L, a list like object with many extra goodies. . The best way I can describe L is to pretend that list and numpy had a pretty baby: . define a list (check out the nice __repr__ that shows the length of the list!) . L(1,2,3) . (#3) [1,2,3] . Shuffle a list: . p = L.range(20).shuffle() p . (#20) [8,7,5,12,14,16,2,15,19,6...] . Index into a list: . p[2,4,6] . (#3) [5,14,2] . L has sensible defaults, for example appending an element to a list: . 1 + L(2,3,4) . (#4) [1,2,3,4] . There is much more L has to offer. Read the docs to learn more. . But Wait ... There&#39;s More! . There are more things I would like to show you about fastcore, but there is no way they would reasonably fit into a blog post. Here is a list of some of my favorite things that I didn&#39;t demo in this blog post: . Utilities . The Basics section contain many shortcuts to perform common tasks or provide an additional interface to what standard python provides. . mk_class: quickly add a bunch of attributes to a class | wrap_class: add new methods to a class with a simple decorator | groupby: similar to Scala&#39;s groupby | merge: merge dicts | fasttuple: a tuple on steroids | Infinite Lists: useful for padding and testing | chunked: for batching and organizing stuff | . Multiprocessing . The Multiprocessing section extends python&#39;s multiprocessing library by offering features like: . progress bars | ability to pause to mitigate race conditions with external services | processing things in batches on each worker, ex: if you have a vectorized operation to perform in chunks | . Functional Programming . The functional programming section is my favorite part of this library. . maps: a map that also composes functions | mapped: A more robust map | using_attr: compose a function that operates on an attribute | . Transforms . Transforms is a collection of utilities for creating data transformations and associated pipelines. These transformation utilities build upon many of the building blocks discussed in this blog post. . Further Reading . It should be noted that you should read the main page of the docs first, followed by the section on tests to fully understand the documentation. . The fastcore documentation site. | The fastcore GitHub repo. | Blog post on delegation. | . Shameless plug: fastpages . This blog post was written entirely in a Jupyter Notebook, which GitHub automatically converted into to a blog post! Sound interesting? Check out fastpages. .",
            "url": "https://fastpages.fast.ai/fastcore/",
            "relUrl": "/fastcore/",
            "date": " • Sep 1, 2020"
        }
        
    
  
    
        ,"post13": {
            "title": "GitHub Actions: Providing Data Scientists With New Superpowers",
            "content": "What Superpowers? . Hi, I’m Hamel Husain. I’m a machine learning engineer at GitHub. Recently, GitHub released a new product called GitHub Actions, which has mostly flown under the radar in the machine learning and data science community as just another continuous integration tool. . Recently, I’ve been able to use GitHub Actions to build some very unique tools for Data Scientists, which I want to share with you today. Most importantly, I hope to get you excited about GitHub Actions, and the promise it has for giving you new superpowers as a Data Scientist. Here are two projects I recently built with Actions that show off its potential: . fastpages . fastpages is an automated, open-source blogging platform with enhanced support for Jupyter notebooks. You save your notebooks, markdown, or Word docs into a directory on GitHub, and they automatically become blog posts. Read the announcement below: . We&#39;re launching `fastpages`, a platform which allows you to host a blog for free, with no ads. You can blog with @ProjectJupyter notebooks, @office Word, directly from @github&#39;s markdown editor, etc.Nothing to install, &amp; setup is automated!https://t.co/dNSA0oQUrN . &mdash; Jeremy Howard (@jeremyphoward) February 24, 2020 Machine Learning Ops . Wouldn’t it be cool if you could invoke a chatbot natively on GitHub to test your machine learning models on the infrastructure of your choice (GPUs), log all the results, and give you a rich report back in a pull request so that everyone could see the results? You can with GitHub Actions! . Consider the below annotated screenshot of this Pull Request: . . A more in-depth explanation about the above project can be viewed in this video: . Using GitHub Actions for machine learning workflows is starting to catch on. Julien Chaumond, CTO of Hugging Face, says: . GitHub Actions are great because they let us do CI on GPUs (as most of our users use the library on GPUs not on CPUs), on our own infra! 1 . Additionally, you can host a GitHub Action for other people so others can use parts of your workflow without having to re-create your steps. I provide examples of this below. . A Gentle Introduction To GitHub Actions . What Are GitHub Actions? . GitHub Actions allow you to run arbitrary code in response to events. Events are activities that happen on GitHub such as: . Opening a pull request | Making an issue comment | Labeling an issue | Creating a new branch | … and many more | . When an event is created, the GitHub Actions context is hydrated with a payload containing metadata for that event. Below is an example of a payload that is received when an issue is created: . { &quot;action&quot;: &quot;created&quot;, &quot;issue&quot;: { &quot;id&quot;: 444500041, &quot;number&quot;: 1, &quot;title&quot;: &quot;Spelling error in the README file&quot;, &quot;user&quot;: { &quot;login&quot;: &quot;Codertocat&quot;, &quot;type&quot;: &quot;User&quot;, }, &quot;labels&quot;: [ { &quot;id&quot;: 1362934389, &quot;node_id&quot;: &quot;MDU6TGFiZWwxMzYyOTM0Mzg5&quot;, &quot;name&quot;: &quot;bug&quot;, } ], &quot;body&quot;: &quot;It looks like you accidently spelled &#39;commit&#39; with two &#39;t&#39;s.&quot; } . This functionality allows you to respond to various events on GitHub in an automated way. In addition to this payload, GitHub Actions also provide a plethora of variables and environment variables that afford easy to access metadata such as the username and the owner of the repo. Additionally, other people can package useful functionality into an Action that other people can inherit. For example, consider the below Action that helps you publish python packages to PyPi: . The Usage section describes how this Action can be used: . - name: Publish a Python distribution to PyPI uses: pypa/gh-action-pypi-publish@master with: user: __token__ password: ${{ secrets.pypi_password }} . This Action expects two inputs: user and a password. You will notice that the password is referencing a variable called secrets, which is a variable that contains an encrypted secret that you can upload to your GitHub repository. There are thousands of Actions (that are free) for a wide variety of tasks that can be discovered on the GitHub Marketplace. The ability to inherit ready-made Actions in your workflow allows you to accomplish complex tasks without implementing all of the logic yourself. Some useful Actions for those getting started are: . actions/checkout: Allows you to quickly clone the contents of your repository into your environment, which you often want to do. This does a number of other things such as automatically mount your repository’s files into downstream Docker containers. | mxschmitt/action-tmate: Proivdes a way to debug Actions interactively. This uses port forwarding to give you a terminal in the browser that is connected to your Actions runner. Be careful not to expose sensitive information if you use this. | actions/github-script: Gives you a pre-authenticated ocotokit.js client that allows you to interact with the GitHub API to accomplish almost any task on GitHub automatically. Only these endpoints are supported (for example, the secrets endpoint is not in that list). | . In addition to the aforementioned Actions, it is helpful to go peruse the official GitHub Actions docs before diving in. . Example: A fastpages Action Workflow . The best to way familiarize yourself with Actions is by studying examples. Let’s take a look at the Action workflow that automates the build of fastpages (the platform used to write this blog post). . Part 1: Define Workflow Triggers . First, we define triggers in ci.yaml. Like all Actions workflows, this is a YAML file located in the .github/workflows directory of the GitHub repo. . The top of this YAML file looks like this: . name: CI on: push: branches: - master pull_request: . This means that this workflow is triggered on either a push or pull request event. Furthermore, push events are filtered such that only pushes to the master branch will trigger the workflow, whereas all pull requests will trigger this workflow. It is important to note that pull requests opened from forks will have read-only access to the base repository and cannot access any secrets for security reasons. The reason for defining the workflow in this way is we wanted to trigger the same workflow to test pull requests as well as build and deploy the website when a PR is merged into master. This will be clarified as we step through the rest of the YAML file. . Part 2: Define Jobs . Next, we define jobs (there is only one in this workflow). Per the docs: . A workflow run is made up of one or more jobs. Jobs run in parallel by default. . jobs: build-site: if: ( github.event.commits[0].message != &#39;Initial commit&#39; ) || github.run_number &gt; 1 runs-on: ubuntu-latest steps: . The keyword build-site is the name of your job and you can name it whatever you want. In this case, we have a conditional if statement that dictates if this job should be run or not. We are trying to ensure that this workflow does not run when the first commit to a repo is made with the message ‘Initial commit’. The first variable in the if statement, github.event, contains a json payload of the event that triggered this workflow. When developing workflows, it is helpful to print this variable in order to inspect its structure, which you can accomplish with the following YAML: . - name: see payload run: | echo &quot;PAYLOAD: n${PAYLOAD} n&quot; env: PAYLOAD: ${{ toJSON(github.event) }} . Note: the above step is only for debugging and is not currently in the workflow. . toJson is a handy function that returns a pretty-printed JSON representation of the variable. The output is printed directly in the logs contained in the Actions tab of your repo. In this example, printing the payload for a push event will look like this (truncated for brevity): . { &quot;ref&quot;: &quot;refs/tags/simple-tag&quot;, &quot;before&quot;: &quot;6113728f27ae8c7b1a77c8d03f9ed6e0adf246&quot;, &quot;created&quot;: false, &quot;deleted&quot;: true, &quot;forced&quot;: false, &quot;base_ref&quot;: null, &quot;commits&quot;: [ { &quot;message&quot;: &quot;updated README.md&quot;, &quot;author&quot;: &quot;hamelsmu&quot; }, ], &quot;head_commit&quot;: null, } . Therefore, the variable github.event.commits[0].message will retrieve the first commit message in the array of commits. Since we are looking for situations where there is only one commit, this logic suffices. The second variable in the if statement, github.run_number is a special variable in Actions which: . [is a] unique number for each run of a particular workflow in a repository. This number begins at 1 for the workflow’s first run, and increments with each new run. This number does not change if you re-run the workflow run. . Therefore, the if statement introduced above: . if: ( github.event.commits[0].message != &#39;Initial commit&#39; ) || github.run_number &gt; 1 . Allows the workflow to run when the commit message is “Initial commit” as long as it is not the first commit. ( || is a logical or operator). . Finally, the line runs-on: ubuntu-latest specifies the host operating system that your workflows will run in. . Part 3: Define Steps . Per the docs: . A job contains a sequence of tasks called steps. Steps can run commands, run setup tasks, or run an Action in your repository, a public repository, or an Action published in a Docker registry. Not all steps run Actions, but all Actions run as a step. Each step runs in its own process in the runner environment and has access to the workspace and filesystem. Because steps run in their own process, changes to environment variables are not preserved between steps. GitHub provides built-in steps to set up and complete a job. . Below are the first two steps in our workflow: . - name: Copy Repository Contents uses: actions/checkout@master with: persist-credentials: false - name: convert notebooks and word docs to posts uses: ./_action_files . The first step creates a copy of your repository in the Actions file system, with the help of the utility action/checkout. This utility only fetches the last commit by default and saves files into a directory (whose path is stored in the environment variable GITHUB_WORKSPACE that is accessible by subsequent steps in your job. The second step runs the fastai/fastpages Action, which converts notebooks and word documents to blog posts automatically. In this case, the syntax: . uses: ./_action_files . is a special case where the pre-made GitHub Action we want to run happens to be defined in the same repo that runs this workflow. This syntax allows us to test changes to this pre-made Action when evaluating PRs by referencing the directory in the current repository that defines that pre-made Action. Note: Building pre-made Actions is beyond the scope of this tutorial. . The next three steps in our workflow are defined below: . - name: setup directories for Jekyll build run: | rm -rf _site sudo chmod -R 777 . - name: Jekyll build uses: docker://fastai/fastpages-jekyll with: args: bash -c &quot;gem install bundler &amp;&amp; jekyll build -V&quot; env: JEKYLL_ENV: &#39;production&#39; - name: copy CNAME file into _site if CNAME exists run: | sudo chmod -R 777 _site/ cp CNAME _site/ 2&gt;/dev/null || : . The step named setup directories for Jekyll build executes shell commands that remove the _site folder in order to get rid of stale files related to the page we want to build, as well as grant permissions to all the files in our repo to subsequent steps. . The step named Jekyll build executes a docker container hosted by the Jekyll community on Dockerhub called jekyll/jekyll. For those not familiar with Docker, see this tutorial. The name of this container is called fastai/fastpages-jekyll because I’m adding some additional dependencies to jekyll/jekyll and hosting those on my DockerHub account for faster build times2. The args parameter allows you to execute arbitrary commands with the Docker container by overriding the CMD instruction in the Dockerfile. We use this Docker container hosted on Dockerhub so we don’t have to deal with installing and configuring all of the complicated dependencies for Jekyll. The files from our repo are already available in the Actions runtime due to the first step in this workflow, and are mounted into this Docker container automatically for us. In this case, we are running the command jekyll build, which builds our website and places relevant assets them into the _site folder. For more information about Jekyll, read the official docs. Finally, the env parameter allows me to pass an environment variable into the Docker container. . The final command above copies a CNAME file into the _site folder, which we need for the custom domain https://fastpages.fast.ai. Setting up custom domains are outside the scope of this article. . The final step in our workflow is defined below: . - name: Deploy if: github.event_name == &#39;push&#39; uses: peaceiris/actions-gh-pages@v3 with: deploy_key: ${{ secrets.SSH_DEPLOY_KEY }} publish_dir: ./_site . The statement . if: github.event_name == &#39;push&#39; . uses the variable github.event_name to ensure this step only runs when a push event ( in this case only pushes to the master branch trigger this workflow) occur. . This step deploys the fastpages website by copying the contents of the _site folder to the root of the gh-pages branch, which GitHub Pages uses for hosting. This step uses the peaceiris/actions-gh-pages Action, pinned at version 3. Their README describes various options and inputs for this Action. . Conclusion . We hope that this has shed some light on how we use GitHub Actions to automate fastpages. While we only covered one workflow above, we hope this provides enough intuition to understand the other workflows in fastpages. We have only scratched the surface of GitHub Actions in this blog post, but we provide other materials below for those who want to dive in deeper. We have not covered how to host an Action for other people, but you can start with these docs to learn more. . Still confused about how GitHub Actions could be used for Data Science? Here are some ideas of things you can build: . Jupyter Widgets that trigger GitHub Actions to perform various tasks on GitHub via the repository dispatch event | Integration with Pachyderm for data versioning. | Integration with your favorite cloud machine learning services, such Sagemaker, Azure ML or GCP’s AI Platform. | . Related Materials . GitHub Actions official documentation | Hello world Docker Action: A template to demonstrate how to build a Docker Action for other people to use. | Awesome Actions: A curated list of interesting GitHub Actions by topic. | A tutorial on Docker for Data Scientists. | . Getting In Touch . Please feel free to get in touch with us on Twitter: . Hamel Husain @HamelHusain | Jeremy Howard @jeremyphoward | . . Footnotes . You can see some of Hugging Face’s Actions workflows for machine learning on GitHub &#8617; . | These additional dependencies are defined here, which uses the “jekyll build” command to add ruby dedpendencies from the Gemfile located at the root of the repo. Additionally, this docker image is built by another Action workflow defined here. &#8617; . |",
            "url": "https://fastpages.fast.ai/actions/markdown/2020/03/06/fastpages-actions.html",
            "relUrl": "/actions/markdown/2020/03/06/fastpages-actions.html",
            "date": " • Mar 6, 2020"
        }
        
    
  
    
        ,"post14": {
            "title": "Introducing fastpages",
            "content": ". We are very pleased to announce the immediate availability of fastpages. fastpages is a platform which allows you to create and host a blog for free, with no ads and many useful features, such as: . Create posts containing code, outputs of code (which can be interactive), formatted text, etc directly from Jupyter Notebooks; for instance see this great example post from Scott Hawley. Notebook posts support features such as: Interactive visualizations made with Altair remain interactive. | Hide or show cell input and output. | Collapsable code cells that are either open or closed by default. | Define the Title, Summary and other metadata via a special markdown cells | Ability to add links to Colab and GitHub automatically. | . | Create posts, including formatting and images, directly from Microsoft Word documents. | Create and edit Markdown posts entirely online using GitHub&#39;s built-in markdown editor. | Embed Twitter cards and YouTube videos. | Categorization of blog posts by user-supplied tags for discoverability. | ... and much more | . fastpages relies on Github pages for hosting, and Github Actions to automate the creation of your blog. The setup takes around three minutes, and does not require any technical knowledge or expertise. Due to built-in automation of fastpages, you don&#39;t have to fuss with conversion scripts. All you have to do is save your Jupyter notebook, Word document or markdown file into a specified directory and the rest happens automatically. Infact, this blog post is written in a Jupyter notebook, which you can see with the &quot;View on GitHub&quot; link above. . fast.ai have previously released a similar project called fast_template, which is even easier to set up, but does not support automatic creation of posts from Microsoft Word or Jupyter notebooks, including many of the features outlined above. . Because fastpages is more flexible and extensible, we recommend using it where possible. fast_template may be a better option for getting folks blogging who have no technical expertise at all, and will only be creating posts using Github&#39;s integrated online editor. . Setting Up Fastpages . The setup process of fastpages is automated with GitHub Actions, too! Upon creating a repo from the fastpages template, a pull request will automatically be opened (after ~ 30 seconds) configuring your blog so it can start working. The automated pull request will greet you with instructions like this: . . All you have to do is follow these instructions (in the PR you receive) and your new blogging site will be up and running! . Jupyter Notebooks &amp; Fastpages . In this post, we will cover special features that fastpages provides for Jupyter notebooks. You can also write your blog posts with Word documents or markdown in fastpages, which contain many, but not all the same features. . Options via FrontMatter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . All of the above settings are enabled in this post, so you can see what they look like! . the summary field (preceeded by &gt;) will be displayed under your title, and will also be used by social media to display as the description of your page. | toc: setting this to true will automatically generate a table of contents | badges: setting this to true will display Google Colab and GitHub links on your blog post. | comments: setting this to true will enable comments. See these instructions for more details. | author this will display the authors names. | categories will allow your post to be categorized on a &quot;Tags&quot; page, where readers can browse your post by categories. | . Markdown front matter is formatted similarly to notebooks. The differences between the two can be viewed on the fastpages README. . Code Folding . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . If you want to completely hide cells (not just collapse them), read these instructions. . Interactive Charts With Altair . Interactive visualizations made with Altair remain interactive! . We leave this below cell unhidden so you can enjoy a preview of syntax highlighting in fastpages, which uses the Dracula theme. . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;IMDB_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget IMDB_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | 6.1 | . 1 First Love, Last Rites | 10876.0 | 300000.0 | 6.9 | . 2 I Married a Strange Person | 203134.0 | 250000.0 | 6.8 | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | NaN | . 4 Slam | 1087521.0 | 1000000.0 | 3.4 | . Other Features . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Images w/Captions . You can include markdown images with captions like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Of course, the caption is optional. . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . More Examples . This tutorial contains more examples of what you can do with notebooks. . How fastpages Converts Notebooks to Blog Posts . fastpages uses nbdev to power the conversion process of Jupyter Notebooks to blog posts. When you save a notebook into the /_notebooks folder of your repository, GitHub Actions applies nbdev against those notebooks automatically. The same process occurs when you save Word documents or markdown files into the _word or _posts directory, respectively. . We will discuss how GitHub Actions work in a follow up blog post. . Resources &amp; Next Steps . We highly encourage you to start blogging with fastpages! Some resources that may be helpful: . fastpages repo - this is where you can go to create your own fastpages blog! | Fastai forums - nbdev &amp; blogging category. You can ask questions about fastpages here, as well as suggest new features. | nbdev: this project powers the conversion of Jupyter notebooks to blog posts. | . If you end up writing a blog post using fastpages, please let us know on Twitter: @jeremyphoward, @HamelHusain. .",
            "url": "https://fastpages.fast.ai/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "relUrl": "/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "date": " • Feb 21, 2020"
        }
        
    
  
    
        ,"post15": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://fastpages.fast.ai/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post16": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://fastpages.fast.ai/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post17": {
            "title": "Microsoft Word Example Post",
            "content": "When writing a blog post with Microsoft Word – the filename becomes the title. In this case the file name is “2020-01-01-Microsoft-Word-Example-Post.docx”. . There is minimal support for Word documents in fastpages compared to Jupyter notebooks. Some known limitations: . alt text in Word documents are not yet supported by fastpages, and will break links to images. . | You can only specify front matter for Word documents globally. See the README for more details. . | . For greater control over the content produced from Word documents, you will need to convert Word to markdown files manually. You can follow the steps in this blog post, which walk you through how to use pandoc to do the conversion. Note: If you wish to customize your Word generated blog post in markdown, make sure you delete your Word document from the _word directory so your markdown file doesn’t get overwritten! . If your primary method of writing blog posts is Word documents, and you plan on always manually editing Word generated markdown files, you are probably better off using fast_template instead of fastpages. . The material below is a reproduction of this blog post, and serves as an illustrative example. . Maintaining a healthy open source project can entail a huge amount of toil. Popular projects often have orders of magnitude more users and episodic contributors opening issues and PRs than core maintainers capable of handling these issues. . Consider this graphic prepared by the NumFOCUS foundation showing the number of maintainers for three widely used scientific computing projects: . . We can see that across these three projects, there is a very low ratio maintainers to users. Fixing this problem is not an easy task and likely requires innovative solutions to address the economics as well as tools. . Due to its recent momentum and popularity, Kubeflow suffers from a similar fate as illustrated by the growth of new issues opened: . . Source: “TensorFlow World 2019, Automating Your Developer Workflow With ML” . Coincidentally, while building out end to end machine learning examples for Kubeflow, we built two examples using publicly available GitHub data: GitHub Issue Summarization and Code Search. While these tutorials were useful for demonstrating components of Kubeflow, we realized that we could take this a step further and build concrete data products that reduce toil for maintainers. . This is why we started the project kubeflow/code-intelligence, with the goals of increasing project velocity and health using data driven tools. Below are two projects we are currently experimenting with : . Issue Label Bot: This is a bot that automatically labels GitHub issues using Machine Learning. This bot is a GitHub App that was originally built for Kubeflow but is now also used by several large open source projects. The current version of this bot only applies a very limited set of labels, however we are currently A/B testing new models that allow personalized labels. Here is a blog post discussing this project in more detail. . | Issue Triage GitHub Action: to compliment the Issue Label Bot, we created a GitHub Action that automatically adds / removes Issues to the Kubeflow project board tracking issues needing triage. . | Together these projects allow us to reduce the toil of triaging issues. The GitHub Action makes it much easier for the Kubeflow maintainers to track issues needing triage. With the label bot we have taken the first steps in using ML to replace human intervention. We plan on using features extracted by ML to automate more steps in the triage process to further reduce toil. . Building Solutions with GitHub Actions . One of the premises of Kubeflow is that a barrier to building data driven, ML powered solutions is getting models into production and integrated into a solution. In the case of building models to improve OSS project health, that often means integrating with GitHub where the project is hosted. . We are really excited by GitHub’s newly released feature GitHub Actions because we think it will make integrating ML with GitHub much easier. . For simple scripts, like the issue triage script, GitHub actions make it easy to automate executing the script in response to GitHub events without having to build and host a GitHub app. . To automate adding/removing issues needing triage to a Kanban board we wrote a simple python script that interfaces with GitHub’s GraphQL API to modify issues. . As we continue to iterate on ML Models to further reduce toil, GitHub Actions will make it easy to leverage Kubeflow to put our models into production faster. A number of prebuilt GitHub Actions make it easy to create Kubernetes resources in response to GitHub events. For example, we have created GitHub Actions to launch Argo Workflows. This means once we have a Kubernetes job or workflow to perform inference we can easily integrate the model with GitHub and have the full power of Kubeflow and Kubernetes (eg. GPUs). We expect this will allow us to iterate much faster compared to building and maintaining GitHub Apps. . Call To Action . We have a lot more work to do in order to achieve our goal of reducing the amount of toil involved in maintaining OSS projects. If your interested in helping out here’s a couple of issues to get started: . Help us create reports that pull and visualize key performance indicators (KPI). https://github.com/kubeflow/code-intelligence/issues/71 . We have defined our KPI here: issue #19 | . | Combine repo specific and non-repo specific label predictions: https://github.com/kubeflow/code-intelligence/issues/70 . | . In addition to the aforementioned issues we welcome contributions for these other issues in our repo. .",
            "url": "https://fastpages.fast.ai/2020/01/01/Microsoft-Word-Example-Post.html",
            "relUrl": "/2020/01/01/Microsoft-Word-Example-Post.html",
            "date": " • Jan 1, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://fastpages.fast.ai/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://fastpages.fast.ai/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}