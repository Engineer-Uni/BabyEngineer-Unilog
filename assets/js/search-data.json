{
  
    
        "post0": {
            "title": "Title",
            "content": ". &#47532;&#49828;&#53944; . 리스트 안에는 어떠한 자료형도 포함시킬 수 있다. 숫자, 문자열 뿐 아니라 변수, 다른 리스트도 저장할 수 있다. 하나의 리스트 안에 다양한 자료형을 혼합하여 포함시킬 수 있다. . n1 = 100 fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] mylist = [n1, fruits, 20, 30, &#39;슈퍼맨&#39;, True, [1,2,3]] #n1 은 변수값 mylist for x in mylist: print(type(x)) . &lt;class &#39;int&#39;&gt; &lt;class &#39;list&#39;&gt; &lt;class &#39;int&#39;&gt; &lt;class &#39;int&#39;&gt; &lt;class &#39;str&#39;&gt; &lt;class &#39;bool&#39;&gt; &lt;class &#39;list&#39;&gt; . list_1 = [1,2,3,4,5] list_1 . [1, 2, 3, 4, 5] . list_2 = list(range(0,5)) list_2 . [0, 1, 2, 3, 4] . &#47532;&#49828;&#53944; &#52636;&#47141;&#54616;&#44592; . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] for fruit in fruits: print(fruit) #리스트 출력 시 디폴트값이 Enter이기 때문에 줄을 바꿔서 출력된다. . 사과 오렌지 포도 수박 바나나 . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] for i in fruits: print(type(i), end=&#39; : &#39;) print(i) . &lt;class &#39;str&#39;&gt; : 사과 &lt;class &#39;str&#39;&gt; : 오렌지 &lt;class &#39;str&#39;&gt; : 포도 &lt;class &#39;str&#39;&gt; : 수박 &lt;class &#39;str&#39;&gt; : 바나나 . &#51064;&#45937;&#49905;: &#47532;&#49828;&#53944; &#50836;&#49548; &#52628;&#52636; . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,[&#39;수박&#39;,&#39;바나나&#39;]] fruits[3] . [&#39;수박&#39;, &#39;바나나&#39;] . a = [1,2,3,4,5] a[2]+a[4] . 8 . fruits = [[&#39;사과&#39;,&#39;오렌지&#39;],&#39;포도&#39;,[&#39;수박&#39;,&#39;바나나&#39;]] fruits[-2] . &#39;포도&#39; . a = [1,2,3,4,5] a[-2]+a[-3] . 7 . &#51064;&#45937;&#49828; &#50504;&#51032; &#51064;&#45937;&#49828; &#52628;&#52636; . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,[&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;]] fruits[2][0] . &#39;포도&#39; . a = [1,2,[&#39;a&#39;,&#39;b&#39;,[&#39;life&#39;,&#39;is&#39;]]] print(a[2][2]) a[2][2][0] . [&#39;life&#39;, &#39;is&#39;] . &#39;life&#39; . &#49836;&#46972;&#51060;&#49905;: &#47532;&#49828;&#53944; &#50836;&#49548; &#52628;&#52636; . 슬라이싱 기법으로 한 번에 여러 개의 요소들을 추출할 수 있다 리스트명[시작인덱스 :끝인덱스(이전값까지만 계산) : 간격] . nums = [0,1,2,3,4,5,6,7,8,9] print(nums[3:8]) print(nums[-7:-2]) . [3, 4, 5, 6, 7] [3, 4, 5, 6, 7] . nums = list(range(1,11)) print(nums) print(&#39;-&#39; *50) #시작 인덱스 생략 print(nums[:3]) print(nums[0:3]) print(&#39;-&#39; *50) #끝 인덱스 생략 print(nums[3:]) print(nums[3:10]) print(nums[3:len(nums)]) print(&#39;-&#39; *50) . [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] -- [1, 2, 3] [1, 2, 3] -- [4, 5, 6, 7, 8, 9, 10] [4, 5, 6, 7, 8, 9, 10] [4, 5, 6, 7, 8, 9, 10] -- . &#44036;&#44201; &#49836;&#46972;&#51060;&#49905; _ &#51677;&#49688;&#47564;, &#54848;&#49688;&#47564; ... . nums = [1,2,3,4,5,6,7,8,9,10] nums[3:8:2] . [4, 6, 8] . #리스트명 [끝인덱스 : 시작인덱스 : 간격(음수)] nums = list(range(1,11)) print(nums[8:3:-2]) print(nums[-2:-7:-2]) . [9, 7, 5] [9, 7, 5] . nums = list(range(1,11)) print(nums[-3:-8:-2]) print(nums[7:2:-2]) . [8, 6, 4] [8, 6, 4] . a = [1,2,3,[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,],4,5] print(a[2:5]) print(a[-5:-3]) . [3, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], 4] [2, 3] . &#47532;&#49828;&#53944; &#50672;&#49328;&#54616;&#44592; . a = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] b = [&#39;d&#39;,&#39;e&#39;,&#39;f&#39;] a + b . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;] . a = [&#39;A&#39;,&#39;a&#39;] b = a*3 b . [&#39;A&#39;, &#39;a&#39;, &#39;A&#39;, &#39;a&#39;, &#39;A&#39;, &#39;a&#39;] . len(&#47532;&#49828;&#53944;&#47749;)_&#47532;&#49828;&#53944;&#51032; &#54637;&#47785;&#49688; &#44396;&#54616;&#44592; . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] len(fruits) . 5 . &#47532;&#49828;&#53944; &#50836;&#49548;&#44050; &#48320;&#44221;&#54616;&#44592; . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] fruits[1] =&#39;망고&#39; print(fruits) . [&#39;사과&#39;, &#39;망고&#39;, &#39;포도&#39;, &#39;수박&#39;, &#39;바나나&#39;] . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] k = 1 fruits[k+2] =&#39;망고&#39; print(fruits) . [&#39;사과&#39;, &#39;오렌지&#39;, &#39;포도&#39;, &#39;망고&#39;, &#39;바나나&#39;] . # 슬라이싱[추가 시작할 인덱스, 보여질 인덱스] 해서 넣어야된다~ fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] fruits[1:4] = [&#39;망고&#39;,&#39;복숭아&#39;] print(fruits) . [&#39;사과&#39;, &#39;망고&#39;, &#39;복숭아&#39;, &#39;바나나&#39;] . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] fruits[1] = [&#39;망고&#39;,&#39;복숭아&#39;] print(fruits) . [&#39;사과&#39;, [&#39;망고&#39;, &#39;복숭아&#39;], &#39;포도&#39;, &#39;수박&#39;, &#39;바나나&#39;] . &#47532;&#49828;&#53944; &#50836;&#49548; &#49325;&#51228;&#54616;&#45716; 3&#44032;&#51648; &#48169;&#48277; . 인덱스를 알고 있을 때 사용 . del 리스트명[index] : 바로 제거 | 리스트명.pop() 인덱스를 알고 있을 때 사용 : 값 반환 후 제거 (변수 = 제거할인덱스 지정해보면 제거된 값을 알려준다) | . 값을 알고 있을 때 사용 . 리스트명.remove(요소) | . 예제) &#39;바나나&#39;를 없애는 3가지 방법 . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] del fruits[4] print(fruits) . [&#39;사과&#39;, &#39;오렌지&#39;, &#39;포도&#39;, &#39;수박&#39;] . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,[&#39;수박&#39;,&#39;바나나&#39;]] pop_fruit = fruits.pop(2) print(fruits, f&#39;pop_fruit는 {pop_fruit} 입니다&#39;) . [&#39;사과&#39;, &#39;오렌지&#39;, [&#39;수박&#39;, &#39;바나나&#39;]] pop_fruit는 포도 입니다 . #리스트명.clear() fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,[&#39;수박&#39;,&#39;바나나&#39;]] fruits.clear() print(fruits) . [] . # 요소가 여러개여도 가장 첫번째 항목만 삭제한다 fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;,&#39;파인애플&#39;,&#39;바나나&#39;] fruits.remove(&#39;바나나&#39;) print(fruits) . [&#39;사과&#39;, &#39;오렌지&#39;, &#39;포도&#39;, &#39;수박&#39;, &#39;파인애플&#39;, &#39;바나나&#39;] . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;,&#39;망고&#39;] if &#39;망고&#39; in fruits: fruits.remove(&#39;망고&#39;) print(fruits) . [&#39;사과&#39;, &#39;오렌지&#39;, &#39;포도&#39;, &#39;수박&#39;, &#39;바나나&#39;] . &#47532;&#49828;&#53944;&#50640; &#50836;&#49548; &#52628;&#44032; . .append() _ 리스트에 맨 마지막에 하나의 요소를 추가한다 | .extend() _ 리스트에 맨 마지막에 여러개의 요소를 추가한다 | .insert(인덱스, 요소) _ 지정된 인덱스에 요소를 추가한다 | . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] fruits.append(&#39;복숭아&#39;) fruits.append([&#39;복숭아&#39;,&#39;망고&#39;]) #fruits.append(&#39;복숭아&#39;,&#39;망고&#39;) print(fruits) . [&#39;사과&#39;, &#39;오렌지&#39;, &#39;포도&#39;, &#39;수박&#39;, &#39;바나나&#39;, &#39;복숭아&#39;, [&#39;복숭아&#39;, &#39;망고&#39;]] . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] fruits.extend([&#39;복숭아&#39;,&#39;망고&#39;]) print(fruits) print(&#39;-&#39;*100) # 리스트에 리스트 추가 ( 이중괄호로 묶기 ) fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] fruits.extend([[&#39;복숭아&#39;,&#39;망고&#39;],[&#39;키위&#39;, &#39;파인애플&#39;]]) # fruits.extend([&#39;복숭아&#39;,&#39;망고&#39;],[&#39;키위&#39;, &#39;파인애플&#39;]) print(fruits) . [&#39;사과&#39;, &#39;오렌지&#39;, &#39;포도&#39;, &#39;수박&#39;, &#39;바나나&#39;, &#39;복숭아&#39;, &#39;망고&#39;] - [&#39;사과&#39;, &#39;오렌지&#39;, &#39;포도&#39;, &#39;수박&#39;, &#39;바나나&#39;, [&#39;복숭아&#39;, &#39;망고&#39;], [&#39;키위&#39;, &#39;파인애플&#39;]] . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] fruits.insert(0,&#39;복숭아&#39;) print(fruits) . [&#39;복숭아&#39;, &#39;사과&#39;, &#39;오렌지&#39;, &#39;포도&#39;, &#39;수박&#39;, &#39;바나나&#39;] . &#50836;&#49548;&#51032; &#50948;&#52824; &#52286;&#44592; . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] fruits.index(&#39;포도&#39;) . 2 . # 요소가 없다는 메세지를 출력하려면 다음과 같이 코드를 짠다. fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] if &#39;자두&#39; in fruits: print(fruits.index(&#39;자두&#39;)) else: print(&#39;해당 과일은 준비되지 않았습니다.&#39;) . 해당 과일은 준비되지 않았습니다. . &#47716;&#48260; &#50672;&#49328;&#51088; in, not in . 여러 데이터 중 원하는 데이터가 존재하는지 여부를 검사하는 연산자 . print(&#39;p&#39; in &#39;python&#39;) print(0 in (1,2,3,4)) . True False . &#39;f&#39; not in &#39;python&#39; . True . &#50696;&#51228;) &#46020;&#49436; &#50676;&#46988;&#54616;&#44592; . books = [&#39;해리포터&#39;,&#39;나니아연대기&#39;,&#39;빠삐용&#39;,&#39;사피엔스&#39;] book_name = input(&#39;도서 제목: &#39;) if book_name in books: print(f&#39;{book_name}는 {books.index(book_name)}번째 인덱스에서 찾을 수 있습니다.&#39;) else: print(f&#39;{book_name} 도서는 준비되지 않았습니다.&#39;) . 도서 제목: 해리포터 해리포터는 0번째 인덱스에서 찾을 수 있습니다. . &#53945;&#51221; &#50836;&#49548;&#51032; &#44060;&#49688; &#52628;&#52636; . .count(요소) _ 리스트에서 지정한 요소의 개수를 반환한다. . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;,&#39;수박&#39;] fruits.count(&#39;수박&#39;) . 2 . &#47532;&#49828;&#53944; &#51221;&#47148; . 리스트 원본 정렬하기 . 리스트명.sort() _ 오름차순 | 리스트명.sort(reverse=True) _ 내림차순 | . 리스트 원본은 유지한 채로 사본 정렬하기 . sorted(리스트명)_ 오름차순 | sorted(리스트명, reverse=True) _ 내림차순 | . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] fruits.sort(reverse=True) print(fruits) . [&#39;포도&#39;, &#39;오렌지&#39;, &#39;수박&#39;, &#39;사과&#39;, &#39;바나나&#39;] . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] sorted_fruits = sorted(fruits) print(f&#39;원본: {fruits}&#39;) print(f&#39;오름차순: {sorted_fruits}&#39;) . 원본: [&#39;사과&#39;, &#39;오렌지&#39;, &#39;포도&#39;, &#39;수박&#39;, &#39;바나나&#39;] 오름차순: [&#39;바나나&#39;, &#39;사과&#39;, &#39;수박&#39;, &#39;오렌지&#39;, &#39;포도&#39;] . .reverse( ) _ &#47532;&#49828;&#53944; &#50669;&#49692;&#51004;&#47196; &#46244;&#51665;&#44592; . fruits = [&#39;사과&#39;,&#39;오렌지&#39;,&#39;포도&#39;,&#39;수박&#39;,&#39;바나나&#39;] fruits.reverse() print(fruits) . [&#39;바나나&#39;, &#39;수박&#39;, &#39;포도&#39;, &#39;오렌지&#39;, &#39;사과&#39;] . &#47532;&#49828;&#53944;&#50640;&#49436; &#47004;&#45924; &#54637;&#47785; &#52636;&#47141;&#54616;&#44592; . 랜덤을 사용하기 위해서는 반드시 import random 해줘야한다 . import random wise_saying = [] wise_saying.append(&#39;미래는 현재 우리가 무엇을 하고 있는가에 달려있다. - 마히트마 간디&#39;) wise_saying.append(&#39;교육은 세상을 바꿀 수 있는 가장 강력힌 무기다 - 넬슨 만델리&#39;) wise_saying.append(&#39;성공하기 위한 가장 확실한 방법은 한번 더 시도해 보는 것이다 - 토마스에디슨&#39;) wise_saying.append(&#39;가장 불만에 가득찬 고객은 가장 위대한 배움의 원천이다 _ 빌 게이츠&#39;) wise_saying.append(&#39;영원히 살 것처럼 꿈꾸고 오믈 죽을 것처럼 살아라 - 제임스딘&#39;) wise_saying.append(&#39;경쟁우위가 없다면 경쟁하지 마라 - 잭윌치&#39;) wise_saying.append(&#39;삶에 실수는 없고, 배움만이 있을 뿐이다. - 지아드 압델 누어&#39;) wise_saying.append(&#39;어제와 똑같은 삶을 살면서 다른 미래를 기대하는 것은 정신병의 초기증세이다 -아인슈타인&#39;) wise_saying.append(&#39;문제점을 찾지 말고 해결책을 찾으라 - 헨리포드&#39;) wise_saying.append(&#39;실수를 해보지 않은 사람은 한번도 새로운 일을 시도해보지 않았던 사람이다 -아인슈타인&#39;) print(random.choice(wise_saying)) print(random.sample(wise_saying,2)) . 미래는 현재 우리가 무엇을 하고 있는가에 달려있다. - 마히트마 간디 [&#39;미래는 현재 우리가 무엇을 하고 있는가에 달려있다. - 마히트마 간디&#39;, &#39;문제점을 찾지 말고 해결책을 찾으라 - 헨리포드&#39;] . &#47532;&#49828;&#53944; &#54637;&#47785; &#44228;&#49328;&#54616;&#44592; . 합계: sum(리스트명) | . 최대값: max(리스트명) | . 최소값: min(리스트명) | . a = [1,2,3,4,5] b = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;] c = [&#39;월&#39;,&#39;화&#39;,&#39;수&#39;,&#39;목&#39;,&#39;금&#39;,&#39;토&#39;] print(sum(a),max(b),min(c)) . 15 e 금 . Random &#47784;&#46280; . 숫자 사용하는 경우 random.randint(시작값,끝값) : 시작값, 끝값 사이의 랜덤한 정수 반환(*끝값 포함) random.randrange(시작값,끝값) : 시작값, 끝값 사이의 랜덤한 정수 반환(끝값 불포함/range 랑 동일한 방식으로 사용) random.randrange(끝값) : 인자가 1개인 경우 0~끝값 사이의 랜덤한 정수 반환(끝값 불포함) . | 로또번호 random.sample(range(처음값, 끝값), 갯수) : 임의의 값(난수)을 필요한 개수만큼 리스트(list)로 반환 / 중복 안시킴 . | 체온 체크 게이트 random.uniform(최소, 최대) : 입력 파라미터인 최소부터 최대까지 중 임의의 부동소수점(float) 숫자를 리턴한다 . | 점심메뉴 고르기 random.choice(리스트명) : 리스트의 항목들 중 랜덤으로 하나 출력 . | 노래 랜덤재생 random.shuffle(리스트명) : 순서형 자료를 뒤죽박죽으로 섞음 . | . &#50696;&#51228;1 &#49707;&#51088;&#46308;&#51032; &#54633;&#44228;&#50752; &#54217;&#44512; &#44396;&#54616;&#44592; . numbers = [] for i in range(5): x = float(input(&#39;숫자를 입력하세요: &#39;)) numbers.append(x) if len(numbers) != 0: average = sum(numbers) / len(numbers) else: average = 0 print(f&#39;합계는 {sum(numbers)}이고, 평균은 {average}입니다.&#39;) . 숫자를 입력하세요: 0 숫자를 입력하세요: 0 숫자를 입력하세요: 0 숫자를 입력하세요: 0 숫자를 입력하세요: 1 합계는 1.0이고, 평균은 0.2입니다. . num = [] for i in range(5): x = int(input(&quot;숫자를 입력하시오 : &quot;)) num.append(x) print(num) print(&quot;숫자들의 합계 : &quot;, sum(num), &quot;숫자들의 평균&quot;, sum(num)/5) . 숫자를 입력하시오 : 1 [1] 숫자를 입력하시오 : 2 [1, 2] 숫자를 입력하시오 : 3 [1, 2, 3] 숫자를 입력하시오 : 4 [1, 2, 3, 4] 숫자를 입력하시오 : 5 [1, 2, 3, 4, 5] 숫자들의 합계 : 15 숫자들의 평균 3.0 .",
            "url": "https://engineer-uni.github.io/BabyEngineer-Unilog/2021/06/06/_%EB%B0%98%EB%B3%B5%EB%AC%B8,-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%99%80-%EB%9E%9C%EB%8D%A4.html",
            "relUrl": "/2021/06/06/_%EB%B0%98%EB%B3%B5%EB%AC%B8,-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%99%80-%EB%9E%9C%EB%8D%A4.html",
            "date": " • Jun 6, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": ". &#45208;&#51060; &#54217;&#44512;&#44396;&#54616;&#44592; . alist = { &#39;1팀&#39;:[25,39,29,27,27], &#39;2팀&#39;:[27,24,25,29,25], &#39;3팀&#39;:[25,26,25,23,23,28,27], &#39;4팀&#39;:[21,23,30], &#39;5팀&#39;:[30,30,20,20,10], &#39;6팀&#39;:[20,20,25,30]} age_li = [] for i,v in alist.items(): print(f&#39;{i}의 최저연령은{min(v)} 최고연령은 {max(v)}&#39;) age_li.extend(v) print(age_li) print(f&#39;DT스쿨 최저연령은{min(age_li)} 최고연령은 {max(age_li)}&#39;) . 1팀의 최저연령은25 최고연령은 39 2팀의 최저연령은24 최고연령은 29 3팀의 최저연령은23 최고연령은 28 4팀의 최저연령은21 최고연령은 30 5팀의 최저연령은10 최고연령은 30 6팀의 최저연령은20 최고연령은 30 [20, 20, 25, 30] DT스쿨 최저연령은20 최고연령은 30 . &#50864;&#47532;&#54016; &#52880;&#47533;&#53552; &#49324;&#51204; &#47564;&#46308;&#44592; . team_dic = {&#39;삼&#39;:[&#39;삼전&#39;,&#39;교대근무&#39;,&#39;연봉 많이 성과금 듬뿍&#39;], &#39;쿠&#39;:[&#39;쿠팡&#39;,&#39;적절한 외근&#39;,&#39;연봉 full&#39;], &#39;카&#39;:[&#39;카카오&#39;,&#39;인턴말고 정규직&#39;,&#39;사내규정&#39;], &#39;구&#39;:[&#39;구글&#39;,&#39;정규직이지만 자유로운&#39;,&#39;사장보다 연봉 높은 막내&#39;], &#39;네&#39;:[&#39;네이버&#39;,&#39;워라벨&#39;,&#39;많이&#39;]} name = input() import random list0 = team_dic[name] random.choice(list0) print((f&#39;우리 {name}님은 {list0[0]}를 목표로 하고 있습니다.&#39;)) print((f&#39;{list0[1]}근무 형태를 희망합니다.&#39;)) print((f&#39;{name}님은 {list0[2]} 받을 만한 분이십니다.&#39;)) . 카 우리 카님은 카카오를 목표로 하고 있습니다. 인턴말고 정규직근무 형태를 희망합니다. 카님은 사내규정 받을 만한 분이십니다. . &#47928;&#51088;&#50676; &#45208;&#45572;&#44592; .split() .join() . text = &#39;우리 이제 헤어져&#39; break_up = text.split(sep=&#39;이제&#39;) break_up . [&#39;우리 &#39;, &#39; 헤어져&#39;] . regather = &#39; &#39;.join(break_up) regather . &#39;우리 이제 헤어져&#39; .",
            "url": "https://engineer-uni.github.io/BabyEngineer-Unilog/2021/06/02/%EC%8B%A4%EC%8A%B5.html",
            "relUrl": "/2021/06/02/%EC%8B%A4%EC%8A%B5.html",
            "date": " • Jun 2, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "논리 연산자(Logical operator)",
            "content": ". &#50696;&#51228;) &#54200;&#51032;&#51216; &#51116;&#44256;&#44288;&#47532; . 사용자로부터 물건 이름과 갯수 입력 받기 (엔터를 입력할 때까지 반복) | 물건이 존재하지 않으면 추가하고, 존재하면 물건 개수를 더한다 | 입력이 끝나면 재고 현황을 물건이름의 오름차순으로 정렬하여 출력 | stock = { &#39;수박&#39; : 3, &#39;딸기&#39; : 3, &#39;바나나&#39; : 1 } #물건: goods / 수량: number while True: goods = input(&#39;물건 이름:&#39;) if goods == &#39;&#39;: break number = int(input(&#39;수량:&#39;)) if goods in stock.keys(): stock[goods] += number #물건 개수 더하기 else: stock[goods] = number #없으면 요소 추가하기 print(&#39;-&#39;*50) #오름차순 정렬 for key,value in sorted(stock.items()): print(key, value, end =&#39; &#39;) . 물건 이름:바나나 수량:3 물건 이름: -- 딸기 3 바나나 4 수박 3 . &#51665;&#54633;(set) . 자료들이 순서와 중복 없이 저장된 것 | 중괄호{} 안에 요소를 쉼표로 구분하여 나열한다. | . set_wish = {&#39;베를린&#39;,&#39;암스테르담&#39;,&#39;다합&#39;,&#39;모로코&#39;,&#39;포르투&#39;,&#39;다합&#39;} set_wish = set([&#39;베를린&#39;,&#39;암스테르담&#39;,&#39;다합&#39;,&#39;모로코&#39;,&#39;포르투&#39;,&#39;다합&#39;]) #set() 명령어는 집합을 만든다 print(set_wish) . {&#39;베를린&#39;, &#39;포르투&#39;, &#39;모로코&#39;, &#39;다합&#39;, &#39;암스테르담&#39;} . &#51665;&#54633; &gt; &#50836;&#49548;&#52628;&#52636; . 인덱싱으로 값을 얻을 수 없다 (집합 자료형은 순서가 없기 때문!) | 인덱싱 값 사용하려면 리스트나 튜플로 변환 | . set_wish = {&#39;베를린&#39;,&#39;암스테르담&#39;,&#39;다합&#39;,&#39;모로코&#39;,&#39;포르투&#39;,&#39;다합&#39;} wish_list = list(set_wish) #리스트로 변환하기 print(wish_list) print(wish_list[2]) . [&#39;베를린&#39;, &#39;포르투&#39;, &#39;모로코&#39;, &#39;다합&#39;, &#39;암스테르담&#39;] 모로코 . set_wish = {&#39;베를린&#39;,&#39;암스테르담&#39;,&#39;다합&#39;,&#39;모로코&#39;,&#39;포르투&#39;,&#39;다합&#39;} wish_list = tuple(set_wish) #튜플로 변환하기 print(wish_list) print(wish_list[2]) . (&#39;베를린&#39;, &#39;포르투&#39;, &#39;모로코&#39;, &#39;다합&#39;, &#39;암스테르담&#39;) 모로코 . &#51665;&#54633;(set) &gt; &#50672;&#49328; . sweety = {&#39;빼빼로&#39;,&#39;칸초&#39;,&#39;허니버터&#39;} salty = {&#39;허니버터&#39;,&#39;포카칩&#39;,&#39;새우깡&#39;} #합집합 print(sweety.union(salty)) print(sweety|salty) #교집합 print(sweety.intersection(salty)) print(sweety&amp;salty) # 차집합 print(sweety.difference(salty)) print(sweety-salty) print(salty.difference(sweety)) print(salty-sweety) . &#51665;&#54633;(set) &gt; &#50836;&#49548;&#52628;&#44032; . set_wish = {&#39;베를린&#39;,&#39;암스테르담&#39;,&#39;다합&#39;,&#39;모로코&#39;,&#39;포르투&#39;,&#39;다합&#39;} set_wish.add(&#39;베를린&#39;) print(set_wish) . {&#39;베를린&#39;, &#39;포르투&#39;, &#39;모로코&#39;, &#39;다합&#39;, &#39;암스테르담&#39;} . set_wish = {&#39;베를린&#39;,&#39;암스테르담&#39;,&#39;다합&#39;,&#39;모로코&#39;,&#39;포르투&#39;,&#39;다합&#39;} set_wish.update([&#39;베를린&#39;,&#39;다합&#39;]) print(set_wish) . {&#39;베를린&#39;, &#39;포르투&#39;, &#39;모로코&#39;, &#39;다합&#39;, &#39;암스테르담&#39;} . &#51665;&#54633;(set) &gt; &#50836;&#49548; &#49325;&#51228; . set_wish = {&#39;베를린&#39;,&#39;암스테르담&#39;,&#39;다합&#39;,&#39;모로코&#39;,&#39;포르투&#39;,&#39;다합&#39;} set_wish.remove(&#39;암스테르담&#39;) #암스테르담 삭제하기 print(set_wish) . {&#39;베를린&#39;, &#39;포르투&#39;, &#39;모로코&#39;, &#39;다합&#39;} . set_wish = {&#39;베를린&#39;,&#39;암스테르담&#39;,&#39;다합&#39;,&#39;모로코&#39;,&#39;포르투&#39;,&#39;다합&#39;} # set_wish.remove(&#39;바르셀로나&#39;) if &#39;바르셀로나&#39; in list(set_wish): set_wish.remove(&#39;바르셀로나&#39;) print(set_wish) . {&#39;베를린&#39;, &#39;포르투&#39;, &#39;모로코&#39;, &#39;다합&#39;, &#39;암스테르담&#39;} . &#50724;&#47448;&#47700;&#49464;&#51648; &#54644;&#49437; . NameError : 참조변수 없음 (변수가 정의되어있지 않음) . | SyntaxError : 문법이 잘못되었음 (오타, 괄호를 제대로 닫지 않았을 때, 콜론(:)을 잘못 사용했을 때 등...) . | TypeError : 문자열 타입이 맞지 않음 . | ZeroDivisionError : 0으로 나눌 수 없음 . | IndentationError : 0으로 나눌 수 없음 . | KeyError : 리스트, 튜플, 딕셔너리, 집합 등에서 해당 요소 없음 . | . &#54532;&#47196;&#44536;&#47016;&#51032; 3&#44032;&#51648; &#44592;&#48376; &#51228;&#50612; &#44396;&#51312; . 순차구조 | 선택구조 : 조건에 따라 명령을 선택하여 실행하는 구조 Ex) if문 | 반복구조 : 동일한 명령이 반복되면서 실행되는 구조 Ex) for문(범위) / while문(해당조건 충족) | . &#51312;&#44148;&#47928;(if&#47928;)&#51032; &#44396;&#51312;&#46308; . if | if ~ else | if ~ elif | if elif ~ else | 중첩 if | . &#53076;&#46300;&#48660;&#47085; . a = 1 if a &lt; 0: print(&#39;a는 0보다 작다.&#39;) print(&#39;a는 음수이다.&#39;) print(&#39;끝&#39;) . 끝 . a = 1 if a &lt; 0: print(&#39;a는 0보다 작다.&#39;) print(&#39;a는 음수이다.&#39;) print(&#39;끝&#39;) . a는 음수이다. 끝 . . &#53076;&#47196;&#45208; &#51088;&#44032;&#51652;&#45800; &#54532;&#47196;&#44536;&#47016; 1&#45800;&#44228; . 체온을 입력받아 | 체온이 37.5도 초과면 | &#39;등교 불가&#39;를 출력하는 프로그램을 작성하세요 | temp = float(input(&#39;체온:&#39;)) if temp &gt; 37.5: print(&#39;등교 불가&#39;) . 체온:36.5 . &#53076;&#47196;&#45208; &#51088;&#44032;&#51652;&#45800; &#54532;&#47196;&#44536;&#47016; 2&#45800;&#44228; . 체온, 검사결과대기여부, 자가격리여부를 입력받아 | 체온이 37.5도 초과면 &#39;발열기준 초과: 등교불가&#39;를 출력합니다. | 아니고, 만약 검사대기여부가 &#39;Y&#39;면 &#39;검사대기 중 등교 불가&#39;를 출력 | 아니고, 만약 자가격리여부가 &#39;Y&#39;면 &#39;자가격리 중 등교 불가&#39;를 출력 | 모든 조건이 만족하지 않는다면 &#39;등교가능&#39;을 출력합니다. | temp = float(input(&#39;체온:&#39;)) waiting = input(&#39;검사결과대기여부(Y/N):&#39;) isolation = input(&#39;자가격리여부(Y/N):&#39;) if temp &gt; 37.5: print(&#39;발열기준 초과: 등교불가&#39;) elif waiting == &#39;Y&#39;: print(&#39;검사대기 중 등교 불가&#39;) elif isolation == &#39;Y&#39;: print(&#39;자가격리 중 등교 불가&#39;) else: print(&#39;등교 가능&#39;) . 체온:37 검사결과대기여부(Y/N):Y 자가격리여부(Y/N):N 검사대기 중 등교 불가 . &#50696;&#51228;) &#54617;&#51216; &#52636;&#47141;&#44592; . grade = &#39; &#39; score = int(input(&#39;점수를 입력하세요:&#39;)) if score &gt;= 90: print(&#39;A&#39;) elif score &gt;= 80: print(&#39;B&#39;) elif score &gt;= 70: print(&#39;C&#39;) elif score &gt;= 60: print(&#39;D&#39;) else: print(&#39;F&#39;) print(f&#39;등급: {grade}&#39;) . 점수를 입력하세요:88 B 등급: . &#50696;&#51228;) &#44552;&#50529;&#50640; &#46384;&#47480; &#54624;&#51064;&#50984; &#44228;&#49328;&#44592; . 물건 구매가를 입력받고, | 금액에 따른 할인율을 계산하여 | 구매가, 할인율, 할인금액, 지불금액을 출력 | buy = int(input(&#39;구매가:&#39;)) if buy &gt;= 100000: #가장 범위가 작은 조건부터 써준다 dc_percent = 10 elif buy &gt;= 50000: dc_percent = 7.5 elif buy &gt;= 10000: dc_percent = 5 else: dc_percent = 0 dc_price = buy*(dc_percent/100) print(&#39;-&#39;*50) print(f&#39;구매가: {buy}원&#39;) print(f&#39;할인율: {dc_percent}%&#39;) print(f&#39;할인금액: {int(dc_price)}원&#39;) print(f&#39;지불금액: {int(buy-dc_price)}원&#39;) . 구매가:360000 -- 구매가: 360000원 할인율: 10% 할인금액: 18000원 지불금액: 342000원 . &#50696;&#51228;) &#52572;&#49548;&#44050; &#44396;&#54616;&#44592;(1/3) . 3개의 수를 입력받아 | 가장 작은 수를 출력하세요 | numbers = [] for numbers in range(0,3): numbers = input(&#39;숫자를 입력하세요: &#39;) print(&#39;-&#39;*50) min_1 = numbers[0] #첫번째 수를 임의로 저장 if min_1 &gt; numbers[1]: min_1 = numbers[1] if min_1 &gt; number[2]: min_1 = number[2] print(int(min_1)) . 숫자를 입력하세요: 25 숫자를 입력하세요: 26 숫자를 입력하세요: 27 -- 2 . numbers = [] for i in range(0,3): numbers.append(int(input(&#39;숫자를 입력하세요: &#39;))) print(&#39;-&#39;*50) min_n = min(numbers) print(&#39;가장 작은수:&#39;,min_n) . 숫자를 입력하세요: 2 숫자를 입력하세요: 3 숫자를 입력하세요: 1 -- 가장 작은수: 1 . &#45436;&#47532;&#50672;&#49328;&#51088; . 논리연산자를 사용하여 여러 개의 조건을 조합하여 복잡한 조건식을 만들 수 있다. | . a and b | a or b | not a, not b | &#45436;&#47532; &#50672;&#49328;&#51088; . 1 in [1,2.3] . True . &#39;a&#39; in (&#39;a&#39;,&#39;b&#39;,&#39;c&#39;) . True . &#39;j&#39; not in (&#39;python&#39;) . True . &#50696;&#51228;) &#44397;&#47549;&#44277;&#50896; &#51077;&#51109;&#47308; &#44228;&#49328;&#44592; . 나이를 입력받아 국립공원 입장권 발급하기 | 입장료는 3000 | 나이가 65세 이상이거나 7세 이하인 경우에는 무료 | 나이 8~ 18세는 청소년 요금이 1000원 | age = int(input(&#39;나이: &#39;)) price = 3000 if age &gt;= 65 or age &lt;= 7: # 3번 조건 price = &#39;무료&#39; elif 7 &lt; age &lt; 19: # 4번 조건 price = 1000 print(&#39;-&#39;*50) print(f&#39;입장료는 {price}입니다.&#39;) . 나이: 16 -- 입장료는 1000입니다. . &#50696;&#51228;) &#47196;&#44536;&#51064; &#54532;&#47196;&#44536;&#47016;(1/2) . 사용자로부터 아이디/패스워드를 받아서 | 프로그램에 저장된 아이디/패스워드와 일치하는지 여부 검사하여 | 로그인/로그인 실패를 출력하는 프로그램 | 아이디:ID1234 | 패스워드:PWD1234 | . id = &#39;ID1234&#39; pw = &#39;PWD1234&#39; given_id = input(&#39;아이디: &#39;) given_pw = input(&#39;비밀번호: &#39;) if given_id == id and given_pw == pw: print(&#39;로그인 성공&#39;) else: print(&#39;로그인 실패&#39;) . 아이디: ID1234 비밀번호: PWD1234 로그인 성공 . id = &#39;ID1234&#39; pw = &#39;PWD1234&#39; given_id = input(&#39;아이디: &#39;) given_pw = input(&#39;비밀번호: &#39;) if not given_id == id: print(&#39;아이디를 확인해주세요&#39;) elif not given_pw == pw: print(&#39;패스워드를 확인해주세요&#39;) elif given_id == id and given_pw == pw: print(&#39;로그인 성공&#39;) . 아이디: ID1234 비밀번호: PWD123 패스워드를 확인해주세요 . &#49324;&#52825;&#50672;&#49328; &#54532;&#47196;&#44536;&#47016; . 두 수와 사칙연산기호를 입력받아 연산 기호에 따라 연산 결과를 출력 . cal = [] for i in range(2): cal.append(int(input(&#39;숫자를 입력하세요: &#39;))) sign = input(&#39;연산을 입력하세요: &#39;) answer = float() if sign == &#39;+&#39;: answer = cal[0]+cal[1] elif sign == &#39;-&#39;: answer = cal[0]-cal[1] elif sign == &#39;*&#39;: answer = cal[0]*cal[1] elif sign == &#39;/&#39;: if cal[2] != 0: answer = cal[0]/cal[1] else: print(&#39;0으로 나눌 수 없습니다.&#39;) print(&#39;-&#39;*50) print(f&#39;{cal[0]}{sign}{cal[1]} = {answer}&#39;) . 숫자를 입력하세요: 2 숫자를 입력하세요: 2 연산을 입력하세요: - -- 2-2 = 0 . &#50696;&#51228;) &#51452;&#49324;&#50948; &#45912;&#51648;&#44592; &#44172;&#51076; . 두개의 주사위를 던져 더 큰 수가 나오는 사람이 이기는 게임 . import random dice_1 = random.randint(0,5) dice_2 = random.randint(0,5) if dice_1 &gt; dice_2: print(f&#39;{dice_1+1}:{dice_2+1}의 결과로 첫번째 주사위가 이겼습니다&#39;) elif dice_1 == dice_2: print(f&#39;{dice_1+1}:{dice_2+1}의 결과로 비겼습니다&#39;) elif dice_1 &lt; dice_2: print(f&#39;{dice_1+1}:{dice_2+1}의 결과로 두번째 주사위가 이겼습니다&#39;) . 2:5의 결과로 두번째 주사위가 이겼습니다 .",
            "url": "https://engineer-uni.github.io/BabyEngineer-Unilog/2021/06/01/if-else%EB%AC%B8%EA%B3%BC-%EC%A7%91%ED%95%A9set.html",
            "relUrl": "/2021/06/01/if-else%EB%AC%B8%EA%B3%BC-%EC%A7%91%ED%95%A9set.html",
            "date": " • Jun 1, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Title",
            "content": ". &#50696;&#51228; 1) &#49707;&#51088; &#54633;&#44228;&#50752; &#54217;&#44512; &#44228;&#49328;&#54616;&#44592; . num_list = [] for i in range(5): number = float(input(&#39;숫자를 입력하세요: &#39;)) num_list.append(number) if len(num_list) != 0: average = sum(num_list) / len(num_list) else: average = 0 print(f&#39;합계는 {sum(num_list)}, 평균은 {average}입니다.&#39;) . 숫자를 입력하세요: 3 숫자를 입력하세요: 4 숫자를 입력하세요: 1 숫자를 입력하세요: 2 숫자를 입력하세요: 5 합계는 15.0, 평균은 3.0입니다. . &#50696;&#51228; 2) &#51452;&#49324;&#50948; &#48712;&#46020; &#44228;&#49328;&#54616;&#44592; . import random count = [0,0,0,0,0,0] for i in range(10000): dice = random.randint(1,6) if dice == 1: count[0] += 1 elif dice == 2: count[1] += 1 elif dice == 3: count[2] += 1 elif dice == 4: count[3] += 1 elif dice == 5: count[4] += 1 elif dice == 6: count[5] += 1 print(count) . [1685, 1687, 1634, 1631, 1727, 1636] . import random dice = list(range(1, 7)) conse = [] for i in range(10000) : conse.append(random.choice(dice)) for i in range(1, len(dice)+1) : print(f&#39;{i}은(는) {conse.count(i)} 개&#39;) . 1은(는) 1645 개 2은(는) 1614 개 3은(는) 1666 개 4은(는) 1765 개 5은(는) 1660 개 6은(는) 1650 개 . &#50696;&#51228; 3) &#44284;&#47785;&#48324; &#51216;&#49688;&#51032; &#54217;&#44512; &#44396;&#54616;&#44592; . [국,영,수] 점수가 저장된 리스트입니다. . 과목별 리스트를 분리하고 | 과목별 평균을 산출하세요. (평균은 소수점 1자리까지 산출) | scores = [[96,84,80], [96,86,76], [76,95,83], [89,96,69], [90,76,91], [82,66,88], [83,86,79], [85,90,83]] #리스트를 분리할 공간을 만들어준다 ko = [] en = [] math = [] for personal_score in scores: #scores 리스트 안의 리스트를 student로 정의하고 ko.append(personal_score[0]) #개인 score의 첫번째 항목은 국어점수 en.append(personal_score[1]) #개인 score의 두번째 항목은 영어점수 math.append(personal_score[2]) #개인 score의 세번째 항목은 수학점수 print(f&#39;국어 점수: {ko}, 영어 점수: {en}, 수학 점수: {math}&#39;) #과목별 점수로 분류되었는지 확인 # 평균을 구한다 round(과목합계/항목수, 소수점1자리) avr_ko = round(sum(ko)/len(ko),1) avr_en = round(sum(en)/len(en),1) avr_math = round(sum(math)/len(math),1) print(f&#39;국어 평균: {avr_ko}, 영어 평균: {avr_en}, 수학 평균: {avr_math}&#39;) . 국어 점수: [96, 96, 76, 89, 90, 82, 83, 85], 영어 점수: [84, 86, 95, 96, 76, 66, 86, 90], 수학 점수: [80, 76, 83, 69, 91, 88, 79, 83] 국어 평균: 87.1, 영어 평균: 84.9, 수학 평균: 81.1 . **&#50696;&#51228;) &#47532;&#49828;&#53944; &#54633;&#44228; &#44396;&#54616;&#44592; . values = [56,12,33,8,3,2,98] total = 0 for i in range(7): total += values[i] total . 212 . values = [56,12,33,8,3,2,98] total = 0 for i in values: total += i total . 212 . values = [56,12,33,8,3,2,98] print(sum(values)) . 212 . &#53916;&#54540;(Tuple) _ &#44050;&#51012; &#48148;&#44992; &#49688; &#50630;&#45716; &#54637;&#47785; . 리스트는 [ ], 튜플은 ( ) ex) 주민번호, 여권번호, 생년월일... 튜플은 뒤에 ,를 반드시 입력 *안하면 . t1 = (1,5,3,4,2) t2 = (6,7,8,9,8) print(t1[1]) #인덱싱 print(t1[2:4]) #슬라이싱 print(t1+t2) #더하기 print(t1*3) #곱하기 print(len(t1)) #길이 구하기 print(t2.index(9)) #요소의 위치 찾기 print(t2.count(8)) #요소의 갯수 sort_t1 = sorted(t1) #정렬된 [새로운 리스트]로 반환! 튜플은 변경이 안되므로. print(sort_t1) . 5 (3, 4) (1, 5, 3, 4, 2, 6, 7, 8, 9, 8) (1, 5, 3, 4, 2, 1, 5, 3, 4, 2, 1, 5, 3, 4, 2) 5 3 2 [1, 2, 3, 4, 5] . &#46357;&#49496;&#45320;&#47532; . key: value 의 집합 dict_name = {key0:value0, key1:value1 ... keyN,valueN} 순서가 없음 = 인덱스가 없음 키 값으로 제어 . dict_person = { &#39;name&#39;:&#39;아이언맨&#39;, &#39;소속&#39;:&#39;마블&#39;, &#39;age&#39;:35, &#39;특징&#39;:[&#39;기술덕후&#39;,&#39;부자&#39;] } print(dict_person) . {&#39;name&#39;: &#39;아이언맨&#39;, &#39;소속&#39;: &#39;마블&#39;, &#39;age&#39;: 35, &#39;특징&#39;: [&#39;기술덕후&#39;, &#39;부자&#39;]} . dict_phone = { &#39;강동원&#39;:&#39;01011112222&#39;, &#39;공유&#39;:&#39;01022223333&#39;, &#39;현빈&#39;:&#39;01033334444&#39; } print(dict_phone) . {&#39;강동원&#39;: &#39;01011112222&#39;, &#39;공유&#39;: &#39;01022223333&#39;, &#39;현빈&#39;: &#39;01033334444&#39;} . &#46357;&#49492;&#45320;&#47532;:&#50836;&#49548; &#52628;&#44032;, &#49325;&#51228;, &#52628;&#52636;&#54616;&#44592; . #딕셔너리명[key]=value dict_scores = {} dict_scores[&#39;홍길동&#39;] = 80 dict_scores[&#39;공유&#39;] = 90 dict_scores[&#39;현빈&#39;] = 100 print(dict_scores) . {&#39;홍길동&#39;: 80, &#39;공유&#39;: 90, &#39;현빈&#39;: 100} . #del 딕셔너리명[key] dict_scores = { &#39;홍길동&#39;: 80, &#39;공유&#39;: 90, &#39;현빈&#39;: 100 } del dict_scores[&#39;홍길동&#39;] print(dict_scores) . {&#39;공유&#39;: 90, &#39;현빈&#39;: 100} . #딕셔너리명.pop(key) dict_scores = { &#39;홍길동&#39;: 80, &#39;공유&#39;: 90, &#39;현빈&#39;: 100 } score = dict_scores.pop(&#39;홍길동&#39;) print(score) print(dict_scores) . 80 {&#39;공유&#39;: 90, &#39;현빈&#39;: 100} . #딕셔너리명.clear() dict_scores = { &#39;홍길동&#39;: 80, &#39;공유&#39;: 90, &#39;현빈&#39;: 100 } dict_scores.clear() print(dict_scores) . {} . &#46357;&#49492;&#45320;&#47532; : &#50836;&#49548; &#52628;&#52636; . #값 추출하기 dict_scores = { &#39;홍길동&#39;: 80, &#39;공유&#39;: 90, &#39;현빈&#39;: 100 } print(dict_scores.get(&#39;현빈&#39;)) print(dict_scores.get(&#39;송중기&#39;)) print(dict_scores.get(&#39;송중기&#39;,&#39;없음&#39;)) #&#39;송중기&#39;라는 값이 없으면 &#39;없음&#39;이라는 문구를 출력해줘! . 100 None 없음 . dict_scores = { &#39;홍길동&#39;: 80, &#39;공유&#39;: 90, &#39;현빈&#39;: 100 } print(&#39;현빈&#39; in dict_scores) #&#39;현빈&#39;이라는 key가 dict_scores 안에 있니? print(&#39;송중기&#39; in dict_scores) #&#39;송중기&#39;라는 key가 dict_scores 안에 있니? . True False . &#46357;&#49492;&#45320;&#47532;: &#47784;&#46304; keys / values &#50619;&#44592; . #딕셔너리명.keys() dict_scores = { &#39;홍길동&#39;: 80, &#39;공유&#39;: 90, &#39;현빈&#39;: 100 } print(dict_scores.keys()) #리스트의 키 보여줘! print(list(dict_scores.keys())) #key리스트만 출력 . dict_keys([&#39;홍길동&#39;, &#39;공유&#39;, &#39;현빈&#39;]) [&#39;홍길동&#39;, &#39;공유&#39;, &#39;현빈&#39;] . #딕셔너리명.values() dict_scores = { &#39;홍길동&#39;: 80, &#39;공유&#39;: 90, &#39;현빈&#39;: 100 } print(dict_scores.values()) #리스트의 벨류값 보여줘! print(list(dict_scores.values())) #value 리스트만 출력 . dict_values([80, 90, 100]) [80, 90, 100] . #딕셔너리명.items() dict_scores = { &#39;홍길동&#39;: 80, &#39;공유&#39;: 90, &#39;현빈&#39;: 100 } print(dict_scores.items()) #리스트의 벨류값 보여줘! print(list(dict_scores.items())) #value 리스트만 출력 . dict_items([(&#39;홍길동&#39;, 80), (&#39;공유&#39;, 90), (&#39;현빈&#39;, 100)]) [(&#39;홍길동&#39;, 80), (&#39;공유&#39;, 90), (&#39;현빈&#39;, 100)] . #방법1 dict_scores = { &#39;홍길동&#39;: 80, &#39;공유&#39;: 90, &#39;현빈&#39;: 100 } for key in dict_scores.keys(): print(key, dict_scores[key]) #value값을 불러올때 dict_scores[key]를 사용하는 이유는 key값을 이용하여 불러오기 때문에 (value값은 사용하지 못한다) . 홍길동 80 공유 90 현빈 100 . dict_scores = { &#39;홍길동&#39;: 80, &#39;공유&#39;: 90, &#39;현빈&#39;: 100 } for key,value in dict_scores.items(): print(key, value) . 홍길동 80 공유 90 현빈 100 . &#46357;&#49492;&#45320;&#47532;: &#51221;&#47148;&#54616;&#50668; &#52636;&#47141;&#54616;&#44592; . dict_scores = { &#39;홍길동&#39;: 80, &#39;공유&#39;: 90, &#39;현빈&#39;: 100 } #딕셔너리의 키를 정렬하여 리스트로 받음 new_list = sorted(dict_scores.keys()) print(new_list) #정렬된 키 리스트 순서로 반복 for key in new_list: print(key, dict_scores[key]) . [&#39;공유&#39;, &#39;현빈&#39;, &#39;홍길동&#39;] 공유 90 현빈 100 홍길동 80 . dict_scores = { &#39;홍길동&#39;: 80, &#39;공유&#39;: 90, &#39;현빈&#39;: 100 } #딕셔너리의 키를 정렬하여 #튜플(키,값)으로 받음 item_list = sorted(dict_scores.items()) print(item_list) #정렬된 키 리스트 순서로 반복 for key,value in item_list: print(key, value) . &#50696;&#51228;) &#47560;&#51068;&#47532;&#51648; &#44288;&#47532; . 회사 쇼핑몰 고객의 아이디에 부여된 마일리지 포인트를 딕셔너리에 저장하여 관리하고자 한다 아이디 = Kim, Lee, Han, Hong, Hwang 마일리지 = 12000, 11000, 3000, 5000, 18000 ​ . 아이디와 마일리지 포인트를 딕셔너리에 저장한 다음 출력하는 프로그램을 작성하시오 | 아이디 Han의 마일리지를 5000점으로 업데이트 하시오 | 아이디 Jang의 마일리지 7000점을 추가하시오 | 딕셔너리에서 가장 높은 마일리지를 찾아서 출력하는 프로그램을 작성하시오 | mile = { &#39;Kim&#39;: 12000, &#39;Lee&#39;: 11000, &#39;Han&#39;: 3000, &#39;Hong&#39;: 5000, &#39;Hwang&#39;: 18000 } print(mile) #value 업데이트 mile[&#39;Han&#39;] = 5000 print(mile) #key:value 추가하기 mile[&#39;Jang&#39;] = 7000 print(mile) #가장 높은 마일리지 찾기 print(f&#39;가장 높은 마일리지는 {max(mile.keys())}님의 {max(mile.values())}점 입니다.&#39;) . {&#39;Kim&#39;: 12000, &#39;Lee&#39;: 11000, &#39;Han&#39;: 3000, &#39;Hong&#39;: 5000, &#39;Hwang&#39;: 18000} {&#39;Kim&#39;: 12000, &#39;Lee&#39;: 11000, &#39;Han&#39;: 5000, &#39;Hong&#39;: 5000, &#39;Hwang&#39;: 18000} {&#39;Kim&#39;: 12000, &#39;Lee&#39;: 11000, &#39;Han&#39;: 5000, &#39;Hong&#39;: 5000, &#39;Hwang&#39;: 18000, &#39;Jang&#39;: 7000} 가장 높은 마일리지는 Lee님의 18000점 입니다. . &#50696;&#51228;) &#45800;&#50612;&#51109; &#47564;&#46308;&#44592; . dict_voca = {} while True: eng = input(&#39;영어단어를 입력하세요: &#39;) if eng == &#39;&#39;: break kor = input(&#39;뜻을 입력하세요: &#39;) dict_voca[eng] = kor score = 0 for eng_word in dict_voca.keys(): #eng_word에 dict_voca 딕셔너리의 키값을 가져온다 answer = input(eng_word + &#39;:&#39;) if answer == dict_voca[eng_word]: score+=1 print(&#39;-&#39;*50) print(f&#39;총 점수는 {score}/{len(dict_voca)}입니다.&#39;) . 영어단어를 입력하세요: tree 뜻을 입력하세요: 나무 영어단어를 입력하세요: tree:나무 -- 총 점수는 1/1입니다. .",
            "url": "https://engineer-uni.github.io/BabyEngineer-Unilog/2021/05/27/%ED%8A%9C%ED%94%8C%EA%B3%BC-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC.html",
            "relUrl": "/2021/05/27/%ED%8A%9C%ED%94%8C%EA%B3%BC-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC.html",
            "date": " • May 27, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Title",
            "content": ". &#51648;&#45212;&#51452; &#48373;&#49845;: &#45936;&#51060;&#53552; &#53440;&#51077; . test1 = 1 print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 # 따옴표 안의 숫자는 문자로 인식한다 a, b= 10, 20 print(a+b) a, b = &#39;10&#39;, &#39;20&#39; print(c+d) # 숫자와 문자는 계산되지 않는다 a, b = abcd, 20 print(a+b) . 1 &lt;class &#39;int&#39;&gt; 94905490205184 30 1020 . NameError Traceback (most recent call last) &lt;ipython-input-29-376c73c22bfa&gt; in &lt;module&gt;() 12 a, b = &#39;10&#39;, &#39;20&#39; 13 print(c+d) &gt; 14 a, b = abcd, 20 15 print(a+b) NameError: name &#39;abcd&#39; is not defined . print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 . 1.0 &lt;class &#39;float&#39;&gt; 139669584096688 . test1 = &quot;hi&quot; print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 # 문자열 여러줄 넣고 싶다면 따옴표 3개를 연달아 작성한다 a = &#39;&#39;&#39;자세히 보아야 예쁘다. 오래 보아야 사랑스럽다. 너도 그렇다.&#39;&#39;&#39; print(a) . hi &lt;class &#39;str&#39;&gt; 139670275605488 자세히 보아야 예쁘다. 오래 보아야 사랑스럽다. 너도 그렇다. . test1 = True print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 b = 1 &gt; 2 print(b) . True &lt;class &#39;bool&#39;&gt; 94905489531136 False . test1 = [1,2,3] print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 . [1, 2, 3] &lt;class &#39;list&#39;&gt; 139669583916880 . test1 = (1,2,3) print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 . (1, 2, 3) &lt;class &#39;tuple&#39;&gt; 139669584078560 . test1 = {&#39;name&#39; : &#39;john&#39;, &#39;age&#39; : 15} print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 . {&#39;name&#39;: &#39;john&#39;, &#39;age&#39;: 15} &lt;class &#39;dict&#39;&gt; 139669651052016 . test1 = {1,2,3,4} print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 . {1, 2, 3, 4} &lt;class &#39;set&#39;&gt; 139669712745728 . &#54805; &#48320;&#54872; &#54632;&#49688; . int(), float(), str() . a, b= 10, &quot;20&quot; print(a+int(b)) . 30 . a, b= 10, 20 print(str(a)+str(b)) . 1020 . a, b= 10, 20 print(float(a)+float(b)) . 30.0 . a, b= 10.3, 20.8 print(int(a)+int(b)) . 30 . &#48320;&#49688;&#50640; &#44050; &#51077;&#47141;&#48155;&#44592; &gt; input() . input으로 입력받은 값은 문자값으로 출력된다 . name = input(&#39;이름을 입력하세요&#39;) print( name, &#39;님 안녕하세요?&#39;) . 이름을 입력하세요허윤희 허윤희 님 안녕하세요? . &#52636;&#47141; &gt; print() . print(5) print(0.5) print(&#39;Hi&#39;) print(&#39;10&#39;) . 5 0.5 Hi 10 . print(1+2) print(2&gt;3) print(2&lt;3) . 3 False True . a = 1 print(a) print(a+1) . 1 2 . print(&#39;Hello&#39;,&#39;World&#39;) print(&#39;1 더하기 2는&#39;, 1+2) age = 10 print(&#39;나는&#39;, age, &#39;살 입니다&#39;) . Hello World 1 더하기 2는 3 나는 10 살 입니다 . &#52636;&#47141; &gt; f&#49828;&#53944;&#47553; . 문장 사이에 변수값을 출력할 때 편리하다. . name = input(&#39;이름을 입력하세요&#39;) print( f&#39;{name}님 안녕하세요?&#39;) . 이름을 입력하세요허윤희 허윤희님 안녕하세요? . &#49328;&#49696;&#50672;&#49328; . x = 100 y = 3 print(x // y) . 33 . x = 100 y = 3 print(x % y) . 1 . x = 100 y = 3 print(x ** y) . 1000000 . &#46160; &#49688;&#47484; &#51077;&#47141;&#48155;&#50500; &#45908;&#54616;&#45716; &#54532;&#47196;&#44536;&#47016; . print(&#39;두 수를 입력받아 더하는 프로그램입니다.&#39;) a = input(&#39;첫번째 숫자를 입력하세요: &#39;) b = input(&#39;두번째 숫자를 입력하세요: &#39;) print(f&#39;{a} + {b} = {int(a)+int(b)}&#39;) . 두 수를 입력받아 더하는 프로그램입니다. 첫번째 숫자를 입력하세요: 10 두번째 숫자를 입력하세요: 20 10 + 20 = 30 . &#49328;&#49696;&#50672;&#49328;&#51032; &#50864;&#49440;&#49692;&#50948; . () &gt; * &gt; , / &gt; +, - . &#54868;&#50472;&#50728;&#46020; &gt; &#49453;&#50472;&#50728;&#46020;&#47196; &#48320;&#54872;&#54616;&#44592; . a = input(&#39;화씨온도: &#39;) print(&#39;섭씨온도:&#39;,(int(a)-32)*5/9) . 화씨온도: 100 섭씨온도: 37.77777777777778 . &#49340;&#44033;&#54805; &#45331;&#51060; . a = float(input(&#39;밑변:&#39;)) h = float(input(&#39;높이:&#39;)) print(&#39;삼각형의 넓이:&#39;, a*h/2) . 밑변:3.2 높이:5.5 삼각형의 넓이: 8.8 . &#50896;&#51032; &#45331;&#51060; &#44396;&#54616;&#44592; . a = float(input(&#39;반지름: &#39;)) print(&#39;원의 둘레:&#39;, 2*a*3.14 , &#39;원의 넓이:&#39;, 3.14*a**2) . 반지름: 3 원의 둘레: 18.84 원의 넓이: 28.26 . &#54624;&#45817; &#50672;&#49328;&#51088; . 주소에 변수값 할당하기 | 기호 &#39;=&#39; 사용 | &#39;==&#39;는 [같다]라는 연산 표현 | a = 1 print(a) # 여러개의 변수에 하나의 값 할당 a = b = c = 1 print(a,b,c) # 여러개의 변수에 각각 다른 값 할당 a, b, c = 1, 2, 3 print(a,b,c) . 1 1 1 1 1 2 3 . &#48373;&#54633;&#54624;&#45817; &#50672;&#49328;&#51088; . x = 10 x += 20 # x = x(기존) + 20 print(x) . 30 . x = 3 y = 5 x *= x + y # x = x * (x + y) print(x) . 24 . &#47928;&#51088;&#50676; &#50672;&#44208;&#54616;&#44592; . name = input(&#39;이름을 입력하세요: &#39;) greet = name + &#39;님, 안녕하세요&#39; print(greet) . 이름을 입력하세요: 윤희 윤희님, 안녕하세요 . English = 80 result = &#39;영어점수: &#39; + str(English) + &#39;점&#39; print(result) . 영어점수: 80점 . &#47196;&#48391; &#44592;&#51088; &#47564;&#46308;&#44592; . stadium = input(&#39;경기장소: &#39;) winner = input(&#39;이긴 팀: &#39;) loser = input(&#39;진 팀: &#39;) vip = input(&#39;vip 선수: &#39;) score = input(&#39;점수: &#39;) print(&#39;-&#39; * 50) print(f&#39;&#39;&#39;오늘 {stadium}에서 경기가 열렸습니다. {winner}와(과) {loser}은(는) 치열한 공방전을 펼쳤습니다. {vip}이(가) 맹활약을 펼습니다. 결국 {winner}이(가) {loser}을(를) {score}로 이겼습니다.&#39;&#39;&#39;) . 경기장소: 올림픽 경기장 이긴 팀: 대한민국 진 팀: 일본 vip 선수: 손흥민 점수: 3:0 -- 오늘 올림픽 경기장에서 경기가 열렸습니다. 대한민국와(과) 일본은(는) 치열한 공방전을 펼쳤습니다. 손흥민이(가) 맹활약을 펼습니다. 결국 대한민국이(가) 일본을(를) 3:0로 이겼습니다. . &#44305;&#44256; &#47564;&#46308;&#44592; . location = input(&#39;어느 지역인가요?&#39;) loc_type = input(&#39;매물의 종류는 무엇인가요?&#39;) dimensions = input(&#39;면적은 어떻게 되나요?(평수)&#39;) room_nm = input(&#39;방의 개수는 몇개인가요?&#39;) price = input(&#39;가격은 얼마인가요?&#39;) print(&#39;-&#39; * 50) print(f&#39;&#39;&#39;{location}에 위치한 아주 좋은 {loc_type}이(가) 매물로 나왔습니다. 이 {loc_type}는 {dimensions}평으로 {room_nm}개의 방을 가지고 있습니다. 가격은 {price}만원 입니다.&#39;&#39;&#39;) . 어느 지역인가요?서울 매물의 종류는 무엇인가요?아파트 면적은 어떻게 되나요?(평수)20 방의 개수는 몇개인가요?2 가격은 얼마인가요?17억 -- 서울에 위치한 아주 좋은 아파트이(가) 매물로 나왔습니다. 이 아파트는 20평으로 2개의 방을 가지고 있습니다. 가격은 17억만원 입니다. . nmb_member = input(&#39;팀원은 총 몇명인가요?&#39;) team_nm = input(&#39;팀명은 무엇인가요?&#39;) print(&#39;-&#39; * 50) print(f&#39;&#39;&#39;저희 팀은 총 {nmb_member}명으로 이루어진 {team_nm}팀 입니다!&#39;&#39;&#39;) . 팀원은 총 몇명인가요?7 팀명은 무엇인가요?네카라쿠배삼파망 -- 저희 팀은 총 7명으로 이루어진 네카라쿠배삼파망팀 입니다! . &#49457;&#51201;&#44228;&#49328; &#54532;&#47196;&#44536;&#47016; . input(&#39;이름을 입력하세요: &#39;) a = int(input(&#39;국어성적을 입력하세요: &#39;)) b = int(input(&#39;영어성적을 입력하세요: &#39;)) c = int(input(&#39;수학성적을 입력하세요: &#39;)) print(&#39;-&#39;*50) print(f&#39;평균성적은 {(a + b + c)/3}점입니다.&#39;) . &#52964;&#54588;&#44032;&#44172; &#47588;&#52636; &#44228;&#49328;&#54616;&#44592; . americano = 2000 latte = 3000 cappuccino = 3500 a = int(input(&#39;아메리카노 판매 갯수: &#39;)) b = int(input(&#39;카페라떼 판매 갯수: &#39;)) c = int(input(&#39;카푸치노 판매 갯수: &#39;)) print(&#39;-&#39;*50) print(f&#39;총 매출은 {americano*a + latte*b + cappuccino*c}원입니다.&#39;) . 아메리카노 판매 갯수: 2 카페라떼 판매 갯수: 4 카푸치노 판매 갯수: 6 -- 총 매출은 37000원입니다. . ame = int(input(&#39;아메리카노 판매 갯수: &#39;)) latte = int(input(&#39;카페라떼 판매 갯수: &#39;)) chino = int(input(&#39;카푸치노 판매 갯수: &#39;)) price = (ame*2000) + (latte*3000) + (chino*3500) print(&#39;-&#39;*50) print(&#39;총 매출은&#39;, price, &#39;원입니다.&#39;) . 아메리카노 판매 갯수: 4 카페라떼 판매 갯수: 7 카푸치노 판매 갯수: 1 -- 총 매출은 32500 원입니다. . &#47928;&#51088;&#47196; &#51089;&#49457; . n =&gt; 줄넘김,enter t =&gt; 줄맞춤(intent),tap . print(&#39;셀 병합 n t &#39;shift key &#39;를 누른 후 n t t 병합을 원하는 셀들을 다중선택 후 shift+m&#39;) . 셀 병합 &#39;shift key&#39;를 누른 후 병합을 원하는 셀들을 다중선택 후 shift+m . &#47928;&#51088;&#50676;&#47196;&#49436;&#51032; &#49707;&#51088;&#52376;&#47532; . 주민번호, 우편번호등 값이 0으로 시작되는 정수 파이썬에서는 정수가 0으로 시작하면 정수값 입력오류로 문법 오류 처리 . print(210101-1111111) print(&#39;210101-1111111&#39;) . join&#44284; split . join: 문자열을 원하는 글자로 더한다. split: 문자열을 원하는 글자로 나눈다. . print(&#39;-&#39;.join(&#39;Hello World&#39;)) print(&#39;Welcome to Python&#39;.split(&#39; &#39;)) . H-e-l-l-o- -W-o-r-l-d [&#39;Welcome&#39;, &#39;to&#39;, &#39;Python&#39;] . a = 8 == 12 print(a, type(a)) b = &#39;apple&#39; == &#39;APPLE&#39; print(b,type(b)) c = 8 != 12 print(c, type(c)) . False &lt;class &#39;bool&#39;&gt; False &lt;class &#39;bool&#39;&gt; True &lt;class &#39;bool&#39;&gt; .",
            "url": "https://engineer-uni.github.io/BabyEngineer-Unilog/2021/05/25/%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95%EA%B3%BC%EC%97%B0%EC%82%B0.html",
            "relUrl": "/2021/05/25/%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95%EA%B3%BC%EC%97%B0%EC%82%B0.html",
            "date": " • May 25, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Title",
            "content": ". &#44061;&#52404;&#51032; &#51088;&#47308;&#54805; &#54869;&#51064; type() . a = 5 b = 3.13 c = &#39;3.14&#39; d = &quot;3,14&quot; e = -3.14 f = &#39;abc&#39; + &#39;가나다&#39; g = &#39;123&#39;*3 print(type(a),type(b),type(c),type(d),type(e),type(f),type(g)) print(f) print(g) . &lt;class &#39;int&#39;&gt; &lt;class &#39;float&#39;&gt; &lt;class &#39;str&#39;&gt; &lt;class &#39;str&#39;&gt; &lt;class &#39;float&#39;&gt; &lt;class &#39;str&#39;&gt; &lt;class &#39;str&#39;&gt; abc가나다 123123123 . &#48320;&#49688;&#47749; &#50640;&#47084; &#50976;&#54805; . # f**t = &#39;첫번째&#39; / 문자사용 x(언더바 제외) # f^st = &#39;첫번째&#39; / 문자사용 x(언더바 제외) Temp = 1000 # print(temp) / temp와 Temp는 구분된다. (대소문자 구분) # print = &#39;출력합니다.&#39; / 함수를 변수로 사용할 수 없습니다. # print(print) / 함수를 변수로 사용할 수 없습니다. . &#54028;&#51060;&#50028; &#50672;&#49328; . # 하지만 계산후 결과값은 일회성으로 보여지기만 합니다. # 결과나 과정, 변환된 값을 유지해야하는 경우 프로그램에서 변수가 필요합니다. print(100+200) print(&quot;Hello world&quot;) . 300 Hello world . temp = 100 # temp 라는 변수를 만들고 temp 공간에 100 을 넣는다는 의미 temp # temp 값을 확인하겠다는 의미입니다. 코랩 외의 환경에서는 print(temp) . 100 . temp2 = 200 print(temp2) # 코랩 외의 환경에서는 print(temp) . 200 . temp3 = temp + temp2 # temp3에 temp의 값과 temp2 을 더해서 넣는다 temp3 . 300 . &#47532;&#49828;&#53944; [] . list0 = [1,3,7,5,3,6,8,10,5,&#39;마지막&#39;] print(list0) . [1, 3, 7, 5, 3, 6, 8, 10, 5, &#39;마지막&#39;] . len(list0) #list0 배열 원소값을 요청 (몇개?) # len은 문자열의 길이도 구할 수 있습니다. . 10 . print(list0[0]) #list1배열의 첫번째 원소값을 출력 print(list0[-1]) #list1배열의 마지막 원소값을 출력 #list 배열의 마지막 원소값을 문자열과 함께 출력 print(&#39;list1 배열의 마지막 원소값은&#39; + &#39; &quot;&#39;+ str(list1[-1]) + &#39;&quot;&#39; + &#39;입니다&#39;) . 1 마지막 list1 배열의 마지막 원소값은 &#34;마지막&#34;입니다 . print(list0[2:6]) #index2(3번째 원소)부터 5까지 출력 print(list0[2:]) print(list0[:6]) print(list0[:-1]) . [7, 5, 3, 6] [7, 5, 3, 6, 8, 10, 5, &#39;마지막&#39;] [1, 3, 7, 5, 3, 6] [1, 3, 7, 5, 3, 6, 8, 10, 5] . range&#47484; &#49324;&#50857;&#54644;&#49436; &#47532;&#49828;&#53944; &#47564;&#46308;&#44592; . list_rg1 = list(range(11)) #0부터 10까지 list_rg2 = list(range(5,12)) #5부터 11까지 list_rg3 = list(range(-4,5,2)) #-4부터 4까지 2씩 증가 list_rg4 = list(range(20,-1,-1)) #20부터 0까지 -1씩 감소 list_rg5 = list(&#39;hello world&#39;) #문자 하나씩 리스트 원소로 들어간다 print(&quot;list_rg1은&quot; , list_rg1) print(&quot;list_rg2은&quot; , list_rg2) print(&quot;list_rg3은&quot; , list_rg3) print(&quot;list_rg4은&quot; , list_rg4) print(&quot;list_rg5은&quot; , list_rg5) . list_rg1은 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] list_rg2은 [5, 6, 7, 8, 9, 10, 11] list_rg3은 [-4, -2, 0, 2, 4] list_rg4은 [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] list_rg5은 [&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39; &#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;] . &#50836;&#49548;&#51032; &#44050; &#54624;&#45817; &#48143; &#49325;&#51228;&#54616;&#44592; . list_rg5[0] = &#39;H&#39; print(&quot;list_rg5의 0번째 요소 대문자로 수정&quot;, list_rg5) del list_rg5[5] #index 5(6번째)에 위치한 띄어쓰기 삭제 print(&quot;list_rg5의 5번째 요소 삭제&quot;, list_rg5) . list_rg5의 0번째 요소 대문자로 수정 [&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39; &#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;] list_rg5의 5번째 요소 삭제 [&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;] . &#53916;&#54540;() . 요소를 변경, 추가, 삭제 불가. 튜플은 읽기 전용 리스트다. . &#46357;&#49492;&#45320;&#47532;{} . For&#47928; (&#48152;&#48373;&#47928;) . for i in range(0,3,1): print(i, &#39;for문을 공부하고 있습니다&#39;) . 0 for문을 공부하고 있습니다 1 for문을 공부하고 있습니다 2 for문을 공부하고 있습니다 . for x in range(5): print(x) . 0 1 2 3 4 . sum = 0 start = 1 end = 11 for x in range(start,end): sum += x print(&#39;x:&#39;, x, &#39;sum:&#39;, sum) print(&#39;-&#39;*50) print(start, &#39;부터&#39;, end-1, &#39;까지 더한 총합은&#39;, sum,&#39;입니다&#39;) . x: 1 sum: 1 x: 2 sum: 3 x: 3 sum: 6 x: 4 sum: 10 x: 5 sum: 15 x: 6 sum: 21 x: 7 sum: 28 x: 8 sum: 36 x: 9 sum: 45 x: 10 sum: 55 -- 1 부터 10 까지 더한 총합은 55 입니다 . def grade(score): if score &gt;= 90: print(&#39;A&#39;) elif score &gt;=80: print(&#39;B&#39;) elif score &gt;=70: print(&#39;C&#39;) elif score &gt;=60: print(&#39;D&#39;) else : print(&#39;F&#39;) score = int(input(&#39;점수를 입력해주세요&#39;)) print(grade(score)) . &#47004;&#45924;&#51004;&#47196; &#52628;&#52636;&#54616;&#44592; random.randint() . random.randint(start, end) *randint는 뒤의 숫자도 포함! . import random list_DT = [&#39;람쥐&#39;, &#39;JYP&#39;, &#39;여름&#39;, &#39;유니콘&#39;, &#39;자룡&#39; , &#39;DB&#39;, &#39;전봇대&#39;] index = random.randint(0,len(list_DT)-1) print(rand_num, &quot;발표자는 &quot;+list_DT[index]+&quot;입니다&quot;) . 4 발표자는 유니콘입니다 .",
            "url": "https://engineer-uni.github.io/BabyEngineer-Unilog/2021/05/24/%ED%8C%8C%EC%9D%B4%EC%8D%AC%EA%B8%B0%EC%B4%88.html",
            "relUrl": "/2021/05/24/%ED%8C%8C%EC%9D%B4%EC%8D%AC%EA%B8%B0%EC%B4%88.html",
            "date": " • May 24, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://engineer-uni.github.io/BabyEngineer-Unilog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://engineer-uni.github.io/BabyEngineer-Unilog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://engineer-uni.github.io/BabyEngineer-Unilog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://engineer-uni.github.io/BabyEngineer-Unilog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}