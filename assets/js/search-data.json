{
  
    
        "post0": {
            "title": "Title",
            "content": ". &#51648;&#45212;&#51452; &#48373;&#49845;: &#45936;&#51060;&#53552; &#53440;&#51077; . test1 = 1 print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 # 따옴표 안의 숫자는 문자로 인식한다 a, b= 10, 20 print(a+b) a, b = &#39;10&#39;, &#39;20&#39; print(c+d) # 숫자와 문자는 계산되지 않는다 a, b = abcd, 20 print(a+b) . 1 &lt;class &#39;int&#39;&gt; 94905490205184 30 1020 . NameError Traceback (most recent call last) &lt;ipython-input-29-376c73c22bfa&gt; in &lt;module&gt;() 12 a, b = &#39;10&#39;, &#39;20&#39; 13 print(c+d) &gt; 14 a, b = abcd, 20 15 print(a+b) NameError: name &#39;abcd&#39; is not defined . print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 . 1.0 &lt;class &#39;float&#39;&gt; 139669584096688 . test1 = &quot;hi&quot; print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 # 문자열 여러줄 넣고 싶다면 따옴표 3개를 연달아 작성한다 a = &#39;&#39;&#39;자세히 보아야 예쁘다. 오래 보아야 사랑스럽다. 너도 그렇다.&#39;&#39;&#39; print(a) . hi &lt;class &#39;str&#39;&gt; 139670275605488 자세히 보아야 예쁘다. 오래 보아야 사랑스럽다. 너도 그렇다. . test1 = True print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 b = 1 &gt; 2 print(b) . True &lt;class &#39;bool&#39;&gt; 94905489531136 False . test1 = [1,2,3] print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 . [1, 2, 3] &lt;class &#39;list&#39;&gt; 139669583916880 . test1 = (1,2,3) print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 . (1, 2, 3) &lt;class &#39;tuple&#39;&gt; 139669584078560 . test1 = {&#39;name&#39; : &#39;john&#39;, &#39;age&#39; : 15} print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 . {&#39;name&#39;: &#39;john&#39;, &#39;age&#39;: 15} &lt;class &#39;dict&#39;&gt; 139669651052016 . test1 = {1,2,3,4} print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 . {1, 2, 3, 4} &lt;class &#39;set&#39;&gt; 139669712745728 . &#54805; &#48320;&#54872; &#54632;&#49688; . int(), float(), str() . a, b= 10, &quot;20&quot; print(a+int(b)) . 30 . a, b= 10, 20 print(str(a)+str(b)) . 1020 . a, b= 10, 20 print(float(a)+float(b)) . 30.0 . a, b= 10.3, 20.8 print(int(a)+int(b)) . 30 . &#48320;&#49688;&#50640; &#44050; &#51077;&#47141;&#48155;&#44592; &gt; input() . input으로 입력받은 값은 문자값으로 출력된다 . name = input(&#39;이름을 입력하세요&#39;) print( name, &#39;님 안녕하세요?&#39;) . 이름을 입력하세요허윤희 허윤희 님 안녕하세요? . &#52636;&#47141; &gt; print() . print(5) print(0.5) print(&#39;Hi&#39;) print(&#39;10&#39;) . 5 0.5 Hi 10 . print(1+2) print(2&gt;3) print(2&lt;3) . 3 False True . a = 1 print(a) print(a+1) . 1 2 . print(&#39;Hello&#39;,&#39;World&#39;) print(&#39;1 더하기 2는&#39;, 1+2) age = 10 print(&#39;나는&#39;, age, &#39;살 입니다&#39;) . Hello World 1 더하기 2는 3 나는 10 살 입니다 . &#52636;&#47141; &gt; f&#49828;&#53944;&#47553; . 문장 사이에 변수값을 출력할 때 편리하다. . name = input(&#39;이름을 입력하세요&#39;) print( f&#39;{name}님 안녕하세요?&#39;) . 이름을 입력하세요허윤희 허윤희님 안녕하세요? . &#49328;&#49696;&#50672;&#49328; . x = 100 y = 3 print(x // y) . 33 . x = 100 y = 3 print(x % y) . 1 . x = 100 y = 3 print(x ** y) . 1000000 . &#46160; &#49688;&#47484; &#51077;&#47141;&#48155;&#50500; &#45908;&#54616;&#45716; &#54532;&#47196;&#44536;&#47016; . print(&#39;두 수를 입력받아 더하는 프로그램입니다.&#39;) a = input(&#39;첫번째 숫자를 입력하세요: &#39;) b = input(&#39;두번째 숫자를 입력하세요: &#39;) print(f&#39;{a} + {b} = {int(a)+int(b)}&#39;) . 두 수를 입력받아 더하는 프로그램입니다. 첫번째 숫자를 입력하세요: 10 두번째 숫자를 입력하세요: 20 10 + 20 = 30 . &#49328;&#49696;&#50672;&#49328;&#51032; &#50864;&#49440;&#49692;&#50948; . () &gt; * &gt; , / &gt; +, - . &#54868;&#50472;&#50728;&#46020; &gt; &#49453;&#50472;&#50728;&#46020;&#47196; &#48320;&#54872;&#54616;&#44592; . a = input(&#39;화씨온도: &#39;) print(&#39;섭씨온도:&#39;,(int(a)-32)*5/9) . 화씨온도: 100 섭씨온도: 37.77777777777778 . &#49340;&#44033;&#54805; &#45331;&#51060; . a = float(input(&#39;밑변:&#39;)) h = float(input(&#39;높이:&#39;)) print(&#39;삼각형의 넓이:&#39;, a*h/2) . 밑변:3.2 높이:5.5 삼각형의 넓이: 8.8 . &#50896;&#51032; &#45331;&#51060; &#44396;&#54616;&#44592; . a = float(input(&#39;반지름: &#39;)) print(&#39;원의 둘레:&#39;, 2*a*3.14 , &#39;원의 넓이:&#39;, 3.14*a**2) . 반지름: 3 원의 둘레: 18.84 원의 넓이: 28.26 . &#54624;&#45817; &#50672;&#49328;&#51088; . 주소에 변수값 할당하기 | 기호 &#39;=&#39; 사용 | &#39;==&#39;는 [같다]라는 연산 표현 | a = 1 print(a) # 여러개의 변수에 하나의 값 할당 a = b = c = 1 print(a,b,c) # 여러개의 변수에 각각 다른 값 할당 a, b, c = 1, 2, 3 print(a,b,c) . 1 1 1 1 1 2 3 . &#48373;&#54633;&#54624;&#45817; &#50672;&#49328;&#51088; . x = 10 x += 20 # x = x(기존) + 20 print(x) . 30 . x = 3 y = 5 x *= x + y # x = x * (x + y) print(x) . 24 . &#47928;&#51088;&#50676; &#50672;&#44208;&#54616;&#44592; . name = input(&#39;이름을 입력하세요: &#39;) greet = name + &#39;님, 안녕하세요&#39; print(greet) . 이름을 입력하세요: 윤희 윤희님, 안녕하세요 . English = 80 result = &#39;영어점수: &#39; + str(English) + &#39;점&#39; print(result) . 영어점수: 80점 . &#47196;&#48391; &#44592;&#51088; &#47564;&#46308;&#44592; . stadium = input(&#39;경기장소: &#39;) winner = input(&#39;이긴 팀: &#39;) loser = input(&#39;진 팀: &#39;) vip = input(&#39;vip 선수: &#39;) score = input(&#39;점수: &#39;) print(&#39;-&#39; * 50) print(f&#39;&#39;&#39;오늘 {stadium}에서 경기가 열렸습니다. {winner}와(과) {loser}은(는) 치열한 공방전을 펼쳤습니다. {vip}이(가) 맹활약을 펼습니다. 결국 {winner}이(가) {loser}을(를) {score}로 이겼습니다.&#39;&#39;&#39;) . 경기장소: 올림픽 경기장 이긴 팀: 대한민국 진 팀: 일본 vip 선수: 손흥민 점수: 3:0 -- 오늘 올림픽 경기장에서 경기가 열렸습니다. 대한민국와(과) 일본은(는) 치열한 공방전을 펼쳤습니다. 손흥민이(가) 맹활약을 펼습니다. 결국 대한민국이(가) 일본을(를) 3:0로 이겼습니다. . &#44305;&#44256; &#47564;&#46308;&#44592; . location = input(&#39;어느 지역인가요?&#39;) loc_type = input(&#39;매물의 종류는 무엇인가요?&#39;) dimensions = input(&#39;면적은 어떻게 되나요?(평수)&#39;) room_nm = input(&#39;방의 개수는 몇개인가요?&#39;) price = input(&#39;가격은 얼마인가요?&#39;) print(&#39;-&#39; * 50) print(f&#39;&#39;&#39;{location}에 위치한 아주 좋은 {loc_type}이(가) 매물로 나왔습니다. 이 {loc_type}는 {dimensions}평으로 {room_nm}개의 방을 가지고 있습니다. 가격은 {price}만원 입니다.&#39;&#39;&#39;) . 어느 지역인가요?서울 매물의 종류는 무엇인가요?아파트 면적은 어떻게 되나요?(평수)20 방의 개수는 몇개인가요?2 가격은 얼마인가요?17억 -- 서울에 위치한 아주 좋은 아파트이(가) 매물로 나왔습니다. 이 아파트는 20평으로 2개의 방을 가지고 있습니다. 가격은 17억만원 입니다. . nmb_member = input(&#39;팀원은 총 몇명인가요?&#39;) team_nm = input(&#39;팀명은 무엇인가요?&#39;) print(&#39;-&#39; * 50) print(f&#39;&#39;&#39;저희 팀은 총 {nmb_member}명으로 이루어진 {team_nm}팀 입니다!&#39;&#39;&#39;) . 팀원은 총 몇명인가요?7 팀명은 무엇인가요?네카라쿠배삼파망 -- 저희 팀은 총 7명으로 이루어진 네카라쿠배삼파망팀 입니다! . &#49457;&#51201;&#44228;&#49328; &#54532;&#47196;&#44536;&#47016; . input(&#39;이름을 입력하세요: &#39;) a = int(input(&#39;국어성적을 입력하세요: &#39;)) b = int(input(&#39;영어성적을 입력하세요: &#39;)) c = int(input(&#39;수학성적을 입력하세요: &#39;)) print(&#39;-&#39;*50) print(f&#39;평균성적은 {(a + b + c)/3}점입니다.&#39;) . &#52964;&#54588;&#44032;&#44172; &#47588;&#52636; &#44228;&#49328;&#54616;&#44592; . americano = 2000 latte = 3000 cappuccino = 3500 a = int(input(&#39;아메리카노 판매 갯수: &#39;)) b = int(input(&#39;카페라떼 판매 갯수: &#39;)) c = int(input(&#39;카푸치노 판매 갯수: &#39;)) print(&#39;-&#39;*50) print(f&#39;총 매출은 {americano*a + latte*b + cappuccino*c}원입니다.&#39;) . 아메리카노 판매 갯수: 2 카페라떼 판매 갯수: 4 카푸치노 판매 갯수: 6 -- 총 매출은 37000원입니다. . ame = int(input(&#39;아메리카노 판매 갯수: &#39;)) latte = int(input(&#39;카페라떼 판매 갯수: &#39;)) chino = int(input(&#39;카푸치노 판매 갯수: &#39;)) price = (ame*2000) + (latte*3000) + (chino*3500) print(&#39;-&#39;*50) print(&#39;총 매출은&#39;, price, &#39;원입니다.&#39;) . 아메리카노 판매 갯수: 4 카페라떼 판매 갯수: 7 카푸치노 판매 갯수: 1 -- 총 매출은 32500 원입니다. . &#47928;&#51088;&#47196; &#51089;&#49457; . n =&gt; 줄넘김,enter t =&gt; 줄맞춤(intent),tap . print(&#39;셀 병합 n t &#39;shift key &#39;를 누른 후 n t t 병합을 원하는 셀들을 다중선택 후 shift+m&#39;) . 셀 병합 &#39;shift key&#39;를 누른 후 병합을 원하는 셀들을 다중선택 후 shift+m . &#47928;&#51088;&#50676;&#47196;&#49436;&#51032; &#49707;&#51088;&#52376;&#47532; . 주민번호, 우편번호등 값이 0으로 시작되는 정수 파이썬에서는 정수가 0으로 시작하면 정수값 입력오류로 문법 오류 처리 . print(210101-1111111) print(&#39;210101-1111111&#39;) . join&#44284; split . join: 문자열을 원하는 글자로 더한다. split: 문자열을 원하는 글자로 나눈다. . print(&#39;-&#39;.join(&#39;Hello World&#39;)) print(&#39;Welcome to Python&#39;.split(&#39; &#39;)) . H-e-l-l-o- -W-o-r-l-d [&#39;Welcome&#39;, &#39;to&#39;, &#39;Python&#39;] . a = 8 == 12 print(a, type(a)) b = &#39;apple&#39; == &#39;APPLE&#39; print(b,type(b)) c = 8 != 12 print(c, type(c)) . False &lt;class &#39;bool&#39;&gt; False &lt;class &#39;bool&#39;&gt; True &lt;class &#39;bool&#39;&gt; .",
            "url": "https://engineer-uni.github.io/BabyEngineer-Unilog/2021/05/25/%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95%EA%B3%BC%EC%97%B0%EC%82%B0.html",
            "relUrl": "/2021/05/25/%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95%EA%B3%BC%EC%97%B0%EC%82%B0.html",
            "date": " • May 25, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": ". &#44061;&#52404;&#51032; &#51088;&#47308;&#54805; &#54869;&#51064; type() . a = 5 b = 3.13 c = &#39;3.14&#39; d = &quot;3,14&quot; e = -3.14 f = &#39;abc&#39; + &#39;가나다&#39; g = &#39;123&#39;*3 print(type(a),type(b),type(c),type(d),type(e),type(f),type(g)) print(f) print(g) . &lt;class &#39;int&#39;&gt; &lt;class &#39;float&#39;&gt; &lt;class &#39;str&#39;&gt; &lt;class &#39;str&#39;&gt; &lt;class &#39;float&#39;&gt; &lt;class &#39;str&#39;&gt; &lt;class &#39;str&#39;&gt; abc가나다 123123123 . &#48320;&#49688;&#47749; &#50640;&#47084; &#50976;&#54805; . # f**t = &#39;첫번째&#39; / 문자사용 x(언더바 제외) # f^st = &#39;첫번째&#39; / 문자사용 x(언더바 제외) Temp = 1000 # print(temp) / temp와 Temp는 구분된다. (대소문자 구분) # print = &#39;출력합니다.&#39; / 함수를 변수로 사용할 수 없습니다. # print(print) / 함수를 변수로 사용할 수 없습니다. . &#54028;&#51060;&#50028; &#50672;&#49328; . # 하지만 계산후 결과값은 일회성으로 보여지기만 합니다. # 결과나 과정, 변환된 값을 유지해야하는 경우 프로그램에서 변수가 필요합니다. print(100+200) print(&quot;Hello world&quot;) . 300 Hello world . temp = 100 # temp 라는 변수를 만들고 temp 공간에 100 을 넣는다는 의미 temp # temp 값을 확인하겠다는 의미입니다. 코랩 외의 환경에서는 print(temp) . 100 . temp2 = 200 print(temp2) # 코랩 외의 환경에서는 print(temp) . 200 . temp3 = temp + temp2 # temp3에 temp의 값과 temp2 을 더해서 넣는다 temp3 . 300 . &#47532;&#49828;&#53944; [] . list0 = [1,3,7,5,3,6,8,10,5,&#39;마지막&#39;] print(list0) . [1, 3, 7, 5, 3, 6, 8, 10, 5, &#39;마지막&#39;] . len(list0) #list0 배열 원소값을 요청 (몇개?) # len은 문자열의 길이도 구할 수 있습니다. . 10 . print(list0[0]) #list1배열의 첫번째 원소값을 출력 print(list0[-1]) #list1배열의 마지막 원소값을 출력 #list 배열의 마지막 원소값을 문자열과 함께 출력 print(&#39;list1 배열의 마지막 원소값은&#39; + &#39; &quot;&#39;+ str(list1[-1]) + &#39;&quot;&#39; + &#39;입니다&#39;) . 1 마지막 list1 배열의 마지막 원소값은 &#34;마지막&#34;입니다 . print(list0[2:6]) #index2(3번째 원소)부터 5까지 출력 print(list0[2:]) print(list0[:6]) print(list0[:-1]) . [7, 5, 3, 6] [7, 5, 3, 6, 8, 10, 5, &#39;마지막&#39;] [1, 3, 7, 5, 3, 6] [1, 3, 7, 5, 3, 6, 8, 10, 5] . range&#47484; &#49324;&#50857;&#54644;&#49436; &#47532;&#49828;&#53944; &#47564;&#46308;&#44592; . list_rg1 = list(range(11)) #0부터 10까지 list_rg2 = list(range(5,12)) #5부터 11까지 list_rg3 = list(range(-4,5,2)) #-4부터 4까지 2씩 증가 list_rg4 = list(range(20,-1,-1)) #20부터 0까지 -1씩 감소 list_rg5 = list(&#39;hello world&#39;) #문자 하나씩 리스트 원소로 들어간다 print(&quot;list_rg1은&quot; , list_rg1) print(&quot;list_rg2은&quot; , list_rg2) print(&quot;list_rg3은&quot; , list_rg3) print(&quot;list_rg4은&quot; , list_rg4) print(&quot;list_rg5은&quot; , list_rg5) . list_rg1은 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] list_rg2은 [5, 6, 7, 8, 9, 10, 11] list_rg3은 [-4, -2, 0, 2, 4] list_rg4은 [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] list_rg5은 [&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39; &#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;] . &#50836;&#49548;&#51032; &#44050; &#54624;&#45817; &#48143; &#49325;&#51228;&#54616;&#44592; . list_rg5[0] = &#39;H&#39; print(&quot;list_rg5의 0번째 요소 대문자로 수정&quot;, list_rg5) del list_rg5[5] #index 5(6번째)에 위치한 띄어쓰기 삭제 print(&quot;list_rg5의 5번째 요소 삭제&quot;, list_rg5) . list_rg5의 0번째 요소 대문자로 수정 [&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39; &#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;] list_rg5의 5번째 요소 삭제 [&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;] . &#53916;&#54540;() . 요소를 변경, 추가, 삭제 불가. 튜플은 읽기 전용 리스트다. . &#46357;&#49492;&#45320;&#47532;{} . For&#47928; (&#48152;&#48373;&#47928;) . for i in range(0,3,1): print(i, &#39;for문을 공부하고 있습니다&#39;) . 0 for문을 공부하고 있습니다 1 for문을 공부하고 있습니다 2 for문을 공부하고 있습니다 . for x in range(5): print(x) . 0 1 2 3 4 . sum = 0 start = 1 end = 11 for x in range(start,end): sum += x print(&#39;x:&#39;, x, &#39;sum:&#39;, sum) print(&#39;-&#39;*50) print(start, &#39;부터&#39;, end-1, &#39;까지 더한 총합은&#39;, sum,&#39;입니다&#39;) . x: 1 sum: 1 x: 2 sum: 3 x: 3 sum: 6 x: 4 sum: 10 x: 5 sum: 15 x: 6 sum: 21 x: 7 sum: 28 x: 8 sum: 36 x: 9 sum: 45 x: 10 sum: 55 -- 1 부터 10 까지 더한 총합은 55 입니다 . def grade(score): if score &gt;= 90: print(&#39;A&#39;) elif score &gt;=80: print(&#39;B&#39;) elif score &gt;=70: print(&#39;C&#39;) elif score &gt;=60: print(&#39;D&#39;) else : print(&#39;F&#39;) score = int(input(&#39;점수를 입력해주세요&#39;)) print(grade(score)) . &#47004;&#45924;&#51004;&#47196; &#52628;&#52636;&#54616;&#44592; random.randint() . random.randint(start, end) *randint는 뒤의 숫자도 포함! . import random list_DT = [&#39;람쥐&#39;, &#39;JYP&#39;, &#39;여름&#39;, &#39;유니콘&#39;, &#39;자룡&#39; , &#39;DB&#39;, &#39;전봇대&#39;] index = random.randint(0,len(list_DT)-1) print(rand_num, &quot;발표자는 &quot;+list_DT[index]+&quot;입니다&quot;) . 4 발표자는 유니콘입니다 .",
            "url": "https://engineer-uni.github.io/BabyEngineer-Unilog/2021/05/24/%ED%8C%8C%EC%9D%B4%EC%8D%AC%EA%B8%B0%EC%B4%88.html",
            "relUrl": "/2021/05/24/%ED%8C%8C%EC%9D%B4%EC%8D%AC%EA%B8%B0%EC%B4%88.html",
            "date": " • May 24, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://engineer-uni.github.io/BabyEngineer-Unilog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://engineer-uni.github.io/BabyEngineer-Unilog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://engineer-uni.github.io/BabyEngineer-Unilog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://engineer-uni.github.io/BabyEngineer-Unilog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}